{"version":3,"file":"xeokit-convert.cjs.js","mappings":"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","sources":["webpack://convert2xkt/webpack/universalModuleDefinition","webpack://convert2xkt/external commonjs \"fs\"","webpack://convert2xkt/webpack/bootstrap","webpack://convert2xkt/webpack/runtime/define property getters","webpack://convert2xkt/webpack/runtime/hasOwnProperty shorthand","webpack://convert2xkt/webpack/runtime/make namespace object","webpack://convert2xkt/external commonjs \"@loaders.gl/polyfills\"","webpack://convert2xkt/./src/XKT_INFO.js","webpack://convert2xkt/./src/lib/math.js","webpack://convert2xkt/./src/XKTModel/lib/geometryCompression.js","webpack://convert2xkt/./src/constants.js","webpack://convert2xkt/./src/XKTModel/lib/buildEdgeIndices.js","webpack://convert2xkt/./src/XKTModel/lib/isTriangleMeshSolid.js","webpack://convert2xkt/./src/XKTModel/XKTMesh.js","webpack://convert2xkt/./src/XKTModel/XKTGeometry.js","webpack://convert2xkt/./src/XKTModel/XKTEntity.js","webpack://convert2xkt/./src/XKTModel/XKTTile.js","webpack://convert2xkt/./src/XKTModel/KDNode.js","webpack://convert2xkt/./src/XKTModel/XKTMetaObject.js","webpack://convert2xkt/./src/XKTModel/XKTPropertySet.js","webpack://convert2xkt/./src/XKTModel/XKTTexture.js","webpack://convert2xkt/./src/XKTModel/XKTTextureSet.js","webpack://convert2xkt/external commonjs \"@loaders.gl/core\"","webpack://convert2xkt/external commonjs \"@loaders.gl/textures\"","webpack://convert2xkt/external commonjs \"@loaders.gl/images\"","webpack://convert2xkt/./src/XKTModel/XKTModel.js","webpack://convert2xkt/./src/lib/mergeVertices.js","webpack://convert2xkt/external commonjs \"pako\"","webpack://convert2xkt/./src/XKTModel/writeXKTModelToArrayBuffer.js","webpack://convert2xkt/./src/lib/earcut.js","webpack://convert2xkt/./src/parsers/parseCityJSONIntoXKTModel.js","webpack://convert2xkt/./src/XKTModel/lib/utils.js","webpack://convert2xkt/external commonjs \"@loaders.gl/gltf\"","webpack://convert2xkt/./src/parsers/parseGLTFIntoXKTModel.js","webpack://convert2xkt/./src/parsers/parseGLTFJSONIntoXKTModel.js","webpack://convert2xkt/./src/parsers/parseIFCIntoXKTModel.js","webpack://convert2xkt/external commonjs \"@loaders.gl/las\"","webpack://convert2xkt/./src/parsers/parseLASIntoXKTModel.js","webpack://convert2xkt/./src/parsers/parseMetaModelIntoXKTModel.js","webpack://convert2xkt/./src/parsers/parsePCDIntoXKTModel.js","webpack://convert2xkt/external commonjs \"@loaders.gl/ply\"","webpack://convert2xkt/./src/parsers/parsePLYIntoXKTModel.js","webpack://convert2xkt/./src/parsers/parseSTLIntoXKTModel.js","webpack://convert2xkt/./src/lib/faceToVertexNormals.js","webpack://convert2xkt/./src/geometryBuilders/buildBoxGeometry.js","webpack://convert2xkt/./src/geometryBuilders/buildBoxLinesGeometry.js","webpack://convert2xkt/./src/geometryBuilders/buildCylinderGeometry.js","webpack://convert2xkt/./src/geometryBuilders/buildGridGeometry.js","webpack://convert2xkt/./src/geometryBuilders/buildPlaneGeometry.js","webpack://convert2xkt/./src/geometryBuilders/buildSphereGeometry.js","webpack://convert2xkt/./src/geometryBuilders/buildTorusGeometry.js","webpack://convert2xkt/./src/geometryBuilders/buildVectorTextGeometry.js","webpack://convert2xkt/./src/XKTModel/lib/toArraybuffer.js","webpack://convert2xkt/./src/convert2xkt.js","webpack://convert2xkt/./index.dist.node.js"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"convert2xkt\"] = factory();\n\telse\n\t\troot[\"convert2xkt\"] = factory();\n})(global, () => {\nreturn ","module.exports = require(\"fs\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@loaders.gl/polyfills\");","/**\n * @desc Provides info on the XKT generated by xeokit-convert.\n */\nconst XKT_INFO = {\n\n    /**\n     * The XKT version generated by xeokit-convert.\n     *\n     * This is the XKT version that's modeled by {@link XKTModel}, serialized\n     * by {@link writeXKTModelToArrayBuffer}, and written by {@link convert2xkt}.\n     *\n     * * Current XKT version: **10**\n     * * [XKT format specs](https://github.com/xeokit/xeokit-convert/blob/main/specs/index.md)\n     *\n     * @property xktVersion\n     * @type {number}\n     */\n    xktVersion: 10\n};\n\nexport {XKT_INFO};","// Some temporary vars to help avoid garbage collection\n\nconst doublePrecision = true;\nconst FloatArrayType = doublePrecision ? Float64Array : Float32Array;\n\nconst tempMat1 = new FloatArrayType(16);\nconst tempMat2 = new FloatArrayType(16);\nconst tempVec4 = new FloatArrayType(4);\n\n/**\n * @private\n */\nconst math = {\n\n    MIN_DOUBLE: -Number.MAX_SAFE_INTEGER,\n    MAX_DOUBLE:  Number.MAX_SAFE_INTEGER,\n\n    /**\n     * The number of radiians in a degree (0.0174532925).\n     * @property DEGTORAD\n     * @type {Number}\n     */\n    DEGTORAD: 0.0174532925,\n\n    /**\n     * The number of degrees in a radian.\n     * @property RADTODEG\n     * @type {Number}\n     */\n    RADTODEG: 57.295779513,\n\n    /**\n     * Returns a new, uninitialized two-element vector.\n     * @method vec2\n     * @param [values] Initial values.\n     * @static\n     * @returns {Number[]}\n     */\n    vec2(values) {\n        return new FloatArrayType(values || 2);\n    },\n\n    /**\n     * Returns a new, uninitialized three-element vector.\n     * @method vec3\n     * @param [values] Initial values.\n     * @static\n     * @returns {Number[]}\n     */\n    vec3(values) {\n        return new FloatArrayType(values || 3);\n    },\n\n    /**\n     * Returns a new, uninitialized four-element vector.\n     * @method vec4\n     * @param [values] Initial values.\n     * @static\n     * @returns {Number[]}\n     */\n    vec4(values) {\n        return new FloatArrayType(values || 4);\n    },\n\n    /**\n     * Returns a new, uninitialized 3x3 matrix.\n     * @method mat3\n     * @param [values] Initial values.\n     * @static\n     * @returns {Number[]}\n     */\n    mat3(values) {\n        return new FloatArrayType(values || 9);\n    },\n\n    /**\n     * Converts a 3x3 matrix to 4x4\n     * @method mat3ToMat4\n     * @param mat3 3x3 matrix.\n     * @param mat4 4x4 matrix\n     * @static\n     * @returns {Number[]}\n     */\n    mat3ToMat4(mat3, mat4 = new FloatArrayType(16)) {\n        mat4[0] = mat3[0];\n        mat4[1] = mat3[1];\n        mat4[2] = mat3[2];\n        mat4[3] = 0;\n        mat4[4] = mat3[3];\n        mat4[5] = mat3[4];\n        mat4[6] = mat3[5];\n        mat4[7] = 0;\n        mat4[8] = mat3[6];\n        mat4[9] = mat3[7];\n        mat4[10] = mat3[8];\n        mat4[11] = 0;\n        mat4[12] = 0;\n        mat4[13] = 0;\n        mat4[14] = 0;\n        mat4[15] = 1;\n        return mat4;\n    },\n\n    /**\n     * Returns a new, uninitialized 4x4 matrix.\n     * @method mat4\n     * @param [values] Initial values.\n     * @static\n     * @returns {Number[]}\n     */\n    mat4(values) {\n        return new FloatArrayType(values || 16);\n    },\n\n    /**\n     * Converts a 4x4 matrix to 3x3\n     * @method mat4ToMat3\n     * @param mat4 4x4 matrix.\n     * @param mat3 3x3 matrix\n     * @static\n     * @returns {Number[]}\n     */\n    mat4ToMat3(mat4, mat3) { // TODO\n        //return new FloatArrayType(values || 9);\n    },\n\n    /**\n     * Returns a new UUID.\n     * @method createUUID\n     * @static\n     * @return string The new UUID\n     */\n    createUUID: ((() => {\n        const self = {};\n        const lut = [];\n        for (let i = 0; i < 256; i++) {\n            lut[i] = (i < 16 ? '0' : '') + (i).toString(16);\n        }\n        return () => {\n            const d0 = Math.random() * 0xffffffff | 0;\n            const d1 = Math.random() * 0xffffffff | 0;\n            const d2 = Math.random() * 0xffffffff | 0;\n            const d3 = Math.random() * 0xffffffff | 0;\n            return `${lut[d0 & 0xff] + lut[d0 >> 8 & 0xff] + lut[d0 >> 16 & 0xff] + lut[d0 >> 24 & 0xff]}-${lut[d1 & 0xff]}${lut[d1 >> 8 & 0xff]}-${lut[d1 >> 16 & 0x0f | 0x40]}${lut[d1 >> 24 & 0xff]}-${lut[d2 & 0x3f | 0x80]}${lut[d2 >> 8 & 0xff]}-${lut[d2 >> 16 & 0xff]}${lut[d2 >> 24 & 0xff]}${lut[d3 & 0xff]}${lut[d3 >> 8 & 0xff]}${lut[d3 >> 16 & 0xff]}${lut[d3 >> 24 & 0xff]}`;\n        };\n    }))(),\n\n    /**\n     * Clamps a value to the given range.\n     * @param {Number} value Value to clamp.\n     * @param {Number} min Lower bound.\n     * @param {Number} max Upper bound.\n     * @returns {Number} Clamped result.\n     */\n    clamp(value, min, max) {\n        return Math.max(min, Math.min(max, value));\n    },\n\n    /**\n     * Floating-point modulus\n     * @method fmod\n     * @static\n     * @param {Number} a\n     * @param {Number} b\n     * @returns {*}\n     */\n    fmod(a, b) {\n        if (a < b) {\n            console.error(\"math.fmod : Attempting to find modulus within negative range - would be infinite loop - ignoring\");\n            return a;\n        }\n        while (b <= a) {\n            a -= b;\n        }\n        return a;\n    },\n\n    /**\n     * Negates a four-element vector.\n     * @method negateVec4\n     * @static\n     * @param {Array(Number)} v Vector to negate\n     * @param  {Array(Number)} [dest] Destination vector\n     * @return {Array(Number)} dest if specified, v otherwise\n     */\n    negateVec4(v, dest) {\n        if (!dest) {\n            dest = v;\n        }\n        dest[0] = -v[0];\n        dest[1] = -v[1];\n        dest[2] = -v[2];\n        dest[3] = -v[3];\n        return dest;\n    },\n\n    /**\n     * Adds one four-element vector to another.\n     * @method addVec4\n     * @static\n     * @param {Array(Number)} u First vector\n     * @param {Array(Number)} v Second vector\n     * @param  {Array(Number)} [dest] Destination vector\n     * @return {Array(Number)} dest if specified, u otherwise\n     */\n    addVec4(u, v, dest) {\n        if (!dest) {\n            dest = u;\n        }\n        dest[0] = u[0] + v[0];\n        dest[1] = u[1] + v[1];\n        dest[2] = u[2] + v[2];\n        dest[3] = u[3] + v[3];\n        return dest;\n    },\n\n    /**\n     * Adds a scalar value to each element of a four-element vector.\n     * @method addVec4Scalar\n     * @static\n     * @param {Array(Number)} v The vector\n     * @param {Number} s The scalar\n     * @param  {Array(Number)} [dest] Destination vector\n     * @return {Array(Number)} dest if specified, v otherwise\n     */\n    addVec4Scalar(v, s, dest) {\n        if (!dest) {\n            dest = v;\n        }\n        dest[0] = v[0] + s;\n        dest[1] = v[1] + s;\n        dest[2] = v[2] + s;\n        dest[3] = v[3] + s;\n        return dest;\n    },\n\n    /**\n     * Adds one three-element vector to another.\n     * @method addVec3\n     * @static\n     * @param {Array(Number)} u First vector\n     * @param {Array(Number)} v Second vector\n     * @param  {Array(Number)} [dest] Destination vector\n     * @return {Array(Number)} dest if specified, u otherwise\n     */\n    addVec3(u, v, dest) {\n        if (!dest) {\n            dest = u;\n        }\n        dest[0] = u[0] + v[0];\n        dest[1] = u[1] + v[1];\n        dest[2] = u[2] + v[2];\n        return dest;\n    },\n\n    /**\n     * Adds a scalar value to each element of a three-element vector.\n     * @method addVec4Scalar\n     * @static\n     * @param {Array(Number)} v The vector\n     * @param {Number} s The scalar\n     * @param  {Array(Number)} [dest] Destination vector\n     * @return {Array(Number)} dest if specified, v otherwise\n     */\n    addVec3Scalar(v, s, dest) {\n        if (!dest) {\n            dest = v;\n        }\n        dest[0] = v[0] + s;\n        dest[1] = v[1] + s;\n        dest[2] = v[2] + s;\n        return dest;\n    },\n\n    /**\n     * Subtracts one four-element vector from another.\n     * @method subVec4\n     * @static\n     * @param {Array(Number)} u First vector\n     * @param {Array(Number)} v Vector to subtract\n     * @param  {Array(Number)} [dest] Destination vector\n     * @return {Array(Number)} dest if specified, u otherwise\n     */\n    subVec4(u, v, dest) {\n        if (!dest) {\n            dest = u;\n        }\n        dest[0] = u[0] - v[0];\n        dest[1] = u[1] - v[1];\n        dest[2] = u[2] - v[2];\n        dest[3] = u[3] - v[3];\n        return dest;\n    },\n\n    /**\n     * Subtracts one three-element vector from another.\n     * @method subVec3\n     * @static\n     * @param {Array(Number)} u First vector\n     * @param {Array(Number)} v Vector to subtract\n     * @param  {Array(Number)} [dest] Destination vector\n     * @return {Array(Number)} dest if specified, u otherwise\n     */\n    subVec3(u, v, dest) {\n        if (!dest) {\n            dest = u;\n        }\n        dest[0] = u[0] - v[0];\n        dest[1] = u[1] - v[1];\n        dest[2] = u[2] - v[2];\n        return dest;\n    },\n\n    /**\n     * Subtracts one two-element vector from another.\n     * @method subVec2\n     * @static\n     * @param {Array(Number)} u First vector\n     * @param {Array(Number)} v Vector to subtract\n     * @param  {Array(Number)} [dest] Destination vector\n     * @return {Array(Number)} dest if specified, u otherwise\n     */\n    subVec2(u, v, dest) {\n        if (!dest) {\n            dest = u;\n        }\n        dest[0] = u[0] - v[0];\n        dest[1] = u[1] - v[1];\n        return dest;\n    },\n\n    /**\n     * Subtracts a scalar value from each element of a four-element vector.\n     * @method subVec4Scalar\n     * @static\n     * @param {Array(Number)} v The vector\n     * @param {Number} s The scalar\n     * @param  {Array(Number)} [dest] Destination vector\n     * @return {Array(Number)} dest if specified, v otherwise\n     */\n    subVec4Scalar(v, s, dest) {\n        if (!dest) {\n            dest = v;\n        }\n        dest[0] = v[0] - s;\n        dest[1] = v[1] - s;\n        dest[2] = v[2] - s;\n        dest[3] = v[3] - s;\n        return dest;\n    },\n\n    /**\n     * Sets each element of a 4-element vector to a scalar value minus the value of that element.\n     * @method subScalarVec4\n     * @static\n     * @param {Array(Number)} v The vector\n     * @param {Number} s The scalar\n     * @param  {Array(Number)} [dest] Destination vector\n     * @return {Array(Number)} dest if specified, v otherwise\n     */\n    subScalarVec4(v, s, dest) {\n        if (!dest) {\n            dest = v;\n        }\n        dest[0] = s - v[0];\n        dest[1] = s - v[1];\n        dest[2] = s - v[2];\n        dest[3] = s - v[3];\n        return dest;\n    },\n\n    /**\n     * Multiplies one three-element vector by another.\n     * @method mulVec3\n     * @static\n     * @param {Array(Number)} u First vector\n     * @param {Array(Number)} v Second vector\n     * @param  {Array(Number)} [dest] Destination vector\n     * @return {Array(Number)} dest if specified, u otherwise\n     */\n    mulVec4(u, v, dest) {\n        if (!dest) {\n            dest = u;\n        }\n        dest[0] = u[0] * v[0];\n        dest[1] = u[1] * v[1];\n        dest[2] = u[2] * v[2];\n        dest[3] = u[3] * v[3];\n        return dest;\n    },\n\n    /**\n     * Multiplies each element of a four-element vector by a scalar.\n     * @method mulVec34calar\n     * @static\n     * @param {Array(Number)} v The vector\n     * @param {Number} s The scalar\n     * @param  {Array(Number)} [dest] Destination vector\n     * @return {Array(Number)} dest if specified, v otherwise\n     */\n    mulVec4Scalar(v, s, dest) {\n        if (!dest) {\n            dest = v;\n        }\n        dest[0] = v[0] * s;\n        dest[1] = v[1] * s;\n        dest[2] = v[2] * s;\n        dest[3] = v[3] * s;\n        return dest;\n    },\n\n    /**\n     * Multiplies each element of a three-element vector by a scalar.\n     * @method mulVec3Scalar\n     * @static\n     * @param {Array(Number)} v The vector\n     * @param {Number} s The scalar\n     * @param  {Array(Number)} [dest] Destination vector\n     * @return {Array(Number)} dest if specified, v otherwise\n     */\n    mulVec3Scalar(v, s, dest) {\n        if (!dest) {\n            dest = v;\n        }\n        dest[0] = v[0] * s;\n        dest[1] = v[1] * s;\n        dest[2] = v[2] * s;\n        return dest;\n    },\n\n    /**\n     * Multiplies each element of a two-element vector by a scalar.\n     * @method mulVec2Scalar\n     * @static\n     * @param {Array(Number)} v The vector\n     * @param {Number} s The scalar\n     * @param  {Array(Number)} [dest] Destination vector\n     * @return {Array(Number)} dest if specified, v otherwise\n     */\n    mulVec2Scalar(v, s, dest) {\n        if (!dest) {\n            dest = v;\n        }\n        dest[0] = v[0] * s;\n        dest[1] = v[1] * s;\n        return dest;\n    },\n\n    /**\n     * Divides one three-element vector by another.\n     * @method divVec3\n     * @static\n     * @param {Array(Number)} u First vector\n     * @param {Array(Number)} v Second vector\n     * @param  {Array(Number)} [dest] Destination vector\n     * @return {Array(Number)} dest if specified, u otherwise\n     */\n    divVec3(u, v, dest) {\n        if (!dest) {\n            dest = u;\n        }\n        dest[0] = u[0] / v[0];\n        dest[1] = u[1] / v[1];\n        dest[2] = u[2] / v[2];\n        return dest;\n    },\n\n    /**\n     * Divides one four-element vector by another.\n     * @method divVec4\n     * @static\n     * @param {Array(Number)} u First vector\n     * @param {Array(Number)} v Second vector\n     * @param  {Array(Number)} [dest] Destination vector\n     * @return {Array(Number)} dest if specified, u otherwise\n     */\n    divVec4(u, v, dest) {\n        if (!dest) {\n            dest = u;\n        }\n        dest[0] = u[0] / v[0];\n        dest[1] = u[1] / v[1];\n        dest[2] = u[2] / v[2];\n        dest[3] = u[3] / v[3];\n        return dest;\n    },\n\n    /**\n     * Divides a scalar by a three-element vector, returning a new vector.\n     * @method divScalarVec3\n     * @static\n     * @param v vec3\n     * @param s scalar\n     * @param dest vec3 - optional destination\n     * @return [] dest if specified, v otherwise\n     */\n    divScalarVec3(s, v, dest) {\n        if (!dest) {\n            dest = v;\n        }\n        dest[0] = s / v[0];\n        dest[1] = s / v[1];\n        dest[2] = s / v[2];\n        return dest;\n    },\n\n    /**\n     * Divides a three-element vector by a scalar.\n     * @method divVec3Scalar\n     * @static\n     * @param v vec3\n     * @param s scalar\n     * @param dest vec3 - optional destination\n     * @return [] dest if specified, v otherwise\n     */\n    divVec3Scalar(v, s, dest) {\n        if (!dest) {\n            dest = v;\n        }\n        dest[0] = v[0] / s;\n        dest[1] = v[1] / s;\n        dest[2] = v[2] / s;\n        return dest;\n    },\n\n    /**\n     * Divides a four-element vector by a scalar.\n     * @method divVec4Scalar\n     * @static\n     * @param v vec4\n     * @param s scalar\n     * @param dest vec4 - optional destination\n     * @return [] dest if specified, v otherwise\n     */\n    divVec4Scalar(v, s, dest) {\n        if (!dest) {\n            dest = v;\n        }\n        dest[0] = v[0] / s;\n        dest[1] = v[1] / s;\n        dest[2] = v[2] / s;\n        dest[3] = v[3] / s;\n        return dest;\n    },\n\n\n    /**\n     * Divides a scalar by a four-element vector, returning a new vector.\n     * @method divScalarVec4\n     * @static\n     * @param s scalar\n     * @param v vec4\n     * @param dest vec4 - optional destination\n     * @return [] dest if specified, v otherwise\n     */\n    divScalarVec4(s, v, dest) {\n        if (!dest) {\n            dest = v;\n        }\n        dest[0] = s / v[0];\n        dest[1] = s / v[1];\n        dest[2] = s / v[2];\n        dest[3] = s / v[3];\n        return dest;\n    },\n\n    /**\n     * Returns the dot product of two four-element vectors.\n     * @method dotVec4\n     * @static\n     * @param {Array(Number)} u First vector\n     * @param {Array(Number)} v Second vector\n     * @return The dot product\n     */\n    dotVec4(u, v) {\n        return (u[0] * v[0] + u[1] * v[1] + u[2] * v[2] + u[3] * v[3]);\n    },\n\n    /**\n     * Returns the cross product of two four-element vectors.\n     * @method cross3Vec4\n     * @static\n     * @param {Array(Number)} u First vector\n     * @param {Array(Number)} v Second vector\n     * @return The cross product\n     */\n    cross3Vec4(u, v) {\n        const u0 = u[0];\n        const u1 = u[1];\n        const u2 = u[2];\n        const v0 = v[0];\n        const v1 = v[1];\n        const v2 = v[2];\n        return [\n            u1 * v2 - u2 * v1,\n            u2 * v0 - u0 * v2,\n            u0 * v1 - u1 * v0,\n            0.0];\n    },\n\n    /**\n     * Returns the cross product of two three-element vectors.\n     * @method cross3Vec3\n     * @static\n     * @param {Array(Number)} u First vector\n     * @param {Array(Number)} v Second vector\n     * @return The cross product\n     */\n    cross3Vec3(u, v, dest) {\n        if (!dest) {\n            dest = u;\n        }\n        const x = u[0];\n        const y = u[1];\n        const z = u[2];\n        const x2 = v[0];\n        const y2 = v[1];\n        const z2 = v[2];\n        dest[0] = y * z2 - z * y2;\n        dest[1] = z * x2 - x * z2;\n        dest[2] = x * y2 - y * x2;\n        return dest;\n    },\n\n\n    sqLenVec4(v) { // TODO\n        return math.dotVec4(v, v);\n    },\n\n    /**\n     * Returns the length of a four-element vector.\n     * @method lenVec4\n     * @static\n     * @param {Array(Number)} v The vector\n     * @return The length\n     */\n    lenVec4(v) {\n        return Math.sqrt(math.sqLenVec4(v));\n    },\n\n    /**\n     * Returns the dot product of two three-element vectors.\n     * @method dotVec3\n     * @static\n     * @param {Array(Number)} u First vector\n     * @param {Array(Number)} v Second vector\n     * @return The dot product\n     */\n    dotVec3(u, v) {\n        return (u[0] * v[0] + u[1] * v[1] + u[2] * v[2]);\n    },\n\n    /**\n     * Returns the dot product of two two-element vectors.\n     * @method dotVec4\n     * @static\n     * @param {Array(Number)} u First vector\n     * @param {Array(Number)} v Second vector\n     * @return The dot product\n     */\n    dotVec2(u, v) {\n        return (u[0] * v[0] + u[1] * v[1]);\n    },\n\n\n    sqLenVec3(v) {\n        return math.dotVec3(v, v);\n    },\n\n\n    sqLenVec2(v) {\n        return math.dotVec2(v, v);\n    },\n\n    /**\n     * Returns the length of a three-element vector.\n     * @method lenVec3\n     * @static\n     * @param {Array(Number)} v The vector\n     * @return The length\n     */\n    lenVec3(v) {\n        return Math.sqrt(math.sqLenVec3(v));\n    },\n\n    distVec3: ((() => {\n        const vec = new FloatArrayType(3);\n        return (v, w) => math.lenVec3(math.subVec3(v, w, vec));\n    }))(),\n\n    /**\n     * Returns the length of a two-element vector.\n     * @method lenVec2\n     * @static\n     * @param {Array(Number)} v The vector\n     * @return The length\n     */\n    lenVec2(v) {\n        return Math.sqrt(math.sqLenVec2(v));\n    },\n\n    distVec2: ((() => {\n        const vec = new FloatArrayType(2);\n        return (v, w) => math.lenVec2(math.subVec2(v, w, vec));\n    }))(),\n\n    /**\n     * @method rcpVec3\n     * @static\n     * @param v vec3\n     * @param dest vec3 - optional destination\n     * @return [] dest if specified, v otherwise\n     *\n     */\n    rcpVec3(v, dest) {\n        return math.divScalarVec3(1.0, v, dest);\n    },\n\n    /**\n     * Normalizes a four-element vector\n     * @method normalizeVec4\n     * @static\n     * @param v vec4\n     * @param dest vec4 - optional destination\n     * @return [] dest if specified, v otherwise\n     *\n     */\n    normalizeVec4(v, dest) {\n        const f = 1.0 / math.lenVec4(v);\n        return math.mulVec4Scalar(v, f, dest);\n    },\n\n    /**\n     * Normalizes a three-element vector\n     * @method normalizeVec4\n     * @static\n     */\n    normalizeVec3(v, dest) {\n        const f = 1.0 / math.lenVec3(v);\n        return math.mulVec3Scalar(v, f, dest);\n    },\n\n    /**\n     * Normalizes a two-element vector\n     * @method normalizeVec2\n     * @static\n     */\n    normalizeVec2(v, dest) {\n        const f = 1.0 / math.lenVec2(v);\n        return math.mulVec2Scalar(v, f, dest);\n    },\n\n    /**\n     * Gets the angle between two vectors\n     * @method angleVec3\n     * @param v\n     * @param w\n     * @returns {number}\n     */\n    angleVec3(v, w) {\n        let theta = math.dotVec3(v, w) / (Math.sqrt(math.sqLenVec3(v) * math.sqLenVec3(w)));\n        theta = theta < -1 ? -1 : (theta > 1 ? 1 : theta);  // Clamp to handle numerical problems\n        return Math.acos(theta);\n    },\n\n    /**\n     * Creates a three-element vector from the rotation part of a sixteen-element matrix.\n     * @param m\n     * @param dest\n     */\n    vec3FromMat4Scale: ((() => {\n\n        const tempVec3 = new FloatArrayType(3);\n\n        return (m, dest) => {\n\n            tempVec3[0] = m[0];\n            tempVec3[1] = m[1];\n            tempVec3[2] = m[2];\n\n            dest[0] = math.lenVec3(tempVec3);\n\n            tempVec3[0] = m[4];\n            tempVec3[1] = m[5];\n            tempVec3[2] = m[6];\n\n            dest[1] = math.lenVec3(tempVec3);\n\n            tempVec3[0] = m[8];\n            tempVec3[1] = m[9];\n            tempVec3[2] = m[10];\n\n            dest[2] = math.lenVec3(tempVec3);\n\n            return dest;\n        };\n    }))(),\n\n    /**\n     * Converts an n-element vector to a JSON-serializable\n     * array with values rounded to two decimal places.\n     */\n    vecToArray: ((() => {\n        function trunc(v) {\n            return Math.round(v * 100000) / 100000\n        }\n\n        return v => {\n            v = Array.prototype.slice.call(v);\n            for (let i = 0, len = v.length; i < len; i++) {\n                v[i] = trunc(v[i]);\n            }\n            return v;\n        };\n    }))(),\n\n    /**\n     * Converts a 3-element vector from an array to an object of the form ````{x:999, y:999, z:999}````.\n     * @param arr\n     * @returns {{x: *, y: *, z: *}}\n     */\n    xyzArrayToObject(arr) {\n        return {\"x\": arr[0], \"y\": arr[1], \"z\": arr[2]};\n    },\n\n    /**\n     * Converts a 3-element vector object of the form ````{x:999, y:999, z:999}```` to an array.\n     * @param xyz\n     * @param  [arry]\n     * @returns {*[]}\n     */\n    xyzObjectToArray(xyz, arry) {\n        arry = arry || new FloatArrayType(3);\n        arry[0] = xyz.x;\n        arry[1] = xyz.y;\n        arry[2] = xyz.z;\n        return arry;\n    },\n\n    /**\n     * Duplicates a 4x4 identity matrix.\n     * @method dupMat4\n     * @static\n     */\n    dupMat4(m) {\n        return m.slice(0, 16);\n    },\n\n    /**\n     * Extracts a 3x3 matrix from a 4x4 matrix.\n     * @method mat4To3\n     * @static\n     */\n    mat4To3(m) {\n        return [\n            m[0], m[1], m[2],\n            m[4], m[5], m[6],\n            m[8], m[9], m[10]\n        ];\n    },\n\n    /**\n     * Returns a 4x4 matrix with each element set to the given scalar value.\n     * @method m4s\n     * @static\n     */\n    m4s(s) {\n        return [\n            s, s, s, s,\n            s, s, s, s,\n            s, s, s, s,\n            s, s, s, s\n        ];\n    },\n\n    /**\n     * Returns a 4x4 matrix with each element set to zero.\n     * @method setMat4ToZeroes\n     * @static\n     */\n    setMat4ToZeroes() {\n        return math.m4s(0.0);\n    },\n\n    /**\n     * Returns a 4x4 matrix with each element set to 1.0.\n     * @method setMat4ToOnes\n     * @static\n     */\n    setMat4ToOnes() {\n        return math.m4s(1.0);\n    },\n\n    /**\n     * Returns a 4x4 matrix with each element set to 1.0.\n     * @method setMat4ToOnes\n     * @static\n     */\n    diagonalMat4v(v) {\n        return new FloatArrayType([\n            v[0], 0.0, 0.0, 0.0,\n            0.0, v[1], 0.0, 0.0,\n            0.0, 0.0, v[2], 0.0,\n            0.0, 0.0, 0.0, v[3]\n        ]);\n    },\n\n    /**\n     * Returns a 4x4 matrix with diagonal elements set to the given vector.\n     * @method diagonalMat4c\n     * @static\n     */\n    diagonalMat4c(x, y, z, w) {\n        return math.diagonalMat4v([x, y, z, w]);\n    },\n\n    /**\n     * Returns a 4x4 matrix with diagonal elements set to the given scalar.\n     * @method diagonalMat4s\n     * @static\n     */\n    diagonalMat4s(s) {\n        return math.diagonalMat4c(s, s, s, s);\n    },\n\n    /**\n     * Returns a 4x4 identity matrix.\n     * @method identityMat4\n     * @static\n     */\n    identityMat4(mat = new FloatArrayType(16)) {\n        mat[0] = 1.0;\n        mat[1] = 0.0;\n        mat[2] = 0.0;\n        mat[3] = 0.0;\n\n        mat[4] = 0.0;\n        mat[5] = 1.0;\n        mat[6] = 0.0;\n        mat[7] = 0.0;\n\n        mat[8] = 0.0;\n        mat[9] = 0.0;\n        mat[10] = 1.0;\n        mat[11] = 0.0;\n\n        mat[12] = 0.0;\n        mat[13] = 0.0;\n        mat[14] = 0.0;\n        mat[15] = 1.0;\n\n        return mat;\n    },\n\n    /**\n     * Returns a 3x3 identity matrix.\n     * @method identityMat3\n     * @static\n     */\n    identityMat3(mat = new FloatArrayType(9)) {\n        mat[0] = 1.0;\n        mat[1] = 0.0;\n        mat[2] = 0.0;\n\n        mat[3] = 0.0;\n        mat[4] = 1.0;\n        mat[5] = 0.0;\n\n        mat[6] = 0.0;\n        mat[7] = 0.0;\n        mat[8] = 1.0;\n\n        return mat;\n    },\n\n    /**\n     * Tests if the given 4x4 matrix is the identity matrix.\n     * @method isIdentityMat4\n     * @static\n     */\n    isIdentityMat4(m) {\n        if (m[0] !== 1.0 || m[1] !== 0.0 || m[2] !== 0.0 || m[3] !== 0.0 ||\n            m[4] !== 0.0 || m[5] !== 1.0 || m[6] !== 0.0 || m[7] !== 0.0 ||\n            m[8] !== 0.0 || m[9] !== 0.0 || m[10] !== 1.0 || m[11] !== 0.0 ||\n            m[12] !== 0.0 || m[13] !== 0.0 || m[14] !== 0.0 || m[15] !== 1.0) {\n            return false;\n        }\n        return true;\n    },\n\n    /**\n     * Negates the given 4x4 matrix.\n     * @method negateMat4\n     * @static\n     */\n    negateMat4(m, dest) {\n        if (!dest) {\n            dest = m;\n        }\n        dest[0] = -m[0];\n        dest[1] = -m[1];\n        dest[2] = -m[2];\n        dest[3] = -m[3];\n        dest[4] = -m[4];\n        dest[5] = -m[5];\n        dest[6] = -m[6];\n        dest[7] = -m[7];\n        dest[8] = -m[8];\n        dest[9] = -m[9];\n        dest[10] = -m[10];\n        dest[11] = -m[11];\n        dest[12] = -m[12];\n        dest[13] = -m[13];\n        dest[14] = -m[14];\n        dest[15] = -m[15];\n        return dest;\n    },\n\n    /**\n     * Adds the given 4x4 matrices together.\n     * @method addMat4\n     * @static\n     */\n    addMat4(a, b, dest) {\n        if (!dest) {\n            dest = a;\n        }\n        dest[0] = a[0] + b[0];\n        dest[1] = a[1] + b[1];\n        dest[2] = a[2] + b[2];\n        dest[3] = a[3] + b[3];\n        dest[4] = a[4] + b[4];\n        dest[5] = a[5] + b[5];\n        dest[6] = a[6] + b[6];\n        dest[7] = a[7] + b[7];\n        dest[8] = a[8] + b[8];\n        dest[9] = a[9] + b[9];\n        dest[10] = a[10] + b[10];\n        dest[11] = a[11] + b[11];\n        dest[12] = a[12] + b[12];\n        dest[13] = a[13] + b[13];\n        dest[14] = a[14] + b[14];\n        dest[15] = a[15] + b[15];\n        return dest;\n    },\n\n    /**\n     * Adds the given scalar to each element of the given 4x4 matrix.\n     * @method addMat4Scalar\n     * @static\n     */\n    addMat4Scalar(m, s, dest) {\n        if (!dest) {\n            dest = m;\n        }\n        dest[0] = m[0] + s;\n        dest[1] = m[1] + s;\n        dest[2] = m[2] + s;\n        dest[3] = m[3] + s;\n        dest[4] = m[4] + s;\n        dest[5] = m[5] + s;\n        dest[6] = m[6] + s;\n        dest[7] = m[7] + s;\n        dest[8] = m[8] + s;\n        dest[9] = m[9] + s;\n        dest[10] = m[10] + s;\n        dest[11] = m[11] + s;\n        dest[12] = m[12] + s;\n        dest[13] = m[13] + s;\n        dest[14] = m[14] + s;\n        dest[15] = m[15] + s;\n        return dest;\n    },\n\n    /**\n     * Adds the given scalar to each element of the given 4x4 matrix.\n     * @method addScalarMat4\n     * @static\n     */\n    addScalarMat4(s, m, dest) {\n        return math.addMat4Scalar(m, s, dest);\n    },\n\n    /**\n     * Subtracts the second 4x4 matrix from the first.\n     * @method subMat4\n     * @static\n     */\n    subMat4(a, b, dest) {\n        if (!dest) {\n            dest = a;\n        }\n        dest[0] = a[0] - b[0];\n        dest[1] = a[1] - b[1];\n        dest[2] = a[2] - b[2];\n        dest[3] = a[3] - b[3];\n        dest[4] = a[4] - b[4];\n        dest[5] = a[5] - b[5];\n        dest[6] = a[6] - b[6];\n        dest[7] = a[7] - b[7];\n        dest[8] = a[8] - b[8];\n        dest[9] = a[9] - b[9];\n        dest[10] = a[10] - b[10];\n        dest[11] = a[11] - b[11];\n        dest[12] = a[12] - b[12];\n        dest[13] = a[13] - b[13];\n        dest[14] = a[14] - b[14];\n        dest[15] = a[15] - b[15];\n        return dest;\n    },\n\n    /**\n     * Subtracts the given scalar from each element of the given 4x4 matrix.\n     * @method subMat4Scalar\n     * @static\n     */\n    subMat4Scalar(m, s, dest) {\n        if (!dest) {\n            dest = m;\n        }\n        dest[0] = m[0] - s;\n        dest[1] = m[1] - s;\n        dest[2] = m[2] - s;\n        dest[3] = m[3] - s;\n        dest[4] = m[4] - s;\n        dest[5] = m[5] - s;\n        dest[6] = m[6] - s;\n        dest[7] = m[7] - s;\n        dest[8] = m[8] - s;\n        dest[9] = m[9] - s;\n        dest[10] = m[10] - s;\n        dest[11] = m[11] - s;\n        dest[12] = m[12] - s;\n        dest[13] = m[13] - s;\n        dest[14] = m[14] - s;\n        dest[15] = m[15] - s;\n        return dest;\n    },\n\n    /**\n     * Subtracts the given scalar from each element of the given 4x4 matrix.\n     * @method subScalarMat4\n     * @static\n     */\n    subScalarMat4(s, m, dest) {\n        if (!dest) {\n            dest = m;\n        }\n        dest[0] = s - m[0];\n        dest[1] = s - m[1];\n        dest[2] = s - m[2];\n        dest[3] = s - m[3];\n        dest[4] = s - m[4];\n        dest[5] = s - m[5];\n        dest[6] = s - m[6];\n        dest[7] = s - m[7];\n        dest[8] = s - m[8];\n        dest[9] = s - m[9];\n        dest[10] = s - m[10];\n        dest[11] = s - m[11];\n        dest[12] = s - m[12];\n        dest[13] = s - m[13];\n        dest[14] = s - m[14];\n        dest[15] = s - m[15];\n        return dest;\n    },\n\n    /**\n     * Multiplies the two given 4x4 matrix by each other.\n     * @method mulMat4\n     * @static\n     */\n    mulMat4(a, b, dest) {\n        if (!dest) {\n            dest = a;\n        }\n\n        // Cache the matrix values (makes for huge speed increases!)\n        const a00 = a[0];\n\n        const a01 = a[1];\n        const a02 = a[2];\n        const a03 = a[3];\n        const a10 = a[4];\n        const a11 = a[5];\n        const a12 = a[6];\n        const a13 = a[7];\n        const a20 = a[8];\n        const a21 = a[9];\n        const a22 = a[10];\n        const a23 = a[11];\n        const a30 = a[12];\n        const a31 = a[13];\n        const a32 = a[14];\n        const a33 = a[15];\n        const b00 = b[0];\n        const b01 = b[1];\n        const b02 = b[2];\n        const b03 = b[3];\n        const b10 = b[4];\n        const b11 = b[5];\n        const b12 = b[6];\n        const b13 = b[7];\n        const b20 = b[8];\n        const b21 = b[9];\n        const b22 = b[10];\n        const b23 = b[11];\n        const b30 = b[12];\n        const b31 = b[13];\n        const b32 = b[14];\n        const b33 = b[15];\n\n        dest[0] = b00 * a00 + b01 * a10 + b02 * a20 + b03 * a30;\n        dest[1] = b00 * a01 + b01 * a11 + b02 * a21 + b03 * a31;\n        dest[2] = b00 * a02 + b01 * a12 + b02 * a22 + b03 * a32;\n        dest[3] = b00 * a03 + b01 * a13 + b02 * a23 + b03 * a33;\n        dest[4] = b10 * a00 + b11 * a10 + b12 * a20 + b13 * a30;\n        dest[5] = b10 * a01 + b11 * a11 + b12 * a21 + b13 * a31;\n        dest[6] = b10 * a02 + b11 * a12 + b12 * a22 + b13 * a32;\n        dest[7] = b10 * a03 + b11 * a13 + b12 * a23 + b13 * a33;\n        dest[8] = b20 * a00 + b21 * a10 + b22 * a20 + b23 * a30;\n        dest[9] = b20 * a01 + b21 * a11 + b22 * a21 + b23 * a31;\n        dest[10] = b20 * a02 + b21 * a12 + b22 * a22 + b23 * a32;\n        dest[11] = b20 * a03 + b21 * a13 + b22 * a23 + b23 * a33;\n        dest[12] = b30 * a00 + b31 * a10 + b32 * a20 + b33 * a30;\n        dest[13] = b30 * a01 + b31 * a11 + b32 * a21 + b33 * a31;\n        dest[14] = b30 * a02 + b31 * a12 + b32 * a22 + b33 * a32;\n        dest[15] = b30 * a03 + b31 * a13 + b32 * a23 + b33 * a33;\n\n        return dest;\n    },\n\n    /**\n     * Multiplies the two given 3x3 matrices by each other.\n     * @method mulMat4\n     * @static\n     */\n    mulMat3(a, b, dest) {\n        if (!dest) {\n            dest = new FloatArrayType(9);\n        }\n\n        const a11 = a[0];\n        const a12 = a[3];\n        const a13 = a[6];\n        const a21 = a[1];\n        const a22 = a[4];\n        const a23 = a[7];\n        const a31 = a[2];\n        const a32 = a[5];\n        const a33 = a[8];\n        const b11 = b[0];\n        const b12 = b[3];\n        const b13 = b[6];\n        const b21 = b[1];\n        const b22 = b[4];\n        const b23 = b[7];\n        const b31 = b[2];\n        const b32 = b[5];\n        const b33 = b[8];\n\n        dest[0] = a11 * b11 + a12 * b21 + a13 * b31;\n        dest[3] = a11 * b12 + a12 * b22 + a13 * b32;\n        dest[6] = a11 * b13 + a12 * b23 + a13 * b33;\n\n        dest[1] = a21 * b11 + a22 * b21 + a23 * b31;\n        dest[4] = a21 * b12 + a22 * b22 + a23 * b32;\n        dest[7] = a21 * b13 + a22 * b23 + a23 * b33;\n\n        dest[2] = a31 * b11 + a32 * b21 + a33 * b31;\n        dest[5] = a31 * b12 + a32 * b22 + a33 * b32;\n        dest[8] = a31 * b13 + a32 * b23 + a33 * b33;\n\n        return dest;\n    },\n\n    /**\n     * Multiplies each element of the given 4x4 matrix by the given scalar.\n     * @method mulMat4Scalar\n     * @static\n     */\n    mulMat4Scalar(m, s, dest) {\n        if (!dest) {\n            dest = m;\n        }\n        dest[0] = m[0] * s;\n        dest[1] = m[1] * s;\n        dest[2] = m[2] * s;\n        dest[3] = m[3] * s;\n        dest[4] = m[4] * s;\n        dest[5] = m[5] * s;\n        dest[6] = m[6] * s;\n        dest[7] = m[7] * s;\n        dest[8] = m[8] * s;\n        dest[9] = m[9] * s;\n        dest[10] = m[10] * s;\n        dest[11] = m[11] * s;\n        dest[12] = m[12] * s;\n        dest[13] = m[13] * s;\n        dest[14] = m[14] * s;\n        dest[15] = m[15] * s;\n        return dest;\n    },\n\n    /**\n     * Multiplies the given 4x4 matrix by the given four-element vector.\n     * @method mulMat4v4\n     * @static\n     */\n    mulMat4v4(m, v, dest = math.vec4()) {\n        const v0 = v[0];\n        const v1 = v[1];\n        const v2 = v[2];\n        const v3 = v[3];\n        dest[0] = m[0] * v0 + m[4] * v1 + m[8] * v2 + m[12] * v3;\n        dest[1] = m[1] * v0 + m[5] * v1 + m[9] * v2 + m[13] * v3;\n        dest[2] = m[2] * v0 + m[6] * v1 + m[10] * v2 + m[14] * v3;\n        dest[3] = m[3] * v0 + m[7] * v1 + m[11] * v2 + m[15] * v3;\n        return dest;\n    },\n\n    /**\n     * Transposes the given 4x4 matrix.\n     * @method transposeMat4\n     * @static\n     */\n    transposeMat4(mat, dest) {\n        // If we are transposing ourselves we can skip a few steps but have to cache some values\n        const m4 = mat[4];\n\n        const m14 = mat[14];\n        const m8 = mat[8];\n        const m13 = mat[13];\n        const m12 = mat[12];\n        const m9 = mat[9];\n        if (!dest || mat === dest) {\n            const a01 = mat[1];\n            const a02 = mat[2];\n            const a03 = mat[3];\n            const a12 = mat[6];\n            const a13 = mat[7];\n            const a23 = mat[11];\n            mat[1] = m4;\n            mat[2] = m8;\n            mat[3] = m12;\n            mat[4] = a01;\n            mat[6] = m9;\n            mat[7] = m13;\n            mat[8] = a02;\n            mat[9] = a12;\n            mat[11] = m14;\n            mat[12] = a03;\n            mat[13] = a13;\n            mat[14] = a23;\n            return mat;\n        }\n        dest[0] = mat[0];\n        dest[1] = m4;\n        dest[2] = m8;\n        dest[3] = m12;\n        dest[4] = mat[1];\n        dest[5] = mat[5];\n        dest[6] = m9;\n        dest[7] = m13;\n        dest[8] = mat[2];\n        dest[9] = mat[6];\n        dest[10] = mat[10];\n        dest[11] = m14;\n        dest[12] = mat[3];\n        dest[13] = mat[7];\n        dest[14] = mat[11];\n        dest[15] = mat[15];\n        return dest;\n    },\n\n    /**\n     * Transposes the given 3x3 matrix.\n     *\n     * @method transposeMat3\n     * @static\n     */\n    transposeMat3(mat, dest) {\n        if (dest === mat) {\n            const a01 = mat[1];\n            const a02 = mat[2];\n            const a12 = mat[5];\n            dest[1] = mat[3];\n            dest[2] = mat[6];\n            dest[3] = a01;\n            dest[5] = mat[7];\n            dest[6] = a02;\n            dest[7] = a12;\n        } else {\n            dest[0] = mat[0];\n            dest[1] = mat[3];\n            dest[2] = mat[6];\n            dest[3] = mat[1];\n            dest[4] = mat[4];\n            dest[5] = mat[7];\n            dest[6] = mat[2];\n            dest[7] = mat[5];\n            dest[8] = mat[8];\n        }\n        return dest;\n    },\n\n    /**\n     * Returns the determinant of the given 4x4 matrix.\n     * @method determinantMat4\n     * @static\n     */\n    determinantMat4(mat) {\n        // Cache the matrix values (makes for huge speed increases!)\n        const a00 = mat[0];\n\n        const a01 = mat[1];\n        const a02 = mat[2];\n        const a03 = mat[3];\n        const a10 = mat[4];\n        const a11 = mat[5];\n        const a12 = mat[6];\n        const a13 = mat[7];\n        const a20 = mat[8];\n        const a21 = mat[9];\n        const a22 = mat[10];\n        const a23 = mat[11];\n        const a30 = mat[12];\n        const a31 = mat[13];\n        const a32 = mat[14];\n        const a33 = mat[15];\n        return a30 * a21 * a12 * a03 - a20 * a31 * a12 * a03 - a30 * a11 * a22 * a03 + a10 * a31 * a22 * a03 +\n            a20 * a11 * a32 * a03 - a10 * a21 * a32 * a03 - a30 * a21 * a02 * a13 + a20 * a31 * a02 * a13 +\n            a30 * a01 * a22 * a13 - a00 * a31 * a22 * a13 - a20 * a01 * a32 * a13 + a00 * a21 * a32 * a13 +\n            a30 * a11 * a02 * a23 - a10 * a31 * a02 * a23 - a30 * a01 * a12 * a23 + a00 * a31 * a12 * a23 +\n            a10 * a01 * a32 * a23 - a00 * a11 * a32 * a23 - a20 * a11 * a02 * a33 + a10 * a21 * a02 * a33 +\n            a20 * a01 * a12 * a33 - a00 * a21 * a12 * a33 - a10 * a01 * a22 * a33 + a00 * a11 * a22 * a33;\n    },\n\n    /**\n     * Returns the inverse of the given 4x4 matrix.\n     * @method inverseMat4\n     * @static\n     */\n    inverseMat4(mat, dest) {\n        if (!dest) {\n            dest = mat;\n        }\n\n        // Cache the matrix values (makes for huge speed increases!)\n        const a00 = mat[0];\n\n        const a01 = mat[1];\n        const a02 = mat[2];\n        const a03 = mat[3];\n        const a10 = mat[4];\n        const a11 = mat[5];\n        const a12 = mat[6];\n        const a13 = mat[7];\n        const a20 = mat[8];\n        const a21 = mat[9];\n        const a22 = mat[10];\n        const a23 = mat[11];\n        const a30 = mat[12];\n        const a31 = mat[13];\n        const a32 = mat[14];\n        const a33 = mat[15];\n        const b00 = a00 * a11 - a01 * a10;\n        const b01 = a00 * a12 - a02 * a10;\n        const b02 = a00 * a13 - a03 * a10;\n        const b03 = a01 * a12 - a02 * a11;\n        const b04 = a01 * a13 - a03 * a11;\n        const b05 = a02 * a13 - a03 * a12;\n        const b06 = a20 * a31 - a21 * a30;\n        const b07 = a20 * a32 - a22 * a30;\n        const b08 = a20 * a33 - a23 * a30;\n        const b09 = a21 * a32 - a22 * a31;\n        const b10 = a21 * a33 - a23 * a31;\n        const b11 = a22 * a33 - a23 * a32;\n\n        // Calculate the determinant (inlined to avoid double-caching)\n        const invDet = 1 / (b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06);\n\n        dest[0] = (a11 * b11 - a12 * b10 + a13 * b09) * invDet;\n        dest[1] = (-a01 * b11 + a02 * b10 - a03 * b09) * invDet;\n        dest[2] = (a31 * b05 - a32 * b04 + a33 * b03) * invDet;\n        dest[3] = (-a21 * b05 + a22 * b04 - a23 * b03) * invDet;\n        dest[4] = (-a10 * b11 + a12 * b08 - a13 * b07) * invDet;\n        dest[5] = (a00 * b11 - a02 * b08 + a03 * b07) * invDet;\n        dest[6] = (-a30 * b05 + a32 * b02 - a33 * b01) * invDet;\n        dest[7] = (a20 * b05 - a22 * b02 + a23 * b01) * invDet;\n        dest[8] = (a10 * b10 - a11 * b08 + a13 * b06) * invDet;\n        dest[9] = (-a00 * b10 + a01 * b08 - a03 * b06) * invDet;\n        dest[10] = (a30 * b04 - a31 * b02 + a33 * b00) * invDet;\n        dest[11] = (-a20 * b04 + a21 * b02 - a23 * b00) * invDet;\n        dest[12] = (-a10 * b09 + a11 * b07 - a12 * b06) * invDet;\n        dest[13] = (a00 * b09 - a01 * b07 + a02 * b06) * invDet;\n        dest[14] = (-a30 * b03 + a31 * b01 - a32 * b00) * invDet;\n        dest[15] = (a20 * b03 - a21 * b01 + a22 * b00) * invDet;\n\n        return dest;\n    },\n\n    /**\n     * Returns the trace of the given 4x4 matrix.\n     * @method traceMat4\n     * @static\n     */\n    traceMat4(m) {\n        return (m[0] + m[5] + m[10] + m[15]);\n    },\n\n    /**\n     * Returns 4x4 translation matrix.\n     * @method translationMat4\n     * @static\n     */\n    translationMat4v(v, dest) {\n        const m = dest || math.identityMat4();\n        m[12] = v[0];\n        m[13] = v[1];\n        m[14] = v[2];\n        return m;\n    },\n\n    /**\n     * Returns 3x3 translation matrix.\n     * @method translationMat3\n     * @static\n     */\n    translationMat3v(v, dest) {\n        const m = dest || math.identityMat3();\n        m[6] = v[0];\n        m[7] = v[1];\n        return m;\n    },\n\n    /**\n     * Returns 4x4 translation matrix.\n     * @method translationMat4c\n     * @static\n     */\n    translationMat4c: ((() => {\n        const xyz = new FloatArrayType(3);\n        return (x, y, z, dest) => {\n            xyz[0] = x;\n            xyz[1] = y;\n            xyz[2] = z;\n            return math.translationMat4v(xyz, dest);\n        };\n    }))(),\n\n    /**\n     * Returns 4x4 translation matrix.\n     * @method translationMat4s\n     * @static\n     */\n    translationMat4s(s, dest) {\n        return math.translationMat4c(s, s, s, dest);\n    },\n\n    /**\n     * Efficiently post-concatenates a translation to the given matrix.\n     * @param v\n     * @param m\n     */\n    translateMat4v(xyz, m) {\n        return math.translateMat4c(xyz[0], xyz[1], xyz[2], m);\n    },\n\n    /**\n     * Efficiently post-concatenates a translation to the given matrix.\n     * @param x\n     * @param y\n     * @param z\n     * @param m\n     */\n    OLDtranslateMat4c(x, y, z, m) {\n\n        const m12 = m[12];\n        m[0] += m12 * x;\n        m[4] += m12 * y;\n        m[8] += m12 * z;\n\n        const m13 = m[13];\n        m[1] += m13 * x;\n        m[5] += m13 * y;\n        m[9] += m13 * z;\n\n        const m14 = m[14];\n        m[2] += m14 * x;\n        m[6] += m14 * y;\n        m[10] += m14 * z;\n\n        const m15 = m[15];\n        m[3] += m15 * x;\n        m[7] += m15 * y;\n        m[11] += m15 * z;\n\n        return m;\n    },\n\n    translateMat4c(x, y, z, m) {\n\n        const m3 = m[3];\n        m[0] += m3 * x;\n        m[1] += m3 * y;\n        m[2] += m3 * z;\n\n        const m7 = m[7];\n        m[4] += m7 * x;\n        m[5] += m7 * y;\n        m[6] += m7 * z;\n\n        const m11 = m[11];\n        m[8] += m11 * x;\n        m[9] += m11 * y;\n        m[10] += m11 * z;\n\n        const m15 = m[15];\n        m[12] += m15 * x;\n        m[13] += m15 * y;\n        m[14] += m15 * z;\n\n        return m;\n    },\n    /**\n     * Returns 4x4 rotation matrix.\n     * @method rotationMat4v\n     * @static\n     */\n    rotationMat4v(anglerad, axis, m) {\n        const ax = math.normalizeVec4([axis[0], axis[1], axis[2], 0.0], []);\n        const s = Math.sin(anglerad);\n        const c = Math.cos(anglerad);\n        const q = 1.0 - c;\n\n        const x = ax[0];\n        const y = ax[1];\n        const z = ax[2];\n\n        let xy;\n        let yz;\n        let zx;\n        let xs;\n        let ys;\n        let zs;\n\n        //xx = x * x; used once\n        //yy = y * y; used once\n        //zz = z * z; used once\n        xy = x * y;\n        yz = y * z;\n        zx = z * x;\n        xs = x * s;\n        ys = y * s;\n        zs = z * s;\n\n        m = m || math.mat4();\n\n        m[0] = (q * x * x) + c;\n        m[1] = (q * xy) + zs;\n        m[2] = (q * zx) - ys;\n        m[3] = 0.0;\n\n        m[4] = (q * xy) - zs;\n        m[5] = (q * y * y) + c;\n        m[6] = (q * yz) + xs;\n        m[7] = 0.0;\n\n        m[8] = (q * zx) + ys;\n        m[9] = (q * yz) - xs;\n        m[10] = (q * z * z) + c;\n        m[11] = 0.0;\n\n        m[12] = 0.0;\n        m[13] = 0.0;\n        m[14] = 0.0;\n        m[15] = 1.0;\n\n        return m;\n    },\n\n    /**\n     * Returns 4x4 rotation matrix.\n     * @method rotationMat4c\n     * @static\n     */\n    rotationMat4c(anglerad, x, y, z, mat) {\n        return math.rotationMat4v(anglerad, [x, y, z], mat);\n    },\n\n    /**\n     * Returns 4x4 scale matrix.\n     * @method scalingMat4v\n     * @static\n     */\n    scalingMat4v(v, m = math.identityMat4()) {\n        m[0] = v[0];\n        m[5] = v[1];\n        m[10] = v[2];\n        return m;\n    },\n\n    /**\n     * Returns 3x3 scale matrix.\n     * @method scalingMat3v\n     * @static\n     */\n    scalingMat3v(v, m = math.identityMat3()) {\n        m[0] = v[0];\n        m[4] = v[1];\n        return m;\n    },\n\n    /**\n     * Returns 4x4 scale matrix.\n     * @method scalingMat4c\n     * @static\n     */\n    scalingMat4c: ((() => {\n        const xyz = new FloatArrayType(3);\n        return (x, y, z, dest) => {\n            xyz[0] = x;\n            xyz[1] = y;\n            xyz[2] = z;\n            return math.scalingMat4v(xyz, dest);\n        };\n    }))(),\n\n    /**\n     * Efficiently post-concatenates a scaling to the given matrix.\n     * @method scaleMat4c\n     * @param x\n     * @param y\n     * @param z\n     * @param m\n     */\n    scaleMat4c(x, y, z, m) {\n\n        m[0] *= x;\n        m[4] *= y;\n        m[8] *= z;\n\n        m[1] *= x;\n        m[5] *= y;\n        m[9] *= z;\n\n        m[2] *= x;\n        m[6] *= y;\n        m[10] *= z;\n\n        m[3] *= x;\n        m[7] *= y;\n        m[11] *= z;\n        return m;\n    },\n\n    /**\n     * Efficiently post-concatenates a scaling to the given matrix.\n     * @method scaleMat4c\n     * @param xyz\n     * @param m\n     */\n    scaleMat4v(xyz, m) {\n\n        const x = xyz[0];\n        const y = xyz[1];\n        const z = xyz[2];\n\n        m[0] *= x;\n        m[4] *= y;\n        m[8] *= z;\n        m[1] *= x;\n        m[5] *= y;\n        m[9] *= z;\n        m[2] *= x;\n        m[6] *= y;\n        m[10] *= z;\n        m[3] *= x;\n        m[7] *= y;\n        m[11] *= z;\n\n        return m;\n    },\n\n    /**\n     * Returns 4x4 scale matrix.\n     * @method scalingMat4s\n     * @static\n     */\n    scalingMat4s(s) {\n        return math.scalingMat4c(s, s, s);\n    },\n\n    /**\n     * Creates a matrix from a quaternion rotation and vector translation\n     *\n     * @param {Number[]} q Rotation quaternion\n     * @param {Number[]} v Translation vector\n     * @param {Number[]} dest Destination matrix\n     * @returns {Number[]} dest\n     */\n    rotationTranslationMat4(q, v, dest = math.mat4()) {\n        const x = q[0];\n        const y = q[1];\n        const z = q[2];\n        const w = q[3];\n\n        const x2 = x + x;\n        const y2 = y + y;\n        const z2 = z + z;\n        const xx = x * x2;\n        const xy = x * y2;\n        const xz = x * z2;\n        const yy = y * y2;\n        const yz = y * z2;\n        const zz = z * z2;\n        const wx = w * x2;\n        const wy = w * y2;\n        const wz = w * z2;\n\n        dest[0] = 1 - (yy + zz);\n        dest[1] = xy + wz;\n        dest[2] = xz - wy;\n        dest[3] = 0;\n        dest[4] = xy - wz;\n        dest[5] = 1 - (xx + zz);\n        dest[6] = yz + wx;\n        dest[7] = 0;\n        dest[8] = xz + wy;\n        dest[9] = yz - wx;\n        dest[10] = 1 - (xx + yy);\n        dest[11] = 0;\n        dest[12] = v[0];\n        dest[13] = v[1];\n        dest[14] = v[2];\n        dest[15] = 1;\n\n        return dest;\n    },\n\n    /**\n     * Gets Euler angles from a 4x4 matrix.\n     *\n     * @param {Number[]} mat The 4x4 matrix.\n     * @param {String} order Desired Euler angle order: \"XYZ\", \"YXZ\", \"ZXY\" etc.\n     * @param {Number[]} [dest] Destination Euler angles, created by default.\n     * @returns {Number[]} The Euler angles.\n     */\n    mat4ToEuler(mat, order, dest = math.vec4()) {\n        const clamp = math.clamp;\n\n        // Assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\n\n        const m11 = mat[0];\n\n        const m12 = mat[4];\n        const m13 = mat[8];\n        const m21 = mat[1];\n        const m22 = mat[5];\n        const m23 = mat[9];\n        const m31 = mat[2];\n        const m32 = mat[6];\n        const m33 = mat[10];\n\n        if (order === 'XYZ') {\n\n            dest[1] = Math.asin(clamp(m13, -1, 1));\n\n            if (Math.abs(m13) < 0.99999) {\n                dest[0] = Math.atan2(-m23, m33);\n                dest[2] = Math.atan2(-m12, m11);\n            } else {\n                dest[0] = Math.atan2(m32, m22);\n                dest[2] = 0;\n\n            }\n\n        } else if (order === 'YXZ') {\n\n            dest[0] = Math.asin(-clamp(m23, -1, 1));\n\n            if (Math.abs(m23) < 0.99999) {\n                dest[1] = Math.atan2(m13, m33);\n                dest[2] = Math.atan2(m21, m22);\n            } else {\n                dest[1] = Math.atan2(-m31, m11);\n                dest[2] = 0;\n            }\n\n        } else if (order === 'ZXY') {\n\n            dest[0] = Math.asin(clamp(m32, -1, 1));\n\n            if (Math.abs(m32) < 0.99999) {\n                dest[1] = Math.atan2(-m31, m33);\n                dest[2] = Math.atan2(-m12, m22);\n            } else {\n                dest[1] = 0;\n                dest[2] = Math.atan2(m21, m11);\n            }\n\n        } else if (order === 'ZYX') {\n\n            dest[1] = Math.asin(-clamp(m31, -1, 1));\n\n            if (Math.abs(m31) < 0.99999) {\n                dest[0] = Math.atan2(m32, m33);\n                dest[2] = Math.atan2(m21, m11);\n            } else {\n                dest[0] = 0;\n                dest[2] = Math.atan2(-m12, m22);\n            }\n\n        } else if (order === 'YZX') {\n\n            dest[2] = Math.asin(clamp(m21, -1, 1));\n\n            if (Math.abs(m21) < 0.99999) {\n                dest[0] = Math.atan2(-m23, m22);\n                dest[1] = Math.atan2(-m31, m11);\n            } else {\n                dest[0] = 0;\n                dest[1] = Math.atan2(m13, m33);\n            }\n\n        } else if (order === 'XZY') {\n\n            dest[2] = Math.asin(-clamp(m12, -1, 1));\n\n            if (Math.abs(m12) < 0.99999) {\n                dest[0] = Math.atan2(m32, m22);\n                dest[1] = Math.atan2(m13, m11);\n            } else {\n                dest[0] = Math.atan2(-m23, m33);\n                dest[1] = 0;\n            }\n        }\n\n        return dest;\n    },\n\n    composeMat4(position, quaternion, scale, mat = math.mat4()) {\n        math.quaternionToRotationMat4(quaternion, mat);\n        math.scaleMat4v(scale, mat);\n        math.translateMat4v(position, mat);\n\n        return mat;\n    },\n\n    decomposeMat4: (() => {\n\n        const vec = new FloatArrayType(3);\n        const matrix = new FloatArrayType(16);\n\n        return function decompose(mat, position, quaternion, scale) {\n\n            vec[0] = mat[0];\n            vec[1] = mat[1];\n            vec[2] = mat[2];\n\n            let sx = math.lenVec3(vec);\n\n            vec[0] = mat[4];\n            vec[1] = mat[5];\n            vec[2] = mat[6];\n\n            const sy = math.lenVec3(vec);\n\n            vec[8] = mat[8];\n            vec[9] = mat[9];\n            vec[10] = mat[10];\n\n            const sz = math.lenVec3(vec);\n\n            // if determine is negative, we need to invert one scale\n            const det = math.determinantMat4(mat);\n\n            if (det < 0) {\n                sx = -sx;\n            }\n\n            position[0] = mat[12];\n            position[1] = mat[13];\n            position[2] = mat[14];\n\n            // scale the rotation part\n            matrix.set(mat);\n\n            const invSX = 1 / sx;\n            const invSY = 1 / sy;\n            const invSZ = 1 / sz;\n\n            matrix[0] *= invSX;\n            matrix[1] *= invSX;\n            matrix[2] *= invSX;\n\n            matrix[4] *= invSY;\n            matrix[5] *= invSY;\n            matrix[6] *= invSY;\n\n            matrix[8] *= invSZ;\n            matrix[9] *= invSZ;\n            matrix[10] *= invSZ;\n\n            math.mat4ToQuaternion(matrix, quaternion);\n\n            scale[0] = sx;\n            scale[1] = sy;\n            scale[2] = sz;\n\n            return this;\n\n        };\n\n    })(),\n\n    /**\n     * Returns a 4x4 'lookat' viewing transform matrix.\n     * @method lookAtMat4v\n     * @param pos vec3 position of the viewer\n     * @param target vec3 point the viewer is looking at\n     * @param up vec3 pointing \"up\"\n     * @param dest mat4 Optional, mat4 matrix will be written into\n     *\n     * @return {mat4} dest if specified, a new mat4 otherwise\n     */\n    lookAtMat4v(pos, target, up, dest) {\n        if (!dest) {\n            dest = math.mat4();\n        }\n\n        const posx = pos[0];\n        const posy = pos[1];\n        const posz = pos[2];\n        const upx = up[0];\n        const upy = up[1];\n        const upz = up[2];\n        const targetx = target[0];\n        const targety = target[1];\n        const targetz = target[2];\n\n        if (posx === targetx && posy === targety && posz === targetz) {\n            return math.identityMat4();\n        }\n\n        let z0;\n        let z1;\n        let z2;\n        let x0;\n        let x1;\n        let x2;\n        let y0;\n        let y1;\n        let y2;\n        let len;\n\n        //vec3.direction(eye, center, z);\n        z0 = posx - targetx;\n        z1 = posy - targety;\n        z2 = posz - targetz;\n\n        // normalize (no check needed for 0 because of early return)\n        len = 1 / Math.sqrt(z0 * z0 + z1 * z1 + z2 * z2);\n        z0 *= len;\n        z1 *= len;\n        z2 *= len;\n\n        //vec3.normalize(vec3.cross(up, z, x));\n        x0 = upy * z2 - upz * z1;\n        x1 = upz * z0 - upx * z2;\n        x2 = upx * z1 - upy * z0;\n        len = Math.sqrt(x0 * x0 + x1 * x1 + x2 * x2);\n        if (!len) {\n            x0 = 0;\n            x1 = 0;\n            x2 = 0;\n        } else {\n            len = 1 / len;\n            x0 *= len;\n            x1 *= len;\n            x2 *= len;\n        }\n\n        //vec3.normalize(vec3.cross(z, x, y));\n        y0 = z1 * x2 - z2 * x1;\n        y1 = z2 * x0 - z0 * x2;\n        y2 = z0 * x1 - z1 * x0;\n\n        len = Math.sqrt(y0 * y0 + y1 * y1 + y2 * y2);\n        if (!len) {\n            y0 = 0;\n            y1 = 0;\n            y2 = 0;\n        } else {\n            len = 1 / len;\n            y0 *= len;\n            y1 *= len;\n            y2 *= len;\n        }\n\n        dest[0] = x0;\n        dest[1] = y0;\n        dest[2] = z0;\n        dest[3] = 0;\n        dest[4] = x1;\n        dest[5] = y1;\n        dest[6] = z1;\n        dest[7] = 0;\n        dest[8] = x2;\n        dest[9] = y2;\n        dest[10] = z2;\n        dest[11] = 0;\n        dest[12] = -(x0 * posx + x1 * posy + x2 * posz);\n        dest[13] = -(y0 * posx + y1 * posy + y2 * posz);\n        dest[14] = -(z0 * posx + z1 * posy + z2 * posz);\n        dest[15] = 1;\n\n        return dest;\n    },\n\n    /**\n     * Returns a 4x4 'lookat' viewing transform matrix.\n     * @method lookAtMat4c\n     * @static\n     */\n    lookAtMat4c(posx, posy, posz, targetx, targety, targetz, upx, upy, upz) {\n        return math.lookAtMat4v([posx, posy, posz], [targetx, targety, targetz], [upx, upy, upz], []);\n    },\n\n    /**\n     * Returns a 4x4 orthographic projection matrix.\n     * @method orthoMat4c\n     * @static\n     */\n    orthoMat4c(left, right, bottom, top, near, far, dest) {\n        if (!dest) {\n            dest = math.mat4();\n        }\n        const rl = (right - left);\n        const tb = (top - bottom);\n        const fn = (far - near);\n\n        dest[0] = 2.0 / rl;\n        dest[1] = 0.0;\n        dest[2] = 0.0;\n        dest[3] = 0.0;\n\n        dest[4] = 0.0;\n        dest[5] = 2.0 / tb;\n        dest[6] = 0.0;\n        dest[7] = 0.0;\n\n        dest[8] = 0.0;\n        dest[9] = 0.0;\n        dest[10] = -2.0 / fn;\n        dest[11] = 0.0;\n\n        dest[12] = -(left + right) / rl;\n        dest[13] = -(top + bottom) / tb;\n        dest[14] = -(far + near) / fn;\n        dest[15] = 1.0;\n\n        return dest;\n    },\n\n    /**\n     * Returns a 4x4 perspective projection matrix.\n     * @method frustumMat4v\n     * @static\n     */\n    frustumMat4v(fmin, fmax, m) {\n        if (!m) {\n            m = math.mat4();\n        }\n\n        const fmin4 = [fmin[0], fmin[1], fmin[2], 0.0];\n        const fmax4 = [fmax[0], fmax[1], fmax[2], 0.0];\n\n        math.addVec4(fmax4, fmin4, tempMat1);\n        math.subVec4(fmax4, fmin4, tempMat2);\n\n        const t = 2.0 * fmin4[2];\n\n        const tempMat20 = tempMat2[0];\n        const tempMat21 = tempMat2[1];\n        const tempMat22 = tempMat2[2];\n\n        m[0] = t / tempMat20;\n        m[1] = 0.0;\n        m[2] = 0.0;\n        m[3] = 0.0;\n\n        m[4] = 0.0;\n        m[5] = t / tempMat21;\n        m[6] = 0.0;\n        m[7] = 0.0;\n\n        m[8] = tempMat1[0] / tempMat20;\n        m[9] = tempMat1[1] / tempMat21;\n        m[10] = -tempMat1[2] / tempMat22;\n        m[11] = -1.0;\n\n        m[12] = 0.0;\n        m[13] = 0.0;\n        m[14] = -t * fmax4[2] / tempMat22;\n        m[15] = 0.0;\n\n        return m;\n    },\n\n    /**\n     * Returns a 4x4 perspective projection matrix.\n     * @method frustumMat4v\n     * @static\n     */\n    frustumMat4(left, right, bottom, top, near, far, dest) {\n        if (!dest) {\n            dest = math.mat4();\n        }\n        const rl = (right - left);\n        const tb = (top - bottom);\n        const fn = (far - near);\n        dest[0] = (near * 2) / rl;\n        dest[1] = 0;\n        dest[2] = 0;\n        dest[3] = 0;\n        dest[4] = 0;\n        dest[5] = (near * 2) / tb;\n        dest[6] = 0;\n        dest[7] = 0;\n        dest[8] = (right + left) / rl;\n        dest[9] = (top + bottom) / tb;\n        dest[10] = -(far + near) / fn;\n        dest[11] = -1;\n        dest[12] = 0;\n        dest[13] = 0;\n        dest[14] = -(far * near * 2) / fn;\n        dest[15] = 0;\n        return dest;\n    },\n\n    /**\n     * Returns a 4x4 perspective projection matrix.\n     * @method perspectiveMat4v\n     * @static\n     */\n    perspectiveMat4(fovyrad, aspectratio, znear, zfar, m) {\n        const pmin = [];\n        const pmax = [];\n\n        pmin[2] = znear;\n        pmax[2] = zfar;\n\n        pmax[1] = pmin[2] * Math.tan(fovyrad / 2.0);\n        pmin[1] = -pmax[1];\n\n        pmax[0] = pmax[1] * aspectratio;\n        pmin[0] = -pmax[0];\n\n        return math.frustumMat4v(pmin, pmax, m);\n    },\n\n    /**\n     * Transforms a three-element position by a 4x4 matrix.\n     * @method transformPoint3\n     * @static\n     */\n    transformPoint3(m, p, dest = math.vec3()) {\n\n        const x = p[0];\n        const y = p[1];\n        const z = p[2];\n\n        dest[0] = (m[0] * x) + (m[4] * y) + (m[8] * z) + m[12];\n        dest[1] = (m[1] * x) + (m[5] * y) + (m[9] * z) + m[13];\n        dest[2] = (m[2] * x) + (m[6] * y) + (m[10] * z) + m[14];\n\n        return dest;\n    },\n\n    /**\n     * Transforms a homogeneous coordinate by a 4x4 matrix.\n     * @method transformPoint3\n     * @static\n     */\n    transformPoint4(m, v, dest = math.vec4()) {\n        dest[0] = m[0] * v[0] + m[4] * v[1] + m[8] * v[2] + m[12] * v[3];\n        dest[1] = m[1] * v[0] + m[5] * v[1] + m[9] * v[2] + m[13] * v[3];\n        dest[2] = m[2] * v[0] + m[6] * v[1] + m[10] * v[2] + m[14] * v[3];\n        dest[3] = m[3] * v[0] + m[7] * v[1] + m[11] * v[2] + m[15] * v[3];\n\n        return dest;\n    },\n\n\n    /**\n     * Transforms an array of three-element positions by a 4x4 matrix.\n     * @method transformPoints3\n     * @static\n     */\n    transformPoints3(m, points, points2) {\n        const result = points2 || [];\n        const len = points.length;\n        let p0;\n        let p1;\n        let p2;\n        let pi;\n\n        // cache values\n        const m0 = m[0];\n\n        const m1 = m[1];\n        const m2 = m[2];\n        const m3 = m[3];\n        const m4 = m[4];\n        const m5 = m[5];\n        const m6 = m[6];\n        const m7 = m[7];\n        const m8 = m[8];\n        const m9 = m[9];\n        const m10 = m[10];\n        const m11 = m[11];\n        const m12 = m[12];\n        const m13 = m[13];\n        const m14 = m[14];\n        const m15 = m[15];\n\n        let r;\n\n        for (let i = 0; i < len; ++i) {\n\n            // cache values\n            pi = points[i];\n\n            p0 = pi[0];\n            p1 = pi[1];\n            p2 = pi[2];\n\n            r = result[i] || (result[i] = [0, 0, 0]);\n\n            r[0] = (m0 * p0) + (m4 * p1) + (m8 * p2) + m12;\n            r[1] = (m1 * p0) + (m5 * p1) + (m9 * p2) + m13;\n            r[2] = (m2 * p0) + (m6 * p1) + (m10 * p2) + m14;\n            r[3] = (m3 * p0) + (m7 * p1) + (m11 * p2) + m15;\n        }\n\n        result.length = len;\n\n        return result;\n    },\n\n    /**\n     * Transforms an array of positions by a 4x4 matrix.\n     * @method transformPositions3\n     * @static\n     */\n    transformPositions3(m, p, p2 = p) {\n        let i;\n        const len = p.length;\n\n        let x;\n        let y;\n        let z;\n\n        const m0 = m[0];\n        const m1 = m[1];\n        const m2 = m[2];\n        const m3 = m[3];\n        const m4 = m[4];\n        const m5 = m[5];\n        const m6 = m[6];\n        const m7 = m[7];\n        const m8 = m[8];\n        const m9 = m[9];\n        const m10 = m[10];\n        const m11 = m[11];\n        const m12 = m[12];\n        const m13 = m[13];\n        const m14 = m[14];\n        const m15 = m[15];\n\n        for (i = 0; i < len; i += 3) {\n\n            x = p[i + 0];\n            y = p[i + 1];\n            z = p[i + 2];\n\n            p2[i + 0] = (m0 * x) + (m4 * y) + (m8 * z) + m12;\n            p2[i + 1] = (m1 * x) + (m5 * y) + (m9 * z) + m13;\n            p2[i + 2] = (m2 * x) + (m6 * y) + (m10 * z) + m14;\n            p2[i + 3] = (m3 * x) + (m7 * y) + (m11 * z) + m15;\n        }\n\n        return p2;\n    },\n\n    /**\n     * Transforms an array of positions by a 4x4 matrix.\n     * @method transformPositions4\n     * @static\n     */\n    transformPositions4(m, p, p2 = p) {\n        let i;\n        const len = p.length;\n\n        let x;\n        let y;\n        let z;\n\n        const m0 = m[0];\n        const m1 = m[1];\n        const m2 = m[2];\n        const m3 = m[3];\n        const m4 = m[4];\n        const m5 = m[5];\n        const m6 = m[6];\n        const m7 = m[7];\n        const m8 = m[8];\n        const m9 = m[9];\n        const m10 = m[10];\n        const m11 = m[11];\n        const m12 = m[12];\n        const m13 = m[13];\n        const m14 = m[14];\n        const m15 = m[15];\n\n        for (i = 0; i < len; i += 4) {\n\n            x = p[i + 0];\n            y = p[i + 1];\n            z = p[i + 2];\n\n            p2[i + 0] = (m0 * x) + (m4 * y) + (m8 * z) + m12;\n            p2[i + 1] = (m1 * x) + (m5 * y) + (m9 * z) + m13;\n            p2[i + 2] = (m2 * x) + (m6 * y) + (m10 * z) + m14;\n            p2[i + 3] = (m3 * x) + (m7 * y) + (m11 * z) + m15;\n        }\n\n        return p2;\n    },\n\n    /**\n     * Transforms a three-element vector by a 4x4 matrix.\n     * @method transformVec3\n     * @static\n     */\n    transformVec3(m, v, dest) {\n        const v0 = v[0];\n        const v1 = v[1];\n        const v2 = v[2];\n        dest = dest || this.vec3();\n        dest[0] = (m[0] * v0) + (m[4] * v1) + (m[8] * v2);\n        dest[1] = (m[1] * v0) + (m[5] * v1) + (m[9] * v2);\n        dest[2] = (m[2] * v0) + (m[6] * v1) + (m[10] * v2);\n        return dest;\n    },\n\n    /**\n     * Transforms a four-element vector by a 4x4 matrix.\n     * @method transformVec4\n     * @static\n     */\n    transformVec4(m, v, dest) {\n        const v0 = v[0];\n        const v1 = v[1];\n        const v2 = v[2];\n        const v3 = v[3];\n        dest = dest || math.vec4();\n        dest[0] = m[0] * v0 + m[4] * v1 + m[8] * v2 + m[12] * v3;\n        dest[1] = m[1] * v0 + m[5] * v1 + m[9] * v2 + m[13] * v3;\n        dest[2] = m[2] * v0 + m[6] * v1 + m[10] * v2 + m[14] * v3;\n        dest[3] = m[3] * v0 + m[7] * v1 + m[11] * v2 + m[15] * v3;\n        return dest;\n    },\n\n    /**\n     * Rotate a 3D vector around the x-axis\n     *\n     * @method rotateVec3X\n     * @param {Number[]} a The vec3 point to rotate\n     * @param {Number[]} b The origin of the rotation\n     * @param {Number} c The angle of rotation\n     * @param {Number[]} dest The receiving vec3\n     * @returns {Number[]} dest\n     * @static\n     */\n    rotateVec3X(a, b, c, dest) {\n        const p = [];\n        const r = [];\n\n        //Translate point to the origin\n        p[0] = a[0] - b[0];\n        p[1] = a[1] - b[1];\n        p[2] = a[2] - b[2];\n\n        //perform rotation\n        r[0] = p[0];\n        r[1] = p[1] * Math.cos(c) - p[2] * Math.sin(c);\n        r[2] = p[1] * Math.sin(c) + p[2] * Math.cos(c);\n\n        //translate to correct position\n        dest[0] = r[0] + b[0];\n        dest[1] = r[1] + b[1];\n        dest[2] = r[2] + b[2];\n\n        return dest;\n    },\n\n    /**\n     * Rotate a 3D vector around the y-axis\n     *\n     * @method rotateVec3Y\n     * @param {Number[]} a The vec3 point to rotate\n     * @param {Number[]} b The origin of the rotation\n     * @param {Number} c The angle of rotation\n     * @param {Number[]} dest The receiving vec3\n     * @returns {Number[]} dest\n     * @static\n     */\n    rotateVec3Y(a, b, c, dest) {\n        const p = [];\n        const r = [];\n\n        //Translate point to the origin\n        p[0] = a[0] - b[0];\n        p[1] = a[1] - b[1];\n        p[2] = a[2] - b[2];\n\n        //perform rotation\n        r[0] = p[2] * Math.sin(c) + p[0] * Math.cos(c);\n        r[1] = p[1];\n        r[2] = p[2] * Math.cos(c) - p[0] * Math.sin(c);\n\n        //translate to correct position\n        dest[0] = r[0] + b[0];\n        dest[1] = r[1] + b[1];\n        dest[2] = r[2] + b[2];\n\n        return dest;\n    },\n\n    /**\n     * Rotate a 3D vector around the z-axis\n     *\n     * @method rotateVec3Z\n     * @param {Number[]} a The vec3 point to rotate\n     * @param {Number[]} b The origin of the rotation\n     * @param {Number} c The angle of rotation\n     * @param {Number[]} dest The receiving vec3\n     * @returns {Number[]} dest\n     * @static\n     */\n    rotateVec3Z(a, b, c, dest) {\n        const p = [];\n        const r = [];\n\n        //Translate point to the origin\n        p[0] = a[0] - b[0];\n        p[1] = a[1] - b[1];\n        p[2] = a[2] - b[2];\n\n        //perform rotation\n        r[0] = p[0] * Math.cos(c) - p[1] * Math.sin(c);\n        r[1] = p[0] * Math.sin(c) + p[1] * Math.cos(c);\n        r[2] = p[2];\n\n        //translate to correct position\n        dest[0] = r[0] + b[0];\n        dest[1] = r[1] + b[1];\n        dest[2] = r[2] + b[2];\n\n        return dest;\n    },\n\n    /**\n     * Transforms a four-element vector by a 4x4 projection matrix.\n     *\n     * @method projectVec4\n     * @param {Number[]} p 3D View-space coordinate\n     * @param {Number[]} q 2D Projected coordinate\n     * @returns {Number[]} 2D Projected coordinate\n     * @static\n     */\n    projectVec4(p, q) {\n        const f = 1.0 / p[3];\n        q = q || math.vec2();\n        q[0] = v[0] * f;\n        q[1] = v[1] * f;\n        return q;\n    },\n\n    /**\n     * Unprojects a three-element vector.\n     *\n     * @method unprojectVec3\n     * @param {Number[]} p 3D Projected coordinate\n     * @param {Number[]} viewMat View matrix\n     * @returns {Number[]} projMat Projection matrix\n     * @static\n     */\n    unprojectVec3: ((() => {\n        const mat = new FloatArrayType(16);\n        const mat2 = new FloatArrayType(16);\n        const mat3 = new FloatArrayType(16);\n        return function (p, viewMat, projMat, q) {\n            return this.transformVec3(this.mulMat4(this.inverseMat4(viewMat, mat), this.inverseMat4(projMat, mat2), mat3), p, q)\n        };\n    }))(),\n\n    /**\n     * Linearly interpolates between two 3D vectors.\n     * @method lerpVec3\n     * @static\n     */\n    lerpVec3(t, t1, t2, p1, p2, dest) {\n        const result = dest || math.vec3();\n        const f = (t - t1) / (t2 - t1);\n        result[0] = p1[0] + (f * (p2[0] - p1[0]));\n        result[1] = p1[1] + (f * (p2[1] - p1[1]));\n        result[2] = p1[2] + (f * (p2[2] - p1[2]));\n        return result;\n    },\n\n\n    /**\n     * Flattens a two-dimensional array into a one-dimensional array.\n     *\n     * @method flatten\n     * @static\n     * @param {Array of Arrays} a A 2D array\n     * @returns Flattened 1D array\n     */\n    flatten(a) {\n\n        const result = [];\n\n        let i;\n        let leni;\n        let j;\n        let lenj;\n        let item;\n\n        for (i = 0, leni = a.length; i < leni; i++) {\n            item = a[i];\n            for (j = 0, lenj = item.length; j < lenj; j++) {\n                result.push(item[j]);\n            }\n        }\n\n        return result;\n    },\n\n\n    identityQuaternion(dest = math.vec4()) {\n        dest[0] = 0.0;\n        dest[1] = 0.0;\n        dest[2] = 0.0;\n        dest[3] = 1.0;\n        return dest;\n    },\n\n    /**\n     * Initializes a quaternion from Euler angles.\n     *\n     * @param {Number[]} euler The Euler angles.\n     * @param {String} order Euler angle order: \"XYZ\", \"YXZ\", \"ZXY\" etc.\n     * @param {Number[]} [dest] Destination quaternion, created by default.\n     * @returns {Number[]} The quaternion.\n     */\n    eulerToQuaternion(euler, order, dest = math.vec4()) {\n        // http://www.mathworks.com/matlabcentral/fileexchange/\n        // \t20696-function-to-convert-between-dcm-euler-angles-quaternions-and-euler-vectors/\n        //\tcontent/SpinCalc.m\n\n        const a = (euler[0] * math.DEGTORAD) / 2;\n        const b = (euler[1] * math.DEGTORAD) / 2;\n        const c = (euler[2] * math.DEGTORAD) / 2;\n\n        const c1 = Math.cos(a);\n        const c2 = Math.cos(b);\n        const c3 = Math.cos(c);\n        const s1 = Math.sin(a);\n        const s2 = Math.sin(b);\n        const s3 = Math.sin(c);\n\n        if (order === 'XYZ') {\n\n            dest[0] = s1 * c2 * c3 + c1 * s2 * s3;\n            dest[1] = c1 * s2 * c3 - s1 * c2 * s3;\n            dest[2] = c1 * c2 * s3 + s1 * s2 * c3;\n            dest[3] = c1 * c2 * c3 - s1 * s2 * s3;\n\n        } else if (order === 'YXZ') {\n\n            dest[0] = s1 * c2 * c3 + c1 * s2 * s3;\n            dest[1] = c1 * s2 * c3 - s1 * c2 * s3;\n            dest[2] = c1 * c2 * s3 - s1 * s2 * c3;\n            dest[3] = c1 * c2 * c3 + s1 * s2 * s3;\n\n        } else if (order === 'ZXY') {\n\n            dest[0] = s1 * c2 * c3 - c1 * s2 * s3;\n            dest[1] = c1 * s2 * c3 + s1 * c2 * s3;\n            dest[2] = c1 * c2 * s3 + s1 * s2 * c3;\n            dest[3] = c1 * c2 * c3 - s1 * s2 * s3;\n\n        } else if (order === 'ZYX') {\n\n            dest[0] = s1 * c2 * c3 - c1 * s2 * s3;\n            dest[1] = c1 * s2 * c3 + s1 * c2 * s3;\n            dest[2] = c1 * c2 * s3 - s1 * s2 * c3;\n            dest[3] = c1 * c2 * c3 + s1 * s2 * s3;\n\n        } else if (order === 'YZX') {\n\n            dest[0] = s1 * c2 * c3 + c1 * s2 * s3;\n            dest[1] = c1 * s2 * c3 + s1 * c2 * s3;\n            dest[2] = c1 * c2 * s3 - s1 * s2 * c3;\n            dest[3] = c1 * c2 * c3 - s1 * s2 * s3;\n\n        } else if (order === 'XZY') {\n\n            dest[0] = s1 * c2 * c3 - c1 * s2 * s3;\n            dest[1] = c1 * s2 * c3 - s1 * c2 * s3;\n            dest[2] = c1 * c2 * s3 + s1 * s2 * c3;\n            dest[3] = c1 * c2 * c3 + s1 * s2 * s3;\n        }\n\n        return dest;\n    },\n\n    mat4ToQuaternion(m, dest = math.vec4()) {\n        // http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToQuaternion/index.htm\n\n        // Assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\n\n        const m11 = m[0];\n        const m12 = m[4];\n        const m13 = m[8];\n        const m21 = m[1];\n        const m22 = m[5];\n        const m23 = m[9];\n        const m31 = m[2];\n        const m32 = m[6];\n        const m33 = m[10];\n        let s;\n\n        const trace = m11 + m22 + m33;\n\n        if (trace > 0) {\n\n            s = 0.5 / Math.sqrt(trace + 1.0);\n\n            dest[3] = 0.25 / s;\n            dest[0] = (m32 - m23) * s;\n            dest[1] = (m13 - m31) * s;\n            dest[2] = (m21 - m12) * s;\n\n        } else if (m11 > m22 && m11 > m33) {\n\n            s = 2.0 * Math.sqrt(1.0 + m11 - m22 - m33);\n\n            dest[3] = (m32 - m23) / s;\n            dest[0] = 0.25 * s;\n            dest[1] = (m12 + m21) / s;\n            dest[2] = (m13 + m31) / s;\n\n        } else if (m22 > m33) {\n\n            s = 2.0 * Math.sqrt(1.0 + m22 - m11 - m33);\n\n            dest[3] = (m13 - m31) / s;\n            dest[0] = (m12 + m21) / s;\n            dest[1] = 0.25 * s;\n            dest[2] = (m23 + m32) / s;\n\n        } else {\n\n            s = 2.0 * Math.sqrt(1.0 + m33 - m11 - m22);\n\n            dest[3] = (m21 - m12) / s;\n            dest[0] = (m13 + m31) / s;\n            dest[1] = (m23 + m32) / s;\n            dest[2] = 0.25 * s;\n        }\n\n        return dest;\n    },\n\n    vec3PairToQuaternion(u, v, dest = math.vec4()) {\n        const norm_u_norm_v = Math.sqrt(math.dotVec3(u, u) * math.dotVec3(v, v));\n        let real_part = norm_u_norm_v + math.dotVec3(u, v);\n\n        if (real_part < 0.00000001 * norm_u_norm_v) {\n\n            // If u and v are exactly opposite, rotate 180 degrees\n            // around an arbitrary orthogonal axis. Axis normalisation\n            // can happen later, when we normalise the quaternion.\n\n            real_part = 0.0;\n\n            if (Math.abs(u[0]) > Math.abs(u[2])) {\n\n                dest[0] = -u[1];\n                dest[1] = u[0];\n                dest[2] = 0;\n\n            } else {\n                dest[0] = 0;\n                dest[1] = -u[2];\n                dest[2] = u[1]\n            }\n\n        } else {\n\n            // Otherwise, build quaternion the standard way.\n            math.cross3Vec3(u, v, dest);\n        }\n\n        dest[3] = real_part;\n\n        return math.normalizeQuaternion(dest);\n    },\n\n    angleAxisToQuaternion(angleAxis, dest = math.vec4()) {\n        const halfAngle = angleAxis[3] / 2.0;\n        const fsin = Math.sin(halfAngle);\n        dest[0] = fsin * angleAxis[0];\n        dest[1] = fsin * angleAxis[1];\n        dest[2] = fsin * angleAxis[2];\n        dest[3] = Math.cos(halfAngle);\n        return dest;\n    },\n\n    quaternionToEuler: ((() => {\n        const mat = new FloatArrayType(16);\n        return (q, order, dest) => {\n            dest = dest || math.vec3();\n            math.quaternionToRotationMat4(q, mat);\n            math.mat4ToEuler(mat, order, dest);\n            return dest;\n        };\n    }))(),\n\n    mulQuaternions(p, q, dest = math.vec4()) {\n        const p0 = p[0];\n        const p1 = p[1];\n        const p2 = p[2];\n        const p3 = p[3];\n        const q0 = q[0];\n        const q1 = q[1];\n        const q2 = q[2];\n        const q3 = q[3];\n        dest[0] = p3 * q0 + p0 * q3 + p1 * q2 - p2 * q1;\n        dest[1] = p3 * q1 + p1 * q3 + p2 * q0 - p0 * q2;\n        dest[2] = p3 * q2 + p2 * q3 + p0 * q1 - p1 * q0;\n        dest[3] = p3 * q3 - p0 * q0 - p1 * q1 - p2 * q2;\n        return dest;\n    },\n\n    vec3ApplyQuaternion(q, vec, dest = math.vec3()) {\n        const x = vec[0];\n        const y = vec[1];\n        const z = vec[2];\n\n        const qx = q[0];\n        const qy = q[1];\n        const qz = q[2];\n        const qw = q[3];\n\n        // calculate quat * vector\n\n        const ix = qw * x + qy * z - qz * y;\n        const iy = qw * y + qz * x - qx * z;\n        const iz = qw * z + qx * y - qy * x;\n        const iw = -qx * x - qy * y - qz * z;\n\n        // calculate result * inverse quat\n\n        dest[0] = ix * qw + iw * -qx + iy * -qz - iz * -qy;\n        dest[1] = iy * qw + iw * -qy + iz * -qx - ix * -qz;\n        dest[2] = iz * qw + iw * -qz + ix * -qy - iy * -qx;\n\n        return dest;\n    },\n\n    quaternionToMat4(q, dest) {\n\n        dest = math.identityMat4(dest);\n\n        const q0 = q[0];  //x\n        const q1 = q[1];  //y\n        const q2 = q[2];  //z\n        const q3 = q[3];  //w\n\n        const tx = 2.0 * q0;\n        const ty = 2.0 * q1;\n        const tz = 2.0 * q2;\n\n        const twx = tx * q3;\n        const twy = ty * q3;\n        const twz = tz * q3;\n\n        const txx = tx * q0;\n        const txy = ty * q0;\n        const txz = tz * q0;\n\n        const tyy = ty * q1;\n        const tyz = tz * q1;\n        const tzz = tz * q2;\n\n        dest[0] = 1.0 - (tyy + tzz);\n        dest[1] = txy + twz;\n        dest[2] = txz - twy;\n\n        dest[4] = txy - twz;\n        dest[5] = 1.0 - (txx + tzz);\n        dest[6] = tyz + twx;\n\n        dest[8] = txz + twy;\n        dest[9] = tyz - twx;\n\n        dest[10] = 1.0 - (txx + tyy);\n\n        return dest;\n    },\n\n    quaternionToRotationMat4(q, m) {\n        const x = q[0];\n        const y = q[1];\n        const z = q[2];\n        const w = q[3];\n\n        const x2 = x + x;\n        const y2 = y + y;\n        const z2 = z + z;\n        const xx = x * x2;\n        const xy = x * y2;\n        const xz = x * z2;\n        const yy = y * y2;\n        const yz = y * z2;\n        const zz = z * z2;\n        const wx = w * x2;\n        const wy = w * y2;\n        const wz = w * z2;\n\n        m[0] = 1 - (yy + zz);\n        m[4] = xy - wz;\n        m[8] = xz + wy;\n\n        m[1] = xy + wz;\n        m[5] = 1 - (xx + zz);\n        m[9] = yz - wx;\n\n        m[2] = xz - wy;\n        m[6] = yz + wx;\n        m[10] = 1 - (xx + yy);\n\n        // last column\n        m[3] = 0;\n        m[7] = 0;\n        m[11] = 0;\n\n        // bottom row\n        m[12] = 0;\n        m[13] = 0;\n        m[14] = 0;\n        m[15] = 1;\n\n        return m;\n    },\n\n    normalizeQuaternion(q, dest = q) {\n        const len = math.lenVec4([q[0], q[1], q[2], q[3]]);\n        dest[0] = q[0] / len;\n        dest[1] = q[1] / len;\n        dest[2] = q[2] / len;\n        dest[3] = q[3] / len;\n        return dest;\n    },\n\n    conjugateQuaternion(q, dest = q) {\n        dest[0] = -q[0];\n        dest[1] = -q[1];\n        dest[2] = -q[2];\n        dest[3] = q[3];\n        return dest;\n    },\n\n    inverseQuaternion(q, dest) {\n        return math.normalizeQuaternion(math.conjugateQuaternion(q, dest));\n    },\n\n    quaternionToAngleAxis(q, angleAxis = math.vec4()) {\n        q = math.normalizeQuaternion(q, tempVec4);\n        const q3 = q[3];\n        const angle = 2 * Math.acos(q3);\n        const s = Math.sqrt(1 - q3 * q3);\n        if (s < 0.001) { // test to avoid divide by zero, s is always positive due to sqrt\n            angleAxis[0] = q[0];\n            angleAxis[1] = q[1];\n            angleAxis[2] = q[2];\n        } else {\n            angleAxis[0] = q[0] / s;\n            angleAxis[1] = q[1] / s;\n            angleAxis[2] = q[2] / s;\n        }\n        angleAxis[3] = angle; // * 57.295779579;\n        return angleAxis;\n    },\n\n    //------------------------------------------------------------------------------------------------------------------\n    // Boundaries\n    //------------------------------------------------------------------------------------------------------------------\n\n    /**\n     * Returns a new, uninitialized 3D axis-aligned bounding box.\n     *\n     * @private\n     */\n    AABB3(values) {\n        return new FloatArrayType(values || 6);\n    },\n\n    /**\n     * Returns a new, uninitialized 2D axis-aligned bounding box.\n     *\n     * @private\n     */\n    AABB2(values) {\n        return new FloatArrayType(values || 4);\n    },\n\n    /**\n     * Returns a new, uninitialized 3D oriented bounding box (OBB).\n     *\n     * @private\n     */\n    OBB3(values) {\n        return new FloatArrayType(values || 32);\n    },\n\n    /**\n     * Returns a new, uninitialized 2D oriented bounding box (OBB).\n     *\n     * @private\n     */\n    OBB2(values) {\n        return new FloatArrayType(values || 16);\n    },\n\n    /** Returns a new 3D bounding sphere */\n    Sphere3(x, y, z, r) {\n        return new FloatArrayType([x, y, z, r]);\n    },\n\n    /**\n     * Transforms an OBB3 by a 4x4 matrix.\n     *\n     * @private\n     */\n    transformOBB3(m, p, p2 = p) {\n        let i;\n        const len = p.length;\n\n        let x;\n        let y;\n        let z;\n\n        const m0 = m[0];\n        const m1 = m[1];\n        const m2 = m[2];\n        const m3 = m[3];\n        const m4 = m[4];\n        const m5 = m[5];\n        const m6 = m[6];\n        const m7 = m[7];\n        const m8 = m[8];\n        const m9 = m[9];\n        const m10 = m[10];\n        const m11 = m[11];\n        const m12 = m[12];\n        const m13 = m[13];\n        const m14 = m[14];\n        const m15 = m[15];\n\n        for (i = 0; i < len; i += 4) {\n\n            x = p[i + 0];\n            y = p[i + 1];\n            z = p[i + 2];\n\n            p2[i + 0] = (m0 * x) + (m4 * y) + (m8 * z) + m12;\n            p2[i + 1] = (m1 * x) + (m5 * y) + (m9 * z) + m13;\n            p2[i + 2] = (m2 * x) + (m6 * y) + (m10 * z) + m14;\n            p2[i + 3] = (m3 * x) + (m7 * y) + (m11 * z) + m15;\n        }\n\n        return p2;\n    },\n\n    /** Returns true if the first AABB contains the second AABB.\n     * @param aabb1\n     * @param aabb2\n     * @returns {boolean}\n     */\n    containsAABB3: function (aabb1, aabb2) {\n        const result = (\n            aabb1[0] <= aabb2[0] && aabb2[3] <= aabb1[3] &&\n            aabb1[1] <= aabb2[1] && aabb2[4] <= aabb1[4] &&\n            aabb1[2] <= aabb2[2] && aabb2[5] <= aabb1[5]);\n        return result;\n    },\n\n    /**\n     * Gets the diagonal size of an AABB3 given as minima and maxima.\n     *\n     * @private\n     */\n    getAABB3Diag: ((() => {\n\n        const min = new FloatArrayType(3);\n        const max = new FloatArrayType(3);\n        const tempVec3 = new FloatArrayType(3);\n\n        return aabb => {\n\n            min[0] = aabb[0];\n            min[1] = aabb[1];\n            min[2] = aabb[2];\n\n            max[0] = aabb[3];\n            max[1] = aabb[4];\n            max[2] = aabb[5];\n\n            math.subVec3(max, min, tempVec3);\n\n            return Math.abs(math.lenVec3(tempVec3));\n        };\n    }))(),\n\n    /**\n     * Get a diagonal boundary size that is symmetrical about the given point.\n     *\n     * @private\n     */\n    getAABB3DiagPoint: ((() => {\n\n        const min = new FloatArrayType(3);\n        const max = new FloatArrayType(3);\n        const tempVec3 = new FloatArrayType(3);\n\n        return (aabb, p) => {\n\n            min[0] = aabb[0];\n            min[1] = aabb[1];\n            min[2] = aabb[2];\n\n            max[0] = aabb[3];\n            max[1] = aabb[4];\n            max[2] = aabb[5];\n\n            const diagVec = math.subVec3(max, min, tempVec3);\n\n            const xneg = p[0] - aabb[0];\n            const xpos = aabb[3] - p[0];\n            const yneg = p[1] - aabb[1];\n            const ypos = aabb[4] - p[1];\n            const zneg = p[2] - aabb[2];\n            const zpos = aabb[5] - p[2];\n\n            diagVec[0] += (xneg > xpos) ? xneg : xpos;\n            diagVec[1] += (yneg > ypos) ? yneg : ypos;\n            diagVec[2] += (zneg > zpos) ? zneg : zpos;\n\n            return Math.abs(math.lenVec3(diagVec));\n        };\n    }))(),\n\n    /**\n     * Gets the center of an AABB.\n     *\n     * @private\n     */\n    getAABB3Center(aabb, dest) {\n        const r = dest || math.vec3();\n\n        r[0] = (aabb[0] + aabb[3]) / 2;\n        r[1] = (aabb[1] + aabb[4]) / 2;\n        r[2] = (aabb[2] + aabb[5]) / 2;\n\n        return r;\n    },\n\n    /**\n     * Gets the center of a 2D AABB.\n     *\n     * @private\n     */\n    getAABB2Center(aabb, dest) {\n        const r = dest || math.vec2();\n\n        r[0] = (aabb[2] + aabb[0]) / 2;\n        r[1] = (aabb[3] + aabb[1]) / 2;\n\n        return r;\n    },\n\n    /**\n     * Collapses a 3D axis-aligned boundary, ready to expand to fit 3D points.\n     * Creates new AABB if none supplied.\n     *\n     * @private\n     */\n    collapseAABB3(aabb = math.AABB3()) {\n        aabb[0] = math.MAX_DOUBLE;\n        aabb[1] = math.MAX_DOUBLE;\n        aabb[2] = math.MAX_DOUBLE;\n        aabb[3] = -math.MAX_DOUBLE;\n        aabb[4] = -math.MAX_DOUBLE;\n        aabb[5] = -math.MAX_DOUBLE;\n\n        return aabb;\n    },\n\n    /**\n     * Converts an axis-aligned 3D boundary into an oriented boundary consisting of\n     * an array of eight 3D positions, one for each corner of the boundary.\n     *\n     * @private\n     */\n    AABB3ToOBB3(aabb, obb = math.OBB3()) {\n        obb[0] = aabb[0];\n        obb[1] = aabb[1];\n        obb[2] = aabb[2];\n        obb[3] = 1;\n\n        obb[4] = aabb[3];\n        obb[5] = aabb[1];\n        obb[6] = aabb[2];\n        obb[7] = 1;\n\n        obb[8] = aabb[3];\n        obb[9] = aabb[4];\n        obb[10] = aabb[2];\n        obb[11] = 1;\n\n        obb[12] = aabb[0];\n        obb[13] = aabb[4];\n        obb[14] = aabb[2];\n        obb[15] = 1;\n\n        obb[16] = aabb[0];\n        obb[17] = aabb[1];\n        obb[18] = aabb[5];\n        obb[19] = 1;\n\n        obb[20] = aabb[3];\n        obb[21] = aabb[1];\n        obb[22] = aabb[5];\n        obb[23] = 1;\n\n        obb[24] = aabb[3];\n        obb[25] = aabb[4];\n        obb[26] = aabb[5];\n        obb[27] = 1;\n\n        obb[28] = aabb[0];\n        obb[29] = aabb[4];\n        obb[30] = aabb[5];\n        obb[31] = 1;\n\n        return obb;\n    },\n\n    /**\n     * Finds the minimum axis-aligned 3D boundary enclosing the homogeneous 3D points (x,y,z,w) given in a flattened array.\n     *\n     * @private\n     */\n    positions3ToAABB3: ((() => {\n\n        const p = new FloatArrayType(3);\n\n        return (positions, aabb, positionsDecodeMatrix) => {\n            aabb = aabb || math.AABB3();\n\n            let xmin = math.MAX_DOUBLE;\n            let ymin = math.MAX_DOUBLE;\n            let zmin = math.MAX_DOUBLE;\n            let xmax = -math.MAX_DOUBLE;\n            let ymax = -math.MAX_DOUBLE;\n            let zmax = -math.MAX_DOUBLE;\n\n            let x;\n            let y;\n            let z;\n\n            for (let i = 0, len = positions.length; i < len; i += 3) {\n\n                if (positionsDecodeMatrix) {\n\n                    p[0] = positions[i + 0];\n                    p[1] = positions[i + 1];\n                    p[2] = positions[i + 2];\n\n                    math.decompressPosition(p, positionsDecodeMatrix, p);\n\n                    x = p[0];\n                    y = p[1];\n                    z = p[2];\n\n                } else {\n                    x = positions[i + 0];\n                    y = positions[i + 1];\n                    z = positions[i + 2];\n                }\n\n                if (x < xmin) {\n                    xmin = x;\n                }\n\n                if (y < ymin) {\n                    ymin = y;\n                }\n\n                if (z < zmin) {\n                    zmin = z;\n                }\n\n                if (x > xmax) {\n                    xmax = x;\n                }\n\n                if (y > ymax) {\n                    ymax = y;\n                }\n\n                if (z > zmax) {\n                    zmax = z;\n                }\n            }\n\n            aabb[0] = xmin;\n            aabb[1] = ymin;\n            aabb[2] = zmin;\n            aabb[3] = xmax;\n            aabb[4] = ymax;\n            aabb[5] = zmax;\n\n            return aabb;\n        };\n    }))(),\n\n    /**\n     * Finds the minimum axis-aligned 3D boundary enclosing the homogeneous 3D points (x,y,z,w) given in a flattened array.\n     *\n     * @private\n     */\n    OBB3ToAABB3(obb, aabb = math.AABB3()) {\n        let xmin = math.MAX_DOUBLE;\n        let ymin = math.MAX_DOUBLE;\n        let zmin = math.MAX_DOUBLE;\n        let xmax = -math.MAX_DOUBLE;\n        let ymax = -math.MAX_DOUBLE;\n        let zmax = -math.MAX_DOUBLE;\n\n        let x;\n        let y;\n        let z;\n\n        for (let i = 0, len = obb.length; i < len; i += 4) {\n\n            x = obb[i + 0];\n            y = obb[i + 1];\n            z = obb[i + 2];\n\n            if (x < xmin) {\n                xmin = x;\n            }\n\n            if (y < ymin) {\n                ymin = y;\n            }\n\n            if (z < zmin) {\n                zmin = z;\n            }\n\n            if (x > xmax) {\n                xmax = x;\n            }\n\n            if (y > ymax) {\n                ymax = y;\n            }\n\n            if (z > zmax) {\n                zmax = z;\n            }\n        }\n\n        aabb[0] = xmin;\n        aabb[1] = ymin;\n        aabb[2] = zmin;\n        aabb[3] = xmax;\n        aabb[4] = ymax;\n        aabb[5] = zmax;\n\n        return aabb;\n    },\n\n    /**\n     * Finds the minimum axis-aligned 3D boundary enclosing the given 3D points.\n     *\n     * @private\n     */\n    points3ToAABB3(points, aabb = math.AABB3()) {\n        let xmin = math.MAX_DOUBLE;\n        let ymin = math.MAX_DOUBLE;\n        let zmin = math.MAX_DOUBLE;\n        let xmax = -math.MAX_DOUBLE;\n        let ymax = -math.MAX_DOUBLE;\n        let zmax = -math.MAX_DOUBLE;\n\n        let x;\n        let y;\n        let z;\n\n        for (let i = 0, len = points.length; i < len; i++) {\n\n            x = points[i][0];\n            y = points[i][1];\n            z = points[i][2];\n\n            if (x < xmin) {\n                xmin = x;\n            }\n\n            if (y < ymin) {\n                ymin = y;\n            }\n\n            if (z < zmin) {\n                zmin = z;\n            }\n\n            if (x > xmax) {\n                xmax = x;\n            }\n\n            if (y > ymax) {\n                ymax = y;\n            }\n\n            if (z > zmax) {\n                zmax = z;\n            }\n        }\n\n        aabb[0] = xmin;\n        aabb[1] = ymin;\n        aabb[2] = zmin;\n        aabb[3] = xmax;\n        aabb[4] = ymax;\n        aabb[5] = zmax;\n\n        return aabb;\n    },\n\n    /**\n     * Finds the minimum boundary sphere enclosing the given 3D points.\n     *\n     * @private\n     */\n    points3ToSphere3: ((() => {\n\n        const tempVec3 = new FloatArrayType(3);\n\n        return (points, sphere) => {\n\n            sphere = sphere || math.vec4();\n\n            let x = 0;\n            let y = 0;\n            let z = 0;\n\n            let i;\n            const numPoints = points.length;\n\n            for (i = 0; i < numPoints; i++) {\n                x += points[i][0];\n                y += points[i][1];\n                z += points[i][2];\n            }\n\n            sphere[0] = x / numPoints;\n            sphere[1] = y / numPoints;\n            sphere[2] = z / numPoints;\n\n            let radius = 0;\n            let dist;\n\n            for (i = 0; i < numPoints; i++) {\n\n                dist = Math.abs(math.lenVec3(math.subVec3(points[i], sphere, tempVec3)));\n\n                if (dist > radius) {\n                    radius = dist;\n                }\n            }\n\n            sphere[3] = radius;\n\n            return sphere;\n        };\n    }))(),\n\n    /**\n     * Finds the minimum boundary sphere enclosing the given 3D positions.\n     *\n     * @private\n     */\n    positions3ToSphere3: ((() => {\n\n        const tempVec3a = new FloatArrayType(3);\n        const tempVec3b = new FloatArrayType(3);\n\n        return (positions, sphere) => {\n\n            sphere = sphere || math.vec4();\n\n            let x = 0;\n            let y = 0;\n            let z = 0;\n\n            let i;\n            const lenPositions = positions.length;\n            let radius = 0;\n\n            for (i = 0; i < lenPositions; i += 3) {\n                x += positions[i];\n                y += positions[i + 1];\n                z += positions[i + 2];\n            }\n\n            const numPositions = lenPositions / 3;\n\n            sphere[0] = x / numPositions;\n            sphere[1] = y / numPositions;\n            sphere[2] = z / numPositions;\n\n            let dist;\n\n            for (i = 0; i < lenPositions; i += 3) {\n\n                tempVec3a[0] = positions[i];\n                tempVec3a[1] = positions[i + 1];\n                tempVec3a[2] = positions[i + 2];\n\n                dist = Math.abs(math.lenVec3(math.subVec3(tempVec3a, sphere, tempVec3b)));\n\n                if (dist > radius) {\n                    radius = dist;\n                }\n            }\n\n            sphere[3] = radius;\n\n            return sphere;\n        };\n    }))(),\n\n    /**\n     * Finds the minimum boundary sphere enclosing the given 3D points.\n     *\n     * @private\n     */\n    OBB3ToSphere3: ((() => {\n\n        const point = new FloatArrayType(3);\n        const tempVec3 = new FloatArrayType(3);\n\n        return (points, sphere) => {\n\n            sphere = sphere || math.vec4();\n\n            let x = 0;\n            let y = 0;\n            let z = 0;\n\n            let i;\n            const lenPoints = points.length;\n            const numPoints = lenPoints / 4;\n\n            for (i = 0; i < lenPoints; i += 4) {\n                x += points[i + 0];\n                y += points[i + 1];\n                z += points[i + 2];\n            }\n\n            sphere[0] = x / numPoints;\n            sphere[1] = y / numPoints;\n            sphere[2] = z / numPoints;\n\n            let radius = 0;\n            let dist;\n\n            for (i = 0; i < lenPoints; i += 4) {\n\n                point[0] = points[i + 0];\n                point[1] = points[i + 1];\n                point[2] = points[i + 2];\n\n                dist = Math.abs(math.lenVec3(math.subVec3(point, sphere, tempVec3)));\n\n                if (dist > radius) {\n                    radius = dist;\n                }\n            }\n\n            sphere[3] = radius;\n\n            return sphere;\n        };\n    }))(),\n\n    /**\n     * Gets the center of a bounding sphere.\n     *\n     * @private\n     */\n    getSphere3Center(sphere, dest = math.vec3()) {\n        dest[0] = sphere[0];\n        dest[1] = sphere[1];\n        dest[2] = sphere[2];\n\n        return dest;\n    },\n\n    /**\n     * Expands the first axis-aligned 3D boundary to enclose the second, if required.\n     *\n     * @private\n     */\n    expandAABB3(aabb1, aabb2) {\n\n        if (aabb1[0] > aabb2[0]) {\n            aabb1[0] = aabb2[0];\n        }\n\n        if (aabb1[1] > aabb2[1]) {\n            aabb1[1] = aabb2[1];\n        }\n\n        if (aabb1[2] > aabb2[2]) {\n            aabb1[2] = aabb2[2];\n        }\n\n        if (aabb1[3] < aabb2[3]) {\n            aabb1[3] = aabb2[3];\n        }\n\n        if (aabb1[4] < aabb2[4]) {\n            aabb1[4] = aabb2[4];\n        }\n\n        if (aabb1[5] < aabb2[5]) {\n            aabb1[5] = aabb2[5];\n        }\n\n        return aabb1;\n    },\n\n    /**\n     * Expands an axis-aligned 3D boundary to enclose the given point, if needed.\n     *\n     * @private\n     */\n    expandAABB3Point3(aabb, p) {\n\n        if (aabb[0] > p[0]) {\n            aabb[0] = p[0];\n        }\n\n        if (aabb[1] > p[1]) {\n            aabb[1] = p[1];\n        }\n\n        if (aabb[2] > p[2]) {\n            aabb[2] = p[2];\n        }\n\n        if (aabb[3] < p[0]) {\n            aabb[3] = p[0];\n        }\n\n        if (aabb[4] < p[1]) {\n            aabb[4] = p[1];\n        }\n\n        if (aabb[5] < p[2]) {\n            aabb[5] = p[2];\n        }\n\n        return aabb;\n    },\n\n    /**\n     * Calculates the normal vector of a triangle.\n     *\n     * @private\n     */\n    triangleNormal(a, b, c, normal = math.vec3()) {\n        const p1x = b[0] - a[0];\n        const p1y = b[1] - a[1];\n        const p1z = b[2] - a[2];\n\n        const p2x = c[0] - a[0];\n        const p2y = c[1] - a[1];\n        const p2z = c[2] - a[2];\n\n        const p3x = p1y * p2z - p1z * p2y;\n        const p3y = p1z * p2x - p1x * p2z;\n        const p3z = p1x * p2y - p1y * p2x;\n\n        const mag = Math.sqrt(p3x * p3x + p3y * p3y + p3z * p3z);\n        if (mag === 0) {\n            normal[0] = 0;\n            normal[1] = 0;\n            normal[2] = 0;\n        } else {\n            normal[0] = p3x / mag;\n            normal[1] = p3y / mag;\n            normal[2] = p3z / mag;\n        }\n\n        return normal\n    }\n};\n\nexport {math};","import {math} from \"../../lib/math.js\";\n\nfunction quantizePositions (positions, lenPositions, aabb, quantizedPositions) {\n    const xmin = aabb[0];\n    const ymin = aabb[1];\n    const zmin = aabb[2];\n    const xwid = aabb[3] - xmin;\n    const ywid = aabb[4] - ymin;\n    const zwid = aabb[5] - zmin;\n    const maxInt = 65535;\n    const xMultiplier = maxInt / xwid;\n    const yMultiplier = maxInt / ywid;\n    const zMultiplier = maxInt / zwid;\n    const verify = (num) => num >= 0 ? num : 0;\n    for (let i = 0; i < lenPositions; i += 3) {\n        quantizedPositions[i + 0] = Math.max(0, Math.min(65535,Math.floor(verify(positions[i + 0] - xmin) * xMultiplier)));\n        quantizedPositions[i + 1] = Math.max(0, Math.min(65535,Math.floor(verify(positions[i + 1] - ymin) * yMultiplier)));\n        quantizedPositions[i + 2] = Math.max(0, Math.min(65535,Math.floor(verify(positions[i + 2] - zmin) * zMultiplier)));\n    }\n}\n\nfunction compressPosition(p, aabb, q) {\n    const multiplier = new Float32Array([\n        aabb[3] !== aabb[0] ? 65535 / (aabb[3] - aabb[0]) : 0,\n        aabb[4] !== aabb[1] ? 65535 / (aabb[4] - aabb[1]) : 0,\n        aabb[5] !== aabb[2] ? 65535 / (aabb[5] - aabb[2]) : 0\n    ]);\n    q[0] = Math.max(0, Math.min(65535, Math.floor((p[0] - aabb[0]) * multiplier[0])));\n    q[1] = Math.max(0, Math.min(65535, Math.floor((p[1] - aabb[1]) * multiplier[1])));\n    q[2] = Math.max(0, Math.min(65535, Math.floor((p[2] - aabb[2]) * multiplier[2])));\n}\n\nvar createPositionsDecodeMatrix = (function () {\n    const translate = math.mat4();\n    const scale = math.mat4();\n    return function (aabb, positionsDecodeMatrix) {\n        positionsDecodeMatrix = positionsDecodeMatrix || math.mat4();\n        const xmin = aabb[0];\n        const ymin = aabb[1];\n        const zmin = aabb[2];\n        const xwid = aabb[3] - xmin;\n        const ywid = aabb[4] - ymin;\n        const zwid = aabb[5] - zmin;\n        const maxInt = 65535;\n        math.identityMat4(translate);\n        math.translationMat4v(aabb, translate);\n        math.identityMat4(scale);\n        math.scalingMat4v([xwid / maxInt, ywid / maxInt, zwid / maxInt], scale);\n        math.mulMat4(translate, scale, positionsDecodeMatrix);\n        return positionsDecodeMatrix;\n    };\n})();\n\nfunction transformAndOctEncodeNormals(modelNormalMatrix, normals, lenNormals, compressedNormals, lenCompressedNormals) {\n    // http://jcgt.org/published/0003/02/01/\n    let oct, dec, best, currentCos, bestCos;\n    let i, ei;\n    let localNormal = math.vec3();\n    let worldNormal =  math.vec3();\n    for (i = 0; i < lenNormals; i += 3) {\n        localNormal[0] = normals[i];\n        localNormal[1] = normals[i + 1];\n        localNormal[2] = normals[i + 2];\n\n        math.transformVec3(modelNormalMatrix, localNormal, worldNormal);\n        math.normalizeVec3(worldNormal, worldNormal);\n\n        // Test various combinations of ceil and floor to minimize rounding errors\n        best = oct = octEncodeVec3(worldNormal, 0, \"floor\", \"floor\");\n        dec = octDecodeVec2(oct);\n        currentCos = bestCos = dot(worldNormal, 0, dec);\n        oct = octEncodeVec3(worldNormal, 0, \"ceil\", \"floor\");\n        dec = octDecodeVec2(oct);\n        currentCos = dot(worldNormal, 0, dec);\n        if (currentCos > bestCos) {\n            best = oct;\n            bestCos = currentCos;\n        }\n        oct = octEncodeVec3(worldNormal, 0, \"floor\", \"ceil\");\n        dec = octDecodeVec2(oct);\n        currentCos = dot(worldNormal, 0, dec);\n        if (currentCos > bestCos) {\n            best = oct;\n            bestCos = currentCos;\n        }\n        oct = octEncodeVec3(worldNormal, 0, \"ceil\", \"ceil\");\n        dec = octDecodeVec2(oct);\n        currentCos = dot(worldNormal, 0, dec);\n        if (currentCos > bestCos) {\n            best = oct;\n            bestCos = currentCos;\n        }\n        compressedNormals[lenCompressedNormals + i + 0] = best[0];\n        compressedNormals[lenCompressedNormals + i + 1] = best[1];\n        compressedNormals[lenCompressedNormals + i + 2] = 0.0; // Unused\n    }\n    lenCompressedNormals += lenNormals;\n    return lenCompressedNormals;\n}\n\nfunction octEncodeNormals(normals, lenNormals, compressedNormals, lenCompressedNormals) { // http://jcgt.org/published/0003/02/01/\n    let oct, dec, best, currentCos, bestCos;\n    for (let i = 0; i < lenNormals; i += 3) {\n        // Test various combinations of ceil and floor to minimize rounding errors\n        best = oct = octEncodeVec3(normals, i, \"floor\", \"floor\");\n        dec = octDecodeVec2(oct);\n        currentCos = bestCos = dot(normals, i, dec);\n        oct = octEncodeVec3(normals, i, \"ceil\", \"floor\");\n        dec = octDecodeVec2(oct);\n        currentCos = dot(normals, i, dec);\n        if (currentCos > bestCos) {\n            best = oct;\n            bestCos = currentCos;\n        }\n        oct = octEncodeVec3(normals, i, \"floor\", \"ceil\");\n        dec = octDecodeVec2(oct);\n        currentCos = dot(normals, i, dec);\n        if (currentCos > bestCos) {\n            best = oct;\n            bestCos = currentCos;\n        }\n        oct = octEncodeVec3(normals, i, \"ceil\", \"ceil\");\n        dec = octDecodeVec2(oct);\n        currentCos = dot(normals, i, dec);\n        if (currentCos > bestCos) {\n            best = oct;\n            bestCos = currentCos;\n        }\n        compressedNormals[lenCompressedNormals + i + 0] = best[0];\n        compressedNormals[lenCompressedNormals + i + 1] = best[1];\n        compressedNormals[lenCompressedNormals + i + 2] = 0.0; // Unused\n    }\n    lenCompressedNormals += lenNormals;\n    return lenCompressedNormals;\n}\n\n/**\n * @private\n */\nfunction octEncodeVec3(array, i, xfunc, yfunc) { // Oct-encode single normal vector in 2 bytes\n    let x = array[i] / (Math.abs(array[i]) + Math.abs(array[i + 1]) + Math.abs(array[i + 2]));\n    let y = array[i + 1] / (Math.abs(array[i]) + Math.abs(array[i + 1]) + Math.abs(array[i + 2]));\n    if (array[i + 2] < 0) {\n        let tempx = (1 - Math.abs(y)) * (x >= 0 ? 1 : -1);\n        let tempy = (1 - Math.abs(x)) * (y >= 0 ? 1 : -1);\n        x = tempx;\n        y = tempy;\n    }\n    return new Int8Array([\n        Math[xfunc](x * 127.5 + (x < 0 ? -1 : 0)),\n        Math[yfunc](y * 127.5 + (y < 0 ? -1 : 0))\n    ]);\n}\n\n/**\n * Decode an oct-encoded normal\n */\nfunction octDecodeVec2(oct) {\n    let x = oct[0];\n    let y = oct[1];\n    x /= x < 0 ? 127 : 128;\n    y /= y < 0 ? 127 : 128;\n    const z = 1 - Math.abs(x) - Math.abs(y);\n    if (z < 0) {\n        x = (1 - Math.abs(y)) * (x >= 0 ? 1 : -1);\n        y = (1 - Math.abs(x)) * (y >= 0 ? 1 : -1);\n    }\n    const length = Math.sqrt(x * x + y * y + z * z);\n    return [\n        x / length,\n        y / length,\n        z / length\n    ];\n}\n\n/**\n * Dot product of a normal in an array against a candidate decoding\n * @private\n */\nfunction dot(array, i, vec3) {\n    return array[i] * vec3[0] + array[i + 1] * vec3[1] + array[i + 2] * vec3[2];\n}\n\n/**\n * @private\n */\nconst geometryCompression = {\n    quantizePositions,\n    compressPosition,\n    createPositionsDecodeMatrix,\n    transformAndOctEncodeNormals,\n    octEncodeNormals,\n};\n\nexport {geometryCompression}","/*----------------------------------------------------------------------------------------------------------------------\n * NOTE: The values of these constants must match those within xeokit-sdk\n *--------------------------------------------------------------------------------------------------------------------*/\n\n/**\n * Texture wrapping mode in which the texture repeats to infinity.\n */\nexport const RepeatWrapping = 1000;\n\n/**\n * Texture wrapping mode in which the last pixel of the texture stretches to the edge of the mesh.\n */\nexport const ClampToEdgeWrapping = 1001;\n\n/**\n * Texture wrapping mode in which the texture repeats to infinity, mirroring on each repeat.\n */\nexport const MirroredRepeatWrapping = 1002;\n\n/**\n * Texture magnification and minification filter that returns the nearest texel to the given sample coordinates.\n */\nexport const NearestFilter = 1003;\n\n/**\n * Texture minification filter that chooses the mipmap that most closely matches the size of the pixel being textured and returns the nearest texel to the given sample coordinates.\n */\nexport const NearestMipMapNearestFilter = 1004;\n\n/**\n * Texture minification filter that chooses the mipmap that most closely matches the size of the pixel being textured\n * and returns the nearest texel to the given sample coordinates.\n */\nexport const NearestMipmapNearestFilter = 1004;\n\n/**\n * Texture minification filter that chooses two mipmaps that most closely match the size of the pixel being textured\n * and returns the nearest texel to the center of the pixel at the given sample coordinates.\n */\nexport const NearestMipmapLinearFilter = 1005;\n\n/**\n * Texture minification filter that chooses two mipmaps that most closely match the size of the pixel being textured\n * and returns the nearest texel to the center of the pixel at the given sample coordinates.\n */\nexport const NearestMipMapLinearFilter = 1005;\n\n/**\n * Texture magnification and minification filter that returns the weighted average of the four nearest texels to the given sample coordinates.\n */\nexport const LinearFilter = 1006;\n\n/**\n * Texture minification filter that chooses the mipmap that most closely matches the size of the pixel being textured and\n * returns the weighted average of the four nearest texels to the given sample coordinates.\n */\nexport const LinearMipmapNearestFilter = 1007;\n\n/**\n * Texture minification filter that chooses the mipmap that most closely matches the size of the pixel being textured and\n * returns the weighted average of the four nearest texels to the given sample coordinates.\n */\nexport const LinearMipMapNearestFilter = 1007;\n\n/**\n * Texture minification filter that chooses two mipmaps that most closely match the size of the pixel being textured,\n * finds within each mipmap the weighted average of the nearest texel to the center of the pixel, then returns the\n * weighted average of those two values.\n */\nexport const LinearMipmapLinearFilter = 1008;\n\n/**\n * Texture minification filter that chooses two mipmaps that most closely match the size of the pixel being textured,\n * finds within each mipmap the weighted average of the nearest texel to the center of the pixel, then returns the\n * weighted average of those two values.\n */\nexport const LinearMipMapLinearFilter = 1008;\n\n/**\n * Media type for GIF images.\n */\nexport const GIFMediaType = 10000;\n\n/**\n * Media type for JPEG images.\n */\nexport const JPEGMediaType = 10001;\n\n/**\n * Media type for PNG images.\n */\nexport const PNGMediaType = 10002;","import {math} from \"../../lib/math.js\";\n\n/**\n * @private\n */\nconst buildEdgeIndices = (function () {\n\n    const uniquePositions = [];\n    const indicesLookup = [];\n    const indicesReverseLookup = [];\n    const weldedIndices = [];\n\n// TODO: Optimize with caching, but need to cater to both compressed and uncompressed positions\n\n    const faces = [];\n    let numFaces = 0;\n    const compa = new Uint16Array(3);\n    const compb = new Uint16Array(3);\n    const compc = new Uint16Array(3);\n    const a = math.vec3();\n    const b = math.vec3();\n    const c = math.vec3();\n    const cb = math.vec3();\n    const ab = math.vec3();\n    const cross = math.vec3();\n    const normal = math.vec3();\n    const inverseNormal = math.vec3();\n\n    function weldVertices(positions, indices) {\n        const positionsMap = {}; // Hashmap for looking up vertices by position coordinates (and making sure they are unique)\n        let vx;\n        let vy;\n        let vz;\n        let key;\n        const precisionPoints = 4; // number of decimal points, e.g. 4 for epsilon of 0.0001\n        const precision = Math.pow(10, precisionPoints);\n        let i;\n        let len;\n        let lenUniquePositions = 0;\n        for (i = 0, len = positions.length; i < len; i += 3) {\n            vx = positions[i];\n            vy = positions[i + 1];\n            vz = positions[i + 2];\n            key = Math.round(vx * precision) + '_' + Math.round(vy * precision) + '_' + Math.round(vz * precision);\n            if (positionsMap[key] === undefined) {\n                positionsMap[key] = lenUniquePositions / 3;\n                uniquePositions[lenUniquePositions++] = vx;\n                uniquePositions[lenUniquePositions++] = vy;\n                uniquePositions[lenUniquePositions++] = vz;\n            }\n            indicesLookup[i / 3] = positionsMap[key];\n        }\n        for (i = 0, len = indices.length; i < len; i++) {\n            weldedIndices[i] = indicesLookup[indices[i]];\n            indicesReverseLookup[weldedIndices[i]] = indices[i];\n        }\n    }\n\n    function buildFaces(numIndices, positionsDecodeMatrix) {\n        numFaces = 0;\n        for (let i = 0, len = numIndices; i < len; i += 3) {\n            const ia = ((weldedIndices[i]) * 3);\n            const ib = ((weldedIndices[i + 1]) * 3);\n            const ic = ((weldedIndices[i + 2]) * 3);\n            if (positionsDecodeMatrix) {\n                compa[0] = uniquePositions[ia];\n                compa[1] = uniquePositions[ia + 1];\n                compa[2] = uniquePositions[ia + 2];\n                compb[0] = uniquePositions[ib];\n                compb[1] = uniquePositions[ib + 1];\n                compb[2] = uniquePositions[ib + 2];\n                compc[0] = uniquePositions[ic];\n                compc[1] = uniquePositions[ic + 1];\n                compc[2] = uniquePositions[ic + 2];\n                // Decode\n                math.decompressPosition(compa, positionsDecodeMatrix, a);\n                math.decompressPosition(compb, positionsDecodeMatrix, b);\n                math.decompressPosition(compc, positionsDecodeMatrix, c);\n            } else {\n                a[0] = uniquePositions[ia];\n                a[1] = uniquePositions[ia + 1];\n                a[2] = uniquePositions[ia + 2];\n                b[0] = uniquePositions[ib];\n                b[1] = uniquePositions[ib + 1];\n                b[2] = uniquePositions[ib + 2];\n                c[0] = uniquePositions[ic];\n                c[1] = uniquePositions[ic + 1];\n                c[2] = uniquePositions[ic + 2];\n            }\n            math.subVec3(c, b, cb);\n            math.subVec3(a, b, ab);\n            math.cross3Vec3(cb, ab, cross);\n            math.normalizeVec3(cross, normal);\n            const face = faces[numFaces] || (faces[numFaces] = {normal: math.vec3()});\n            face.normal[0] = normal[0];\n            face.normal[1] = normal[1];\n            face.normal[2] = normal[2];\n            numFaces++;\n        }\n    }\n\n    return function (positions, indices, positionsDecodeMatrix, edgeThreshold) {\n        weldVertices(positions, indices);\n        buildFaces(indices.length, positionsDecodeMatrix);\n        const edgeIndices = [];\n        const thresholdDot = Math.cos(math.DEGTORAD * edgeThreshold);\n        const edges = {};\n        let edge1;\n        let edge2;\n        let index1;\n        let index2;\n        let key;\n        let largeIndex = false;\n        let edge;\n        let normal1;\n        let normal2;\n        let dot;\n        let ia;\n        let ib;\n        for (let i = 0, len = indices.length; i < len; i += 3) {\n            const faceIndex = i / 3;\n            for (let j = 0; j < 3; j++) {\n                edge1 = weldedIndices[i + j];\n                edge2 = weldedIndices[i + ((j + 1) % 3)];\n                index1 = Math.min(edge1, edge2);\n                index2 = Math.max(edge1, edge2);\n                key = index1 + ',' + index2;\n                if (edges[key] === undefined) {\n                    edges[key] = {\n                        index1: index1,\n                        index2: index2,\n                        face1: faceIndex,\n                        face2: undefined,\n                    };\n                } else {\n                    edges[key].face2 = faceIndex;\n                }\n            }\n        }\n        for (key in edges) {\n            edge = edges[key];\n            // an edge is only rendered if the angle (in degrees) between the face normals of the adjoining faces exceeds this value. default = 1 degree.\n            if (edge.face2 !== undefined) {\n                normal1 = faces[edge.face1].normal;\n                normal2 = faces[edge.face2].normal;\n                inverseNormal[0] = -normal2[0];\n                inverseNormal[1] = -normal2[1];\n                inverseNormal[2] = -normal2[2];\n                dot = Math.abs(math.dotVec3(normal1, normal2));\n                const dot2 = Math.abs(math.dotVec3(normal1, inverseNormal));\n                if (dot > thresholdDot && dot2 > thresholdDot) {\n                    continue;\n                }\n            }\n            ia = indicesReverseLookup[edge.index1];\n            ib = indicesReverseLookup[edge.index2];\n            if (!largeIndex && ia > 65535 || ib > 65535) {\n                largeIndex = true;\n            }\n            edgeIndices.push(ia);\n            edgeIndices.push(ib);\n        }\n        return (largeIndex) ? new Uint32Array(edgeIndices) : new Uint16Array(edgeIndices);\n    };\n})();\n\n\nexport {buildEdgeIndices};","/**\n * Uses edge adjacency counts to identify if the given triangle mesh can be rendered with backface culling enabled.\n *\n * If all edges are connected to exactly two triangles, then the mesh will likely be a closed solid, and we can safely\n * render it with backface culling enabled.\n *\n * Otherwise, the mesh is a surface, and we must render it with backface culling disabled.\n *\n * @private\n */\nconst isTriangleMeshSolid = (indices, positions, vertexIndexMapping, edges) => {\n\n    function compareIndexPositions(a, b)\n    {\n        let posA, posB;\n\n        for (let i = 0; i < 3; i++) {\n            posA = positions [a*3+i];\n            posB = positions [b*3+i];\n\n            if (posA !== posB) {\n                return posB - posA;\n            }\n        }\n\n        return 0;\n    };\n\n    // Group together indices corresponding to same position coordinates\n    let newIndices = indices.slice ().sort (compareIndexPositions);\n\n    // Calculate the mapping:\n    // - from original index in indices array\n    // - to indices-for-unique-positions\n    let uniqueVertexIndex = null;\n\n    for (let i = 0, len = newIndices.length; i < len; i++) {\n        if (i == 0 || 0 != compareIndexPositions (\n            newIndices[i],\n            newIndices[i-1],\n        )) {\n            // different position\n            uniqueVertexIndex = newIndices [i];\n        }\n\n        vertexIndexMapping [\n            newIndices[i]\n            ] = uniqueVertexIndex;\n    }\n\n    // Generate the list of edges\n    for (let i = 0, len = indices.length; i < len; i += 3) {\n\n        const a = vertexIndexMapping[indices[i]];\n        const b = vertexIndexMapping[indices[i+1]];\n        const c = vertexIndexMapping[indices[i+2]];\n\n        let a2 = a;\n        let b2 = b;\n        let c2 = c;\n\n        if (a > b && a > c) {\n            if (b > c) {\n                a2 = a;\n                b2 = b;\n                c2 = c;\n            } else {\n                a2 = a;\n                b2 = c;\n                c2 = b;\n            }\n        } else if (b > a && b > c) {\n            if (a > c) {\n                a2 = b;\n                b2 = a;\n                c2 = c;\n            } else {\n                a2 = b;\n                b2 = c;\n                c2 = a;\n            }\n        } else if (c > a && c > b) {\n            if (a > b) {\n                a2 = c;\n                b2 = a;\n                c2 = b;\n            } else {\n                a2 = c;\n                b2 = b;\n                c2 = a;\n            }\n        }\n\n        edges[i+0] = [\n            a2, b2\n        ];\n        edges[i+1] = [\n            b2, c2\n        ];\n\n        if (a2 > c2) {\n            const temp = c2;\n            c2 = a2;\n            a2 = temp;\n        }\n\n        edges[i+2] = [\n            c2, a2\n        ];\n    }\n\n    // Group semantically equivalent edgdes together\n    function compareEdges (e1, e2) {\n        let a, b;\n\n        for (let i = 0; i < 2; i++) {\n            a = e1[i];\n            b = e2[i];\n\n            if (b !== a) {\n                return b - a;\n            }\n        }\n\n        return 0;\n    }\n\n    edges = edges.slice(0, indices.length);\n\n    edges.sort (compareEdges);\n\n    // Make sure each edge is used exactly twice\n    let sameEdgeCount = 0;\n\n    for (let i = 0; i < edges.length; i++)\n    {\n        if (i === 0 || 0 !== compareEdges (\n            edges[i], edges[i-1]\n        )) {\n            // different edge\n            if (0 !== i && sameEdgeCount !== 2)\n            {\n                return false;\n            }\n\n            sameEdgeCount = 1;\n        }\n        else\n        {\n            // same edge\n            sameEdgeCount++;\n        }\n    }\n\n    if (edges.length > 0 && sameEdgeCount !== 2)\n    {\n        return false;\n    }\n\n    // Each edge is used exactly twice, this is a\n    // watertight surface and hence a solid geometry.\n    return true;\n};\n\nexport {isTriangleMeshSolid};","/**\n * Represents the usage of a {@link XKTGeometry} by an {@link XKTEntity}.\n *\n * * Created by {@link XKTModel#createEntity}\n * * Stored in {@link XKTEntity#meshes} and {@link XKTModel#meshesList}\n * * Has an {@link XKTGeometry}, and an optional {@link XKTTextureSet}, both of which it can share with other {@link XKTMesh}es\n * * Has {@link XKTMesh#color}, {@link XKTMesh#opacity}, {@link XKTMesh#metallic} and {@link XKTMesh#roughness} PBR attributes\n * @class XKTMesh\n */\nclass XKTMesh {\n\n    /**\n     * @private\n     */\n    constructor(cfg) {\n\n        /**\n         * Unique ID of this XKTMesh in {@link XKTModel#meshes}.\n         *\n         * @type {Number}\n         */\n        this.meshId = cfg.meshId;\n\n        /**\n         * Index of this XKTMesh in {@link XKTModel#meshesList};\n         *\n         * @type {Number}\n         */\n        this.meshIndex = cfg.meshIndex;\n\n        /**\n         * The 4x4 modeling transform matrix.\n         *\n         * Transform is relative to the center of the {@link XKTTile} that contains this XKTMesh's {@link XKTEntity},\n         * which is given in {@link XKTMesh#entity}.\n         *\n         * When the ````XKTEntity```` shares its {@link XKTGeometry}s with other ````XKTEntity````s, this matrix is used\n         * to transform this XKTMesh's XKTGeometry into World-space. When this XKTMesh does not share its ````XKTGeometry````,\n         * then this matrix is ignored.\n         *\n         * @type {Number[]}\n         */\n        this.matrix = cfg.matrix;\n\n        /**\n         * The instanced {@link XKTGeometry}.\n         *\n         * @type {XKTGeometry}\n         */\n        this.geometry = cfg.geometry;\n\n        /**\n         * RGB color of this XKTMesh.\n         *\n         * @type {Float32Array}\n         */\n        this.color = cfg.color || new Float32Array([1, 1, 1]);\n\n        /**\n         * PBR metallness of this XKTMesh.\n         *\n         * @type {Number}\n         */\n        this.metallic = (cfg.metallic !== null && cfg.metallic !== undefined) ? cfg.metallic : 0;\n\n        /**\n         * PBR roughness of this XKTMesh.\n         * The {@link XKTTextureSet} that defines the appearance of this XKTMesh.\n         *\n         * @type {Number}\n         * @type {XKTTextureSet}\n         */\n        this.roughness = (cfg.roughness !== null && cfg.roughness !== undefined) ? cfg.roughness : 1;\n\n        /**\n         * Opacity of this XKTMesh.\n         *\n         * @type {Number}\n         */\n        this.opacity = (cfg.opacity !== undefined && cfg.opacity !== null) ? cfg.opacity : 1.0;\n\n        /**\n         * The {@link XKTTextureSet} that defines the appearance of this XKTMesh.\n         *\n         * @type {XKTTextureSet}\n         */\n        this.textureSet = cfg.textureSet;\n\n        /**\n         * The owner {@link XKTEntity}.\n         *\n         * Set by {@link XKTModel#createEntity}.\n         *\n         * @type {XKTEntity}\n         */\n        this.entity = null; // Set after instantiation, when the Entity is known\n    }\n}\n\nexport {XKTMesh};","/**\n * An element of reusable geometry within an {@link XKTModel}.\n *\n * * Created by {@link XKTModel#createGeometry}\n * * Stored in {@link XKTModel#geometries} and {@link XKTModel#geometriesList}\n * * Referenced by {@link XKTMesh}s, which belong to {@link XKTEntity}s\n *\n * @class XKTGeometry\n */\nclass XKTGeometry {\n\n    /**\n     * @private\n     * @param {*} cfg Configuration for the XKTGeometry.\n     * @param {Number} cfg.geometryId Unique ID of the geometry in {@link XKTModel#geometries}.\n     * @param {String} cfg.primitiveType Type of this geometry - \"triangles\", \"points\" or \"lines\" so far.\n     * @param {Number} cfg.geometryIndex Index of this XKTGeometry in {@link XKTModel#geometriesList}.\n     * @param {Float64Array} cfg.positions Non-quantized 3D vertex positions.\n     * @param {Float32Array} cfg.normals Non-compressed vertex normals.\n     * @param {Uint8Array} cfg.colorsCompressed Unsigned 8-bit integer RGBA vertex colors.\n     * @param {Float32Array} cfg.uvs Non-compressed vertex UV coordinates.\n     * @param {Uint32Array} cfg.indices Indices to organize the vertex positions and normals into triangles.\n     * @param {Uint32Array} cfg.edgeIndices Indices to organize the vertex positions into edges.\n     */\n    constructor(cfg) {\n\n        /**\n         * Unique ID of this XKTGeometry in {@link XKTModel#geometries}.\n         *\n         * @type {Number}\n         */\n        this.geometryId = cfg.geometryId;\n\n        /**\n         * The type of primitive - \"triangles\" | \"points\" | \"lines\".\n         *\n         * @type {String}\n         */\n        this.primitiveType = cfg.primitiveType;\n\n        /**\n         * Index of this XKTGeometry in {@link XKTModel#geometriesList}.\n         *\n         * @type {Number}\n         */\n        this.geometryIndex = cfg.geometryIndex;\n\n        /**\n         * The number of {@link XKTMesh}s that reference this XKTGeometry.\n         *\n         * @type {Number}\n         */\n        this.numInstances = 0;\n\n        /**\n         * Non-quantized 3D vertex positions.\n         *\n         * Defined for all primitive types.\n         *\n         * @type {Float64Array}\n         */\n        this.positions = cfg.positions;\n\n        /**\n         * Quantized vertex positions.\n         *\n         * Defined for all primitive types.\n         *\n         * This array is later created from {@link XKTGeometry#positions} by {@link XKTModel#finalize}.\n         *\n         * @type {Uint16Array}\n         */\n        this.positionsQuantized = new Uint16Array(cfg.positions.length);\n\n        /**\n         * Non-compressed 3D vertex normals.\n         *\n         * Defined only for triangle primitives. Can be null if we want xeokit to auto-generate them. Ignored for points and lines.\n         *\n         * @type {Float32Array}\n         */\n        this.normals = cfg.normals;\n\n        /**\n         * Compressed vertex normals.\n         *\n         * Defined only for triangle primitives. Ignored for points and lines.\n         *\n         * This array is later created from {@link XKTGeometry#normals} by {@link XKTModel#finalize}.\n         *\n         * Will be null if {@link XKTGeometry#normals} is also null.\n         *\n         * @type {Int8Array}\n         */\n        this.normalsOctEncoded = null;\n\n        /**\n         * Compressed RGBA vertex colors.\n         *\n         * Defined only for point primitives. Ignored for triangles and lines.\n         *\n         * @type {Uint8Array}\n         */\n        this.colorsCompressed = cfg.colorsCompressed;\n\n        /**\n         * Non-compressed vertex UVs.\n         *\n         * @type {Float32Array}\n         */\n        this.uvs = cfg.uvs;\n\n        /**\n         * Compressed vertex UVs.\n         *\n         * @type {Uint16Array}\n         */\n        this.uvsCompressed = cfg.uvsCompressed;\n\n        /**\n         * Indices that organize the vertex positions and normals as triangles.\n         *\n         * Defined only for triangle and lines primitives. Ignored for points.\n         *\n         * @type {Uint32Array}\n         */\n        this.indices = cfg.indices;\n\n        /**\n         * Indices that organize the vertex positions as edges.\n         *\n         * Defined only for triangle primitives. Ignored for points and lines.\n         *\n         * @type {Uint32Array}\n         */\n        this.edgeIndices = cfg.edgeIndices;\n\n        /**\n         * When {@link XKTGeometry#primitiveType} is \"triangles\", this is ````true```` when this geometry is a watertight mesh.\n         *\n         * Defined only for triangle primitives. Ignored for points and lines.\n         *\n         * Set by {@link XKTModel#finalize}.\n         *\n         * @type {boolean}\n         */\n        this.solid = false;\n    }\n\n    /**\n     * Convenience property that is ````true```` when {@link XKTGeometry#numInstances} is greater that one.\n     * @returns {boolean}\n     */\n    get reused() {\n        return (this.numInstances > 1);\n    }\n}\n\nexport {XKTGeometry};","import {math} from \"../lib/math.js\";\n\n/**\n * An object within an {@link XKTModel}.\n *\n * * Created by {@link XKTModel#createEntity}\n * * Stored in {@link XKTModel#entities} and {@link XKTModel#entitiesList}\n * * Has one or more {@link XKTMesh}s, each having an {@link XKTGeometry}\n *\n * @class XKTEntity\n */\nclass XKTEntity {\n\n    /**\n     * @private\n     * @param entityId\n     * @param meshes\n     */\n    constructor(entityId,  meshes) {\n\n        /**\n         * Unique ID of this ````XKTEntity```` in {@link XKTModel#entities}.\n         *\n         * For a BIM model, this will be an IFC product ID.\n         *\n         * We can also use {@link XKTModel#createMetaObject} to create an {@link XKTMetaObject} to specify metadata for\n         * this ````XKTEntity````. To associate the {@link XKTMetaObject} with our {@link XKTEntity}, we give\n         * {@link XKTMetaObject#metaObjectId} the same value as {@link XKTEntity#entityId}.\n         *\n         * @type {String}\n         */\n        this.entityId = entityId;\n\n        /**\n         * Index of this ````XKTEntity```` in {@link XKTModel#entitiesList}.\n         *\n         * Set by {@link XKTModel#finalize}.\n         *\n         * @type {Number}\n         */\n        this.entityIndex = null;\n\n        /**\n         * A list of {@link XKTMesh}s that indicate which {@link XKTGeometry}s are used by this Entity.\n         *\n         * @type {XKTMesh[]}\n         */\n        this.meshes = meshes;\n\n        /**\n         * World-space axis-aligned bounding box (AABB) that encloses the {@link XKTGeometry#positions} of\n         * the {@link XKTGeometry}s that are used by this ````XKTEntity````.\n         *\n         * Set by {@link XKTModel#finalize}.\n         *\n         * @type {Float32Array}\n         */\n        this.aabb = math.AABB3();\n\n        /**\n         * Indicates if this ````XKTEntity```` shares {@link XKTGeometry}s with other {@link XKTEntity}'s.\n         *\n         * Set by {@link XKTModel#finalize}.\n         *\n         * Note that when an ````XKTEntity```` shares ````XKTGeometrys````, it shares **all** of its ````XKTGeometrys````. An ````XKTEntity````\n         * never shares only some of its ````XKTGeometrys```` - it always shares either the whole set or none at all.\n         *\n         * @type {Boolean}\n         */\n        this.hasReusedGeometries = false;\n    }\n}\n\nexport {XKTEntity};","/**\n * @desc A box-shaped 3D region within an {@link XKTModel} that contains {@link XKTEntity}s.\n *\n * * Created by {@link XKTModel#finalize}\n * * Stored in {@link XKTModel#tilesList}\n *\n * @class XKTTile\n */\nclass XKTTile {\n\n    /**\n     * Creates a new XKTTile.\n     *\n     * @private\n     * @param aabb\n     * @param entities\n     */\n    constructor(aabb, entities) {\n\n        /**\n         * Axis-aligned World-space bounding box that encloses the {@link XKTEntity}'s within this Tile.\n         *\n         * @type {Float64Array}\n         */\n        this.aabb = aabb;\n\n        /**\n         * The {@link XKTEntity}'s within this XKTTile.\n         *\n         * @type {XKTEntity[]}\n         */\n        this.entities = entities;\n    }\n}\n\nexport {XKTTile};","/**\n * A kd-Tree node, used internally by {@link XKTModel}.\n *\n * @private\n */\nclass KDNode {\n\n    /**\n     * Create a KDNode with an axis-aligned 3D World-space boundary.\n     */\n    constructor(aabb) {\n\n        /**\n         * The axis-aligned 3D World-space boundary of this KDNode.\n         *\n         * @type {Float64Array}\n         */\n        this.aabb = aabb;\n\n        /**\n         * The {@link XKTEntity}s within this KDNode.\n         */\n        this.entities = null;\n\n        /**\n         * The left child KDNode.\n         */\n        this.left = null;\n\n        /**\n         * The right child KDNode.\n         */\n        this.right = null;\n    }\n}\n\nexport {KDNode};","/**\n * A meta object within an {@link XKTModel}.\n *\n * These are plugged together into a parent-child hierarchy to represent structural\n * metadata for the {@link XKTModel}.\n *\n * The leaf XKTMetaObjects are usually associated with\n * an {@link XKTEntity}, which they do so by sharing the same ID,\n * ie. where {@link XKTMetaObject#metaObjectId} == {@link XKTEntity#entityId}.\n *\n * * Created by {@link XKTModel#createMetaObject}\n * * Stored in {@link XKTModel#metaObjects} and {@link XKTModel#metaObjectsList}\n * * Has an ID, a type, and a human-readable name\n * * May have a parent {@link XKTMetaObject}\n * * When no children, is usually associated with an {@link XKTEntity}\n *\n * @class XKTMetaObject\n */\nclass XKTMetaObject {\n\n    /**\n     * @private\n     * @param metaObjectId\n     * @param propertySetIds\n     * @param metaObjectType\n     * @param metaObjectName\n     * @param parentMetaObjectId\n     */\n    constructor(metaObjectId, propertySetIds, metaObjectType, metaObjectName, parentMetaObjectId) {\n\n        /**\n         * Unique ID of this ````XKTMetaObject```` in {@link XKTModel#metaObjects}.\n         *\n         * For a BIM model, this will be an IFC product ID.\n         *\n         * If this is a leaf XKTMetaObject, where it is not a parent to any other XKTMetaObject,\n         * then this will be equal to the ID of an {@link XKTEntity} in {@link XKTModel#entities},\n         * ie. where {@link XKTMetaObject#metaObjectId} == {@link XKTEntity#entityId}.\n         *\n         * @type {String}\n         */\n        this.metaObjectId = metaObjectId;\n\n        /**\n         * Unique ID of one or more property sets that contains additional metadata about this\n         * {@link XKTMetaObject}. The property sets can be stored in an external system, or\n         * within the {@link XKTModel}, as {@link XKTPropertySet}s within {@link XKTModel#propertySets}.\n         *\n         * @type {String[]}\n         */\n        this.propertySetIds = propertySetIds;\n\n        /**\n         * Indicates the XKTMetaObject meta object type.\n         *\n         * This defaults to \"default\".\n         *\n         * @type {string}\n         */\n        this.metaObjectType = metaObjectType;\n\n        /**\n         * Indicates the XKTMetaObject meta object name.\n         *\n         * This defaults to {@link XKTMetaObject#metaObjectId}.\n         *\n         * @type {string}\n         */\n        this.metaObjectName = metaObjectName;\n\n        /**\n         * The parent XKTMetaObject, if any.\n         *\n         * Will be null if there is no parent.\n         *\n         * @type {String}\n         */\n        this.parentMetaObjectId = parentMetaObjectId;\n    }\n}\n\nexport {XKTMetaObject};","/**\n * A property set within an {@link XKTModel}.\n *\n * These are shared among {@link XKTMetaObject}s.\n *\n * * Created by {@link XKTModel#createPropertySet}\n * * Stored in {@link XKTModel#propertySets} and {@link XKTModel#propertySetsList}\n * * Has an ID, a type, and a human-readable name\n *\n * @class XKTPropertySet\n */\nclass XKTPropertySet {\n\n    /**\n     * @private\n     */\n    constructor(propertySetId, propertySetType, propertySetName, properties) {\n\n        /**\n         * Unique ID of this ````XKTPropertySet```` in {@link XKTModel#propertySets}.\n         *\n         * @type {String}\n         */\n        this.propertySetId = propertySetId;\n\n        /**\n         * Indicates the ````XKTPropertySet````'s type.\n         *\n         * This defaults to \"default\".\n         *\n         * @type {string}\n         */\n        this.propertySetType = propertySetType;\n\n        /**\n         * Indicates the XKTPropertySet meta object name.\n         *\n         * This defaults to {@link XKTPropertySet#propertySetId}.\n         *\n         * @type {string}\n         */\n        this.propertySetName = propertySetName;\n\n        /**\n         * The properties within this ````XKTPropertySet````.\n         *\n         * @type {*[]}\n         */\n        this.properties = properties;\n    }\n}\n\nexport {XKTPropertySet};","/**\n * A texture shared by {@link XKTTextureSet}s.\n *\n * * Created by {@link XKTModel#createTexture}\n * * Stored in {@link XKTTextureSet#textures}, {@link XKTModel#textures} and {@link XKTModel#texturesList}\n *\n * @class XKTTexture\n */\nimport {RepeatWrapping, LinearMipMapNearestFilter} from \"../constants\";\n\nclass XKTTexture {\n\n    /**\n     * @private\n     */\n    constructor(cfg) {\n\n        /**\n         * Unique ID of this XKTTexture in {@link XKTModel#textures}.\n         *\n         * @type {Number}\n         */\n        this.textureId = cfg.textureId;\n\n        /**\n         * Index of this XKTTexture in {@link XKTModel#texturesList};\n         *\n         * @type {Number}\n         */\n        this.textureIndex = cfg.textureIndex;\n\n        /**\n         * Texture image data.\n         *\n         * @type {Buffer}\n         */\n        this.imageData = cfg.imageData;\n\n        /**\n         * Which material channel this texture is applied to, as determined by its {@link XKTTextureSet}s.\n         *\n         * @type {Number}\n         */\n        this.channel = null;\n\n        /**\n         * Width of this XKTTexture.\n         *\n         * @type {Number}\n         */\n        this.width = cfg.width;\n\n        /**\n         * Height of this XKTTexture.\n         *\n         * @type {Number}\n         */\n        this.height = cfg.height;\n\n        /**\n         * Texture file source.\n         *\n         * @type {String}\n         */\n        this.src = cfg.src;\n\n        /**\n         * Whether this XKTTexture is to be compressed.\n         *\n         * @type {Boolean}\n         */\n        this.compressed = (!!cfg.compressed);\n\n        /**\n         * Media type of this XKTTexture.\n         *\n         * Supported values are {@link GIFMediaType}, {@link PNGMediaType} and {@link JPEGMediaType}.\n         *\n         * Ignored for compressed textures.\n         *\n         * @type {Number}\n         */\n        this.mediaType = cfg.mediaType;\n\n        /**\n         * How the texture is sampled when a texel covers less than one pixel. Supported values\n         * are {@link LinearMipmapLinearFilter}, {@link LinearMipMapNearestFilter},\n         * {@link NearestMipMapNearestFilter}, {@link NearestMipMapLinearFilter}\n         * and {@link LinearMipMapLinearFilter}.\n         *\n         * Ignored for compressed textures.\n         *\n         * @type {Number}\n         */\n        this.minFilter = cfg.minFilter || LinearMipMapNearestFilter;\n\n        /**\n         * How the texture is sampled when a texel covers more than one pixel. Supported values\n         * are {@link LinearFilter} and {@link NearestFilter}.\n         *\n         * Ignored for compressed textures.\n         *\n         * @type {Number}\n         */\n        this.magFilter = cfg.magFilter || LinearMipMapNearestFilter;\n\n        /**\n         * S wrapping mode.\n         *\n         * Supported values are {@link ClampToEdgeWrapping},\n         * {@link MirroredRepeatWrapping} and {@link RepeatWrapping}.\n         *\n         * Ignored for compressed textures.\n         *\n         * @type {Number}\n         */\n        this.wrapS = cfg.wrapS || RepeatWrapping;\n\n        /**\n         * T wrapping mode.\n         *\n         * Supported values are {@link ClampToEdgeWrapping},\n         * {@link MirroredRepeatWrapping} and {@link RepeatWrapping}.\n         *\n         * Ignored for compressed textures.\n         *\n         * @type {Number}\n         */\n        this.wrapT = cfg.wrapT || RepeatWrapping;\n\n        /**\n         * R wrapping mode.\n         *\n         * Ignored for compressed textures.\n         *\n         * Supported values are {@link ClampToEdgeWrapping},\n         * {@link MirroredRepeatWrapping} and {@link RepeatWrapping}.\n         *\n         * @type {*|number}\n         */\n        this.wrapR = cfg.wrapR || RepeatWrapping\n    }\n}\n\nexport {XKTTexture};","/**\n * A set of textures shared by {@link XKTMesh}es.\n *\n * * Created by {@link XKTModel#createTextureSet}\n * * Registered in {@link XKTMesh#material}, {@link XKTModel#materials} and {@link XKTModel#.textureSetsList}\n *\n * @class XKTMetalRoughMaterial\n */\nclass XKTTextureSet {\n\n    /**\n     * @private\n     */\n    constructor(cfg) {\n\n        /**\n         * Unique ID of this XKTTextureSet in {@link XKTModel#materials}.\n         *\n         * @type {Number}\n         */\n        this.textureSetId = cfg.textureSetId;\n\n        /**\n         * Index of this XKTTexture in {@link XKTModel#texturesList};\n         *\n         * @type {Number}\n         */\n        this.textureSetIndex = cfg.textureSetIndex;\n\n        /**\n         * Identifies the material type.\n         *\n         * @type {Number}\n         */\n        this.materialType = cfg.materialType;\n\n        /**\n         * Index of this XKTTextureSet in {@link XKTModel#meshesList};\n         *\n         * @type {Number}\n         */\n        this.materialIndex = cfg.materialIndex;\n\n        /**\n         * The number of {@link XKTMesh}s that reference this XKTTextureSet.\n         *\n         * @type {Number}\n         */\n        this.numInstances = 0;\n\n        /**\n         * RGBA {@link XKTTexture} containing base color in RGB and opacity in A.\n         *\n         * @type {XKTTexture}\n         */\n        this.colorTexture = cfg.colorTexture;\n\n        /**\n         * RGBA {@link XKTTexture} containing metallic and roughness factors in R and G.\n         *\n         * @type {XKTTexture}\n         */\n        this.metallicRoughnessTexture = cfg.metallicRoughnessTexture;\n\n        /**\n         * RGBA {@link XKTTexture} with surface normals in RGB.\n         *\n         * @type {XKTTexture}\n         */\n        this.normalsTexture = cfg.normalsTexture;\n\n        /**\n         * RGBA {@link XKTTexture} with emissive color in RGB.\n         *\n         * @type {XKTTexture}\n         */\n        this.emissiveTexture = cfg.emissiveTexture;\n\n        /**\n         * RGBA {@link XKTTexture} with ambient occlusion factors in RGB.\n         *\n         * @type {XKTTexture}\n         */\n        this.occlusionTexture = cfg.occlusionTexture;\n    }\n}\n\nexport {XKTTextureSet};","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@loaders.gl/core\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@loaders.gl/textures\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@loaders.gl/images\");","import {math} from \"../lib/math.js\";\nimport {geometryCompression} from \"./lib/geometryCompression.js\";\nimport {buildEdgeIndices} from \"./lib/buildEdgeIndices.js\";\nimport {isTriangleMeshSolid} from \"./lib/isTriangleMeshSolid.js\";\n\nimport {XKTMesh} from './XKTMesh.js';\nimport {XKTGeometry} from './XKTGeometry.js';\nimport {XKTEntity} from './XKTEntity.js';\nimport {XKTTile} from './XKTTile.js';\nimport {KDNode} from \"./KDNode.js\";\nimport {XKTMetaObject} from \"./XKTMetaObject.js\";\nimport {XKTPropertySet} from \"./XKTPropertySet.js\";\nimport {mergeVertices} from \"../lib/mergeVertices.js\";\nimport {XKT_INFO} from \"../XKT_INFO.js\";\nimport {XKTTexture} from \"./XKTTexture\";\nimport {XKTTextureSet} from \"./XKTTextureSet\";\nimport {encode} from \"@loaders.gl/core\";\nimport {KTX2BasisWriter} from \"@loaders.gl/textures\";\nimport {ImageLoader} from '@loaders.gl/images';\nimport {load} from '@loaders.gl/core';\n\nconst tempVec4a = math.vec4([0, 0, 0, 1]);\nconst tempVec4b = math.vec4([0, 0, 0, 1]);\n\nconst tempMat4 = math.mat4();\nconst tempMat4b = math.mat4();\n\nconst kdTreeDimLength = new Float64Array(3);\n\n// XKT texture types\n\nconst COLOR_TEXTURE = 0;\nconst METALLIC_ROUGHNESS_TEXTURE = 1;\nconst NORMALS_TEXTURE = 2;\nconst EMISSIVE_TEXTURE = 3;\nconst OCCLUSION_TEXTURE = 4;\n\n// KTX2 encoding options for each texture type\n\nconst TEXTURE_ENCODING_OPTIONS = {}\nTEXTURE_ENCODING_OPTIONS[COLOR_TEXTURE] = {\n    useSRGB: true,\n    qualityLevel: 50,\n    encodeUASTC: true,\n    mipmaps: true\n};\nTEXTURE_ENCODING_OPTIONS[EMISSIVE_TEXTURE] = {\n    useSRGB: true,\n    encodeUASTC: true,\n    qualityLevel: 10,\n    mipmaps: false\n};\nTEXTURE_ENCODING_OPTIONS[METALLIC_ROUGHNESS_TEXTURE] = {\n    useSRGB: false,\n    encodeUASTC: true,\n    qualityLevel: 50,\n    mipmaps: true // Needed for GGX roughness shading\n};\nTEXTURE_ENCODING_OPTIONS[NORMALS_TEXTURE] = {\n    useSRGB: false,\n    encodeUASTC: true,\n    qualityLevel: 10,\n    mipmaps: false\n};\nTEXTURE_ENCODING_OPTIONS[OCCLUSION_TEXTURE] = {\n    useSRGB: false,\n    encodeUASTC: true,\n    qualityLevel: 10,\n    mipmaps: false\n};\n\n/**\n * A document model that represents the contents of an .XKT file.\n *\n * * An XKTModel contains {@link XKTTile}s, which spatially subdivide the model into axis-aligned, box-shaped regions.\n * * Each {@link XKTTile} contains {@link XKTEntity}s, which represent the objects within its region.\n * * Each {@link XKTEntity} has {@link XKTMesh}s, which each have a {@link XKTGeometry}. Each {@link XKTGeometry} can be shared by multiple {@link XKTMesh}s.\n * * Import models into an XKTModel using {@link parseGLTFJSONIntoXKTModel}, {@link parseIFCIntoXKTModel}, {@link parseCityJSONIntoXKTModel} etc.\n * * Build an XKTModel programmatically using {@link XKTModel#createGeometry}, {@link XKTModel#createMesh} and {@link XKTModel#createEntity}.\n * * Serialize an XKTModel to an ArrayBuffer using {@link writeXKTModelToArrayBuffer}.\n *\n * ## Usage\n *\n * See [main docs page](/docs/#javascript-api) for usage examples.\n *\n * @class XKTModel\n */\nclass XKTModel {\n\n    /**\n     * Constructs a new XKTModel.\n     *\n     * @param {*} [cfg] Configuration\n     * @param {Number} [cfg.edgeThreshold=10]\n     * @param {Number} [cfg.minTileSize=500]\n     */\n    constructor(cfg = {}) {\n\n        /**\n         * The model's ID, if available.\n         *\n         * Will be \"default\" by default.\n         *\n         * @type {String}\n         */\n        this.modelId = cfg.modelId || \"default\";\n\n        /**\n         * The project ID, if available.\n         *\n         * Will be an empty string by default.\n         *\n         * @type {String}\n         */\n        this.projectId = cfg.projectId || \"\";\n\n        /**\n         * The revision ID, if available.\n         *\n         * Will be an empty string by default.\n         *\n         * @type {String}\n         */\n        this.revisionId = cfg.revisionId || \"\";\n\n        /**\n         * The model author, if available.\n         *\n         * Will be an empty string by default.\n         *\n         * @property author\n         * @type {String}\n         */\n        this.author = cfg.author || \"\";\n\n        /**\n         * The date the model was created, if available.\n         *\n         * Will be an empty string by default.\n         *\n         * @property createdAt\n         * @type {String}\n         */\n        this.createdAt = cfg.createdAt || \"\";\n\n        /**\n         * The application that created the model, if available.\n         *\n         * Will be an empty string by default.\n         *\n         * @property creatingApplication\n         * @type {String}\n         */\n        this.creatingApplication = cfg.creatingApplication || \"\";\n\n        /**\n         * The model schema version, if available.\n         *\n         * In the case of IFC, this could be \"IFC2x3\" or \"IFC4\", for example.\n         *\n         * Will be an empty string by default.\n         *\n         * @property schema\n         * @type {String}\n         */\n        this.schema = cfg.schema || \"\";\n\n        /**\n         * The XKT format version.\n         *\n         * @property xktVersion;\n         * @type {number}\n         */\n        this.xktVersion = XKT_INFO.xktVersion;\n\n        /**\n         *\n         * @type {Number|number}\n         */\n        this.edgeThreshold = cfg.edgeThreshold || 10;\n\n        /**\n         * Minimum diagonal size of the boundary of an {@link XKTTile}.\n         *\n         * @type {Number|number}\n         */\n        this.minTileSize = cfg.minTileSize || 500;\n\n        /**\n         * Map of {@link XKTPropertySet}s within this XKTModel, each mapped to {@link XKTPropertySet#propertySetId}.\n         *\n         * Created by {@link XKTModel#createPropertySet}.\n         *\n         * @type {{String:XKTPropertySet}}\n         */\n        this.propertySets = {};\n\n        /**\n         * {@link XKTPropertySet}s within this XKTModel.\n         *\n         * Each XKTPropertySet holds its position in this list in {@link XKTPropertySet#propertySetIndex}.\n         *\n         * Created by {@link XKTModel#finalize}.\n         *\n         * @type {XKTPropertySet[]}\n         */\n        this.propertySetsList = [];\n\n        /**\n         * Map of {@link XKTMetaObject}s within this XKTModel, each mapped to {@link XKTMetaObject#metaObjectId}.\n         *\n         * Created by {@link XKTModel#createMetaObject}.\n         *\n         * @type {{String:XKTMetaObject}}\n         */\n        this.metaObjects = {};\n\n        /**\n         * {@link XKTMetaObject}s within this XKTModel.\n         *\n         * Each XKTMetaObject holds its position in this list in {@link XKTMetaObject#metaObjectIndex}.\n         *\n         * Created by {@link XKTModel#finalize}.\n         *\n         * @type {XKTMetaObject[]}\n         */\n        this.metaObjectsList = [];\n\n        /**\n         * The positions of all shared {@link XKTGeometry}s are de-quantized using this singular\n         * de-quantization matrix.\n         *\n         * This de-quantization matrix is generated from the collective Local-space boundary of the\n         * positions of all shared {@link XKTGeometry}s.\n         *\n         * @type {Float32Array}\n         */\n        this.reusedGeometriesDecodeMatrix = new Float32Array(16);\n\n        /**\n         * Map of {@link XKTGeometry}s within this XKTModel, each mapped to {@link XKTGeometry#geometryId}.\n         *\n         * Created by {@link XKTModel#createGeometry}.\n         *\n         * @type {{Number:XKTGeometry}}\n         */\n        this.geometries = {};\n\n        /**\n         * List of {@link XKTGeometry}s within this XKTModel, in the order they were created.\n         *\n         * Each XKTGeometry holds its position in this list in {@link XKTGeometry#geometryIndex}.\n         *\n         * Created by {@link XKTModel#finalize}.\n         *\n         * @type {XKTGeometry[]}\n         */\n        this.geometriesList = [];\n\n        /**\n         * Map of {@link XKTTexture}s within this XKTModel, each mapped to {@link XKTTexture#textureId}.\n         *\n         * Created by {@link XKTModel#createTexture}.\n         *\n         * @type {{Number:XKTTexture}}\n         */\n        this.textures = {};\n\n        /**\n         * List of {@link XKTTexture}s within this XKTModel, in the order they were created.\n         *\n         * Each XKTTexture holds its position in this list in {@link XKTTexture#textureIndex}.\n         *\n         * Created by {@link XKTModel#finalize}.\n         *\n         * @type {XKTTexture[]}\n         */\n        this.texturesList = [];\n\n        /**\n         * Map of {@link XKTTextureSet}s within this XKTModel, each mapped to {@link XKTTextureSet#textureSetId}.\n         *\n         * Created by {@link XKTModel#createTextureSet}.\n         *\n         * @type {{Number:XKTTextureSet}}\n         */\n        this.textureSets = {};\n\n        /**\n         * List of {@link XKTTextureSet}s within this XKTModel, in the order they were created.\n         *\n         * Each XKTTextureSet holds its position in this list in {@link XKTTextureSet#textureSetIndex}.\n         *\n         * Created by {@link XKTModel#finalize}.\n         *\n         * @type {XKTTextureSet[]}\n         */\n        this.textureSetsList = [];\n\n        /**\n         * Map of {@link XKTMesh}s within this XKTModel, each mapped to {@link XKTMesh#meshId}.\n         *\n         * Created by {@link XKTModel#createMesh}.\n         *\n         * @type {{Number:XKTMesh}}\n         */\n        this.meshes = {};\n\n        /**\n         * List of {@link XKTMesh}s within this XKTModel, in the order they were created.\n         *\n         * Each XKTMesh holds its position in this list in {@link XKTMesh#meshIndex}.\n         *\n         * Created by {@link XKTModel#finalize}.\n         *\n         * @type {XKTMesh[]}\n         */\n        this.meshesList = [];\n\n        /**\n         * Map of {@link XKTEntity}s within this XKTModel, each mapped to {@link XKTEntity#entityId}.\n         *\n         * Created by {@link XKTModel#createEntity}.\n         *\n         * @type {{String:XKTEntity}}\n         */\n        this.entities = {};\n\n        /**\n         * {@link XKTEntity}s within this XKTModel.\n         *\n         * Each XKTEntity holds its position in this list in {@link XKTEntity#entityIndex}.\n         *\n         * Created by {@link XKTModel#finalize}.\n         *\n         * @type {XKTEntity[]}\n         */\n        this.entitiesList = [];\n\n        /**\n         * {@link XKTTile}s within this XKTModel.\n         *\n         * Created by {@link XKTModel#finalize}.\n         *\n         * @type {XKTTile[]}\n         */\n        this.tilesList = [];\n\n        /**\n         * The axis-aligned 3D World-space boundary of this XKTModel.\n         *\n         * Created by {@link XKTModel#finalize}.\n         *\n         * @type {Float64Array}\n         */\n        this.aabb = math.AABB3();\n\n        /**\n         * Indicates if this XKTModel has been finalized.\n         *\n         * Set ````true```` by {@link XKTModel#finalize}.\n         *\n         * @type {boolean}\n         */\n        this.finalized = false;\n    }\n\n    /**\n     * Creates an {@link XKTPropertySet} within this XKTModel.\n     *\n     * Logs error and does nothing if this XKTModel has been finalized (see {@link XKTModel#finalized}).\n     *\n     * @param {*} params Method parameters.\n     * @param {String} params.propertySetId Unique ID for the {@link XKTPropertySet}.\n     * @param {String} [params.propertySetType=\"default\"] A meta type for the {@link XKTPropertySet}.\n     * @param {String} [params.propertySetName] Human-readable name for the {@link XKTPropertySet}. Defaults to the ````propertySetId```` parameter.\n     * @param {String[]} params.properties Properties for the {@link XKTPropertySet}.\n     * @returns {XKTPropertySet} The new {@link XKTPropertySet}.\n     */\n    createPropertySet(params) {\n\n        if (!params) {\n            throw \"Parameters expected: params\";\n        }\n\n        if (params.propertySetId === null || params.propertySetId === undefined) {\n            throw \"Parameter expected: params.propertySetId\";\n        }\n\n        if (params.properties === null || params.properties === undefined) {\n            throw \"Parameter expected: params.properties\";\n        }\n\n        if (this.finalized) {\n            console.error(\"XKTModel has been finalized, can't add more property sets\");\n            return;\n        }\n\n        if (this.propertySets[params.propertySetId]) {\n            //          console.error(\"XKTPropertySet already exists with this ID: \" + params.propertySetId);\n            return;\n        }\n\n        const propertySetId = params.propertySetId;\n        const propertySetType = params.propertySetType || \"Default\";\n        const propertySetName = params.propertySetName || params.propertySetId;\n        const properties = params.properties || [];\n\n        const propertySet = new XKTPropertySet(propertySetId, propertySetType, propertySetName, properties);\n\n        this.propertySets[propertySetId] = propertySet;\n        this.propertySetsList.push(propertySet);\n\n        return propertySet;\n    }\n\n    /**\n     * Creates an {@link XKTMetaObject} within this XKTModel.\n     *\n     * Logs error and does nothing if this XKTModel has been finalized (see {@link XKTModel#finalized}).\n     *\n     * @param {*} params Method parameters.\n     * @param {String} params.metaObjectId Unique ID for the {@link XKTMetaObject}.\n     * @param {String} params.propertySetIds ID of one or more property sets that contains additional metadata about\n     * this {@link XKTMetaObject}. The property sets could be stored externally (ie not managed at all by the XKT file),\n     * or could be {@link XKTPropertySet}s within {@link XKTModel#propertySets}.\n     * @param {String} [params.metaObjectType=\"default\"] A meta type for the {@link XKTMetaObject}. Can be anything,\n     * but is usually an IFC type, such as \"IfcSite\" or \"IfcWall\".\n     * @param {String} [params.metaObjectName] Human-readable name for the {@link XKTMetaObject}. Defaults to the ````metaObjectId```` parameter.\n     * @param {String} [params.parentMetaObjectId] ID of the parent {@link XKTMetaObject}, if any. Defaults to the ````metaObjectId```` parameter.\n     * @returns {XKTMetaObject} The new {@link XKTMetaObject}.\n     */\n    createMetaObject(params) {\n\n        if (!params) {\n            throw \"Parameters expected: params\";\n        }\n\n        if (params.metaObjectId === null || params.metaObjectId === undefined) {\n            throw \"Parameter expected: params.metaObjectId\";\n        }\n\n        if (this.finalized) {\n            console.error(\"XKTModel has been finalized, can't add more meta objects\");\n            return;\n        }\n\n        if (this.metaObjects[params.metaObjectId]) {\n            //          console.error(\"XKTMetaObject already exists with this ID: \" + params.metaObjectId);\n            return;\n        }\n\n        const metaObjectId = params.metaObjectId;\n        const propertySetIds = params.propertySetIds;\n        const metaObjectType = params.metaObjectType || \"Default\";\n        const metaObjectName = params.metaObjectName || params.metaObjectId;\n        const parentMetaObjectId = params.parentMetaObjectId;\n\n        const metaObject = new XKTMetaObject(metaObjectId, propertySetIds, metaObjectType, metaObjectName, parentMetaObjectId);\n\n        this.metaObjects[metaObjectId] = metaObject;\n        this.metaObjectsList.push(metaObject);\n\n        if (!parentMetaObjectId) {\n            if (!this._rootMetaObject) {\n                this._rootMetaObject = metaObject;\n            }\n        }\n\n        return metaObject;\n    }\n\n    /**\n     * Creates an {@link XKTTexture} within this XKTModel.\n     *\n     * Registers the new {@link XKTTexture} in {@link XKTModel#textures} and {@link XKTModel#texturesList}.\n     *\n     * Logs error and does nothing if this XKTModel has been finalized (see {@link XKTModel#finalized}).\n     *\n     * @param {*} params Method parameters.\n     * @param {Number} params.textureId Unique ID for the {@link XKTTexture}.\n     * @param {String} [params.src] Source of an image file for the texture.\n     * @param {Buffer} [params.imageData] Image data for the texture.\n     * @param {Number} [params.mediaType] Media type (ie. MIME type) of ````imageData````. Supported values are {@link GIFMediaType}, {@link PNGMediaType} and {@link JPEGMediaType}.\n     * @param {Number} [params.width] Texture width, used with ````imageData````. Ignored for compressed textures.\n     * @param {Number} [params.height] Texture height, used with ````imageData````. Ignored for compressed textures.\n     * @param {Boolean} [params.compressed=true] Whether to compress the texture.\n     * @param {Number} [params.minFilter=LinearMipMapNearestFilter] How the texture is sampled when a texel covers less than one pixel. Supported\n     * values are {@link LinearMipmapLinearFilter}, {@link LinearMipMapNearestFilter}, {@link NearestMipMapNearestFilter},\n     * {@link NearestMipMapLinearFilter} and {@link LinearMipMapLinearFilter}. Ignored for compressed textures.\n     * @param {Number} [params.magFilter=LinearMipMapNearestFilter] How the texture is sampled when a texel covers more than one pixel. Supported values\n     * are {@link LinearFilter} and {@link NearestFilter}. Ignored for compressed textures.\n     * @param {Number} [params.wrapS=RepeatWrapping] Wrap parameter for texture coordinate *S*. Supported values are {@link ClampToEdgeWrapping},\n     * {@link MirroredRepeatWrapping} and {@link RepeatWrapping}. Ignored for compressed textures.\n     * @param {Number} [params.wrapT=RepeatWrapping] Wrap parameter for texture coordinate *T*. Supported values are {@link ClampToEdgeWrapping},\n     * {@link MirroredRepeatWrapping} and {@link RepeatWrapping}. Ignored for compressed textures.\n     * {@param {Number} [params.wrapR=RepeatWrapping] Wrap parameter for texture coordinate *R*. Supported values are {@link ClampToEdgeWrapping},\n     * {@link MirroredRepeatWrapping} and {@link RepeatWrapping}. Ignored for compressed textures.\n     * @returns {XKTTexture} The new {@link XKTTexture}.\n     */\n    createTexture(params) {\n\n        if (!params) {\n            throw \"Parameters expected: params\";\n        }\n\n        if (params.textureId === null || params.textureId === undefined) {\n            throw \"Parameter expected: params.textureId\";\n        }\n\n        if (!params.imageData && !params.src) {\n            throw \"Parameter expected: params.imageData or params.src\";\n        }\n\n        if (this.finalized) {\n            console.error(\"XKTModel has been finalized, can't add more textures\");\n            return;\n        }\n\n        if (this.textures[params.textureId]) {\n            console.error(\"XKTTexture already exists with this ID: \" + params.textureId);\n            return;\n        }\n\n        if (params.src) {\n            const fileExt = params.src.split('.').pop();\n            if (fileExt !== \"jpg\" && fileExt !== \"jpeg\" && fileExt !== \"png\") {\n                console.error(`XKTModel does not support image files with extension '${fileExt}' - won't create texture '${params.textureId}`);\n                return;\n            }\n        }\n\n        const textureId = params.textureId;\n\n        const texture = new XKTTexture({\n            textureId,\n            imageData: params.imageData,\n            mediaType: params.mediaType,\n            minFilter: params.minFilter,\n            magFilter: params.magFilter,\n            wrapS: params.wrapS,\n            wrapT: params.wrapT,\n            wrapR: params.wrapR,\n            width: params.width,\n            height: params.height,\n            compressed: (params.compressed !== false),\n            src: params.src\n        });\n\n        this.textures[textureId] = texture;\n        this.texturesList.push(texture);\n\n        return texture;\n    }\n\n    /**\n     * Creates an {@link XKTTextureSet} within this XKTModel.\n     *\n     * Registers the new {@link XKTTextureSet} in {@link XKTModel#textureSets} and {@link XKTModel#.textureSetsList}.\n     *\n     * Logs error and does nothing if this XKTModel has been finalized (see {@link XKTModel#finalized}).\n     *\n     * @param {*} params Method parameters.\n     * @param {Number} params.textureSetId Unique ID for the {@link XKTTextureSet}.\n     * @param {*} [params.colorTextureId] ID of *RGBA* base color {@link XKTTexture}, with color in *RGB* and alpha in *A*.\n     * @param {*} [params.metallicRoughnessTextureId] ID of *RGBA* metal-roughness {@link XKTTexture}, with the metallic factor in *R*, and roughness factor in *G*.\n     * @param {*} [params.normalsTextureId] ID of *RGBA* normal {@link XKTTexture}, with normal map vectors in *RGB*.\n     * @param {*} [params.emissiveTextureId] ID of *RGBA* emissive {@link XKTTexture}, with emissive color in *RGB*.\n     * @param {*} [params.occlusionTextureId] ID of *RGBA* occlusion {@link XKTTexture}, with occlusion factor in *R*.\n     * @returns {XKTTextureSet} The new {@link XKTTextureSet}.\n     */\n    createTextureSet(params) {\n\n        if (!params) {\n            throw \"Parameters expected: params\";\n        }\n\n        if (params.textureSetId === null || params.textureSetId === undefined) {\n            throw \"Parameter expected: params.textureSetId\";\n        }\n\n        if (this.finalized) {\n            console.error(\"XKTModel has been finalized, can't add more textureSets\");\n            return;\n        }\n\n        if (this.textureSets[params.textureSetId]) {\n            console.error(\"XKTTextureSet already exists with this ID: \" + params.textureSetId);\n            return;\n        }\n\n        let colorTexture;\n        if (params.colorTextureId !== undefined && params.colorTextureId !== null) {\n            colorTexture = this.textures[params.colorTextureId];\n            if (!colorTexture) {\n                console.error(`Texture not found: ${params.colorTextureId} - ensure that you create it first with createTexture()`);\n                return;\n            }\n            colorTexture.channel = COLOR_TEXTURE;\n        }\n\n        let metallicRoughnessTexture;\n        if (params.metallicRoughnessTextureId !== undefined && params.metallicRoughnessTextureId !== null) {\n            metallicRoughnessTexture = this.textures[params.metallicRoughnessTextureId];\n            if (!metallicRoughnessTexture) {\n                console.error(`Texture not found: ${params.metallicRoughnessTextureId} - ensure that you create it first with createTexture()`);\n                return;\n            }\n            metallicRoughnessTexture.channel = METALLIC_ROUGHNESS_TEXTURE;\n        }\n\n        let normalsTexture;\n        if (params.normalsTextureId !== undefined && params.normalsTextureId !== null) {\n            normalsTexture = this.textures[params.normalsTextureId];\n            if (!normalsTexture) {\n                console.error(`Texture not found: ${params.normalsTextureId} - ensure that you create it first with createTexture()`);\n                return;\n            }\n            normalsTexture.channel = NORMALS_TEXTURE;\n        }\n\n        let emissiveTexture;\n        if (params.emissiveTextureId !== undefined && params.emissiveTextureId !== null) {\n            emissiveTexture = this.textures[params.emissiveTextureId];\n            if (!emissiveTexture) {\n                console.error(`Texture not found: ${params.emissiveTextureId} - ensure that you create it first with createTexture()`);\n                return;\n            }\n            emissiveTexture.channel = EMISSIVE_TEXTURE;\n        }\n\n        let occlusionTexture;\n        if (params.occlusionTextureId !== undefined && params.occlusionTextureId !== null) {\n            occlusionTexture = this.textures[params.occlusionTextureId];\n            if (!occlusionTexture) {\n                console.error(`Texture not found: ${params.occlusionTextureId} - ensure that you create it first with createTexture()`);\n                return;\n            }\n            occlusionTexture.channel = OCCLUSION_TEXTURE;\n        }\n\n        const textureSet = new XKTTextureSet({\n            textureSetId: params.textureSetId,\n            textureSetIndex: this.textureSetsList.length,\n            colorTexture,\n            metallicRoughnessTexture,\n            normalsTexture,\n            emissiveTexture,\n            occlusionTexture\n        });\n\n        this.textureSets[params.textureSetId] = textureSet;\n        this.textureSetsList.push(textureSet);\n\n        return textureSet;\n    }\n\n    /**\n     * Creates an {@link XKTGeometry} within this XKTModel.\n     *\n     * Registers the new {@link XKTGeometry} in {@link XKTModel#geometries} and {@link XKTModel#geometriesList}.\n     *\n     * Logs error and does nothing if this XKTModel has been finalized (see {@link XKTModel#finalized}).\n     *\n     * @param {*} params Method parameters.\n     * @param {Number} params.geometryId Unique ID for the {@link XKTGeometry}.\n     * @param {String} params.primitiveType The type of {@link XKTGeometry}: \"triangles\", \"lines\" or \"points\".\n     * @param {Float64Array} params.positions Floating-point Local-space vertex positions for the {@link XKTGeometry}. Required for all primitive types.\n     * @param {Number[]} [params.normals] Floating-point vertex normals for the {@link XKTGeometry}. Only used with triangles primitives. Ignored for points and lines.\n     * @param {Number[]} [params.colors] Floating-point RGBA vertex colors for the {@link XKTGeometry}. Required for points primitives. Ignored for lines and triangles.\n     * @param {Number[]} [params.colorsCompressed] Integer RGBA vertex colors for the {@link XKTGeometry}. Required for points primitives. Ignored for lines and triangles.\n     * @param {Number[]} [params.uvs] Floating-point vertex UV coordinates for the {@link XKTGeometry}. Alias for ````uv````.\n     * @param {Number[]} [params.uv] Floating-point vertex UV coordinates for the {@link XKTGeometry}. Alias for ````uvs````.\n     * @param {Number[]} [params.colorsCompressed] Integer RGBA vertex colors for the {@link XKTGeometry}. Required for points primitives. Ignored for lines and triangles.\n     * @param {Uint32Array} [params.indices] Indices for the {@link XKTGeometry}. Required for triangles and lines primitives. Ignored for points.\n     * @param {Number} [params.edgeThreshold=10]\n     * @returns {XKTGeometry} The new {@link XKTGeometry}.\n     */\n    createGeometry(params) {\n\n        if (!params) {\n            throw \"Parameters expected: params\";\n        }\n\n        if (params.geometryId === null || params.geometryId === undefined) {\n            throw \"Parameter expected: params.geometryId\";\n        }\n\n        if (!params.primitiveType) {\n            throw \"Parameter expected: params.primitiveType\";\n        }\n\n        if (!params.positions) {\n            throw \"Parameter expected: params.positions\";\n        }\n\n        const triangles = params.primitiveType === \"triangles\";\n        const points = params.primitiveType === \"points\";\n        const lines = params.primitiveType === \"lines\";\n\n        if (!triangles && !points && !lines) {\n            throw \"Unsupported value for params.primitiveType: \" + params.primitiveType + \"' - supported values are 'triangles', 'points' and 'lines'\";\n        }\n\n        if (triangles) {\n            if (!params.indices) {\n                throw \"Parameter expected for 'triangles' primitive: params.indices\";\n            }\n        }\n\n        if (points) {\n            if (!params.colors && !params.colorsCompressed) {\n                throw \"Parameter expected for 'points' primitive: params.colors or params.colorsCompressed\";\n            }\n        }\n\n        if (lines) {\n            if (!params.indices) {\n                throw \"Parameter expected for 'lines' primitive: params.indices\";\n            }\n        }\n\n        if (this.finalized) {\n            console.error(\"XKTModel has been finalized, can't add more geometries\");\n            return;\n        }\n\n        if (this.geometries[params.geometryId]) {\n            console.error(\"XKTGeometry already exists with this ID: \" + params.geometryId);\n            return;\n        }\n\n        const geometryId = params.geometryId;\n        const primitiveType = params.primitiveType;\n        const positions = new Float64Array(params.positions); // May modify in #finalize\n\n        const xktGeometryCfg = {\n            geometryId: geometryId,\n            geometryIndex: this.geometriesList.length,\n            primitiveType: primitiveType,\n            positions: positions,\n            uvs: params.uvs || params.uv\n        }\n\n        if (triangles) {\n            if (params.normals) {\n                xktGeometryCfg.normals = new Float32Array(params.normals);\n            }\n            xktGeometryCfg.indices = params.indices;\n        }\n\n        if (points) {\n            if (params.colorsCompressed) {\n                xktGeometryCfg.colorsCompressed = new Uint8Array(params.colorsCompressed);\n\n            } else {\n                const colors = params.colors;\n                const colorsCompressed = new Uint8Array(colors.length);\n                for (let i = 0, len = colors.length; i < len; i++) {\n                    colorsCompressed[i] = Math.floor(colors[i] * 255);\n                }\n                xktGeometryCfg.colorsCompressed = colorsCompressed;\n            }\n        }\n\n        if (lines) {\n            xktGeometryCfg.indices = params.indices;\n        }\n\n        if (triangles) {\n\n            if (!params.normals && !params.uv && !params.uvs) {\n\n                // Building models often duplicate positions to allow face-aligned vertex normals; when we're not\n                // providing normals for a geometry, it becomes possible to merge duplicate vertex positions within it.\n\n                // TODO: Make vertex merging also merge normals?\n\n                const mergedPositions = [];\n                const mergedIndices = [];\n                mergeVertices(xktGeometryCfg.positions, xktGeometryCfg.indices, mergedPositions, mergedIndices);\n                xktGeometryCfg.positions = new Float64Array(mergedPositions);\n                xktGeometryCfg.indices = mergedIndices;\n            }\n\n            xktGeometryCfg.edgeIndices = buildEdgeIndices(xktGeometryCfg.positions, xktGeometryCfg.indices, null, params.edgeThreshold || this.edgeThreshold || 10);\n        }\n\n        const geometry = new XKTGeometry(xktGeometryCfg);\n\n        this.geometries[geometryId] = geometry;\n        this.geometriesList.push(geometry);\n\n        return geometry;\n    }\n\n    /**\n     * Creates an {@link XKTMesh} within this XKTModel.\n     *\n     * An {@link XKTMesh} can be owned by one {@link XKTEntity}, which can own multiple {@link XKTMesh}es.\n     *\n     * Registers the new {@link XKTMesh} in {@link XKTModel#meshes} and {@link XKTModel#meshesList}.\n     *\n     * @param {*} params Method parameters.\n     * @param {Number} params.meshId Unique ID for the {@link XKTMesh}.\n     * @param {Number} params.geometryId ID of an existing {@link XKTGeometry} in {@link XKTModel#geometries}.\n     * @param {Number} [params.textureSetId] Unique ID of an {@link XKTTextureSet} in {@link XKTModel#textureSets}.\n     * @param {Float32Array} params.color RGB color for the {@link XKTMesh}, with each color component in range [0..1].\n     * @param {Number} [params.metallic=0] How metallic the {@link XKTMesh} is, in range [0..1]. A value of ````0```` indicates fully dielectric material, while ````1```` indicates fully metallic.\n     * @param {Number} [params.roughness=1] How rough the {@link XKTMesh} is, in range [0..1]. A value of ````0```` indicates fully smooth, while ````1```` indicates fully rough.\n     * @param {Number} params.opacity Opacity factor for the {@link XKTMesh}, in range [0..1].\n     * @param {Float64Array} [params.matrix] Modeling matrix for the {@link XKTMesh}. Overrides ````position````, ````scale```` and ````rotation```` parameters.\n     * @param {Number[]} [params.position=[0,0,0]] Position of the {@link XKTMesh}. Overridden by the ````matrix```` parameter.\n     * @param {Number[]} [params.scale=[1,1,1]] Scale of the {@link XKTMesh}. Overridden by the ````matrix```` parameter.\n     * @param {Number[]} [params.rotation=[0,0,0]] Rotation of the {@link XKTMesh} as Euler angles given in degrees, for each of the X, Y and Z axis. Overridden by the ````matrix```` parameter.\n     * @returns {XKTMesh} The new {@link XKTMesh}.\n     */\n    createMesh(params) {\n\n        if (params.meshId === null || params.meshId === undefined) {\n            throw \"Parameter expected: params.meshId\";\n        }\n\n        if (params.geometryId === null || params.geometryId === undefined) {\n            throw \"Parameter expected: params.geometryId\";\n        }\n\n        if (this.finalized) {\n            throw \"XKTModel has been finalized, can't add more meshes\";\n        }\n\n        if (this.meshes[params.meshId]) {\n            console.error(\"XKTMesh already exists with this ID: \" + params.meshId);\n            return;\n        }\n\n        const geometry = this.geometries[params.geometryId];\n\n        if (!geometry) {\n            console.error(\"XKTGeometry not found: \" + params.geometryId);\n            return;\n        }\n\n        geometry.numInstances++;\n\n        let textureSet = null;\n        if (params.textureSetId) {\n            textureSet = this.textureSets[params.textureSetId];\n            if (!textureSet) {\n                console.error(\"XKTTextureSet not found: \" + params.textureSetId);\n                return;\n            }\n            textureSet.numInstances++;\n        }\n\n        let matrix = params.matrix;\n\n        if (!matrix) {\n\n            const position = params.position;\n            const scale = params.scale;\n            const rotation = params.rotation;\n\n            if (position || scale || rotation) {\n                matrix = math.identityMat4();\n                const quaternion = math.eulerToQuaternion(rotation || [0, 0, 0], \"XYZ\", math.identityQuaternion());\n                math.composeMat4(position || [0, 0, 0], quaternion, scale || [1, 1, 1], matrix)\n\n            } else {\n                matrix = math.identityMat4();\n            }\n        }\n\n        const meshIndex = this.meshesList.length;\n\n        const mesh = new XKTMesh({\n            meshId: params.meshId,\n            meshIndex,\n            matrix,\n            geometry,\n            color: params.color,\n            metallic: params.metallic,\n            roughness: params.roughness,\n            opacity: params.opacity,\n            textureSet\n        });\n\n        this.meshes[mesh.meshId] = mesh;\n        this.meshesList.push(mesh);\n\n        return mesh;\n    }\n\n    /**\n     * Creates an {@link XKTEntity} within this XKTModel.\n     *\n     * Registers the new {@link XKTEntity} in {@link XKTModel#entities} and {@link XKTModel#entitiesList}.\n     *\n     * Logs error and does nothing if this XKTModel has been finalized (see {@link XKTModel#finalized}).\n     *\n     * @param {*} params Method parameters.\n     * @param {String} params.entityId Unique ID for the {@link XKTEntity}.\n     * @param {String[]} params.meshIds IDs of {@link XKTMesh}es used by the {@link XKTEntity}. Note that each {@link XKTMesh} can only be used by one {@link XKTEntity}.\n     * @returns {XKTEntity} The new {@link XKTEntity}.\n     */\n    createEntity(params) {\n\n        if (!params) {\n            throw \"Parameters expected: params\";\n        }\n\n        if (params.entityId === null || params.entityId === undefined) {\n            throw \"Parameter expected: params.entityId\";\n        }\n\n        if (!params.meshIds) {\n            throw \"Parameter expected: params.meshIds\";\n        }\n\n        if (this.finalized) {\n            console.error(\"XKTModel has been finalized, can't add more entities\");\n            return;\n        }\n\n        if (params.meshIds.length === 0) {\n            console.warn(\"XKTEntity has no meshes - won't create: \" + params.entityId);\n            return;\n        }\n\n        let entityId = params.entityId;\n\n        if (this.entities[entityId]) {\n            while (this.entities[entityId]) {\n                entityId = math.createUUID();\n            }\n            console.error(\"XKTEntity already exists with this ID: \" + params.entityId + \" - substituting random ID instead: \" + entityId);\n        }\n\n        const meshIds = params.meshIds;\n        const meshes = [];\n\n        for (let meshIdIdx = 0, meshIdLen = meshIds.length; meshIdIdx < meshIdLen; meshIdIdx++) {\n\n            const meshId = meshIds[meshIdIdx];\n            const mesh = this.meshes[meshId];\n\n            if (!mesh) {\n                console.error(\"XKTMesh found: \" + meshId);\n                continue;\n            }\n\n            if (mesh.entity) {\n                console.error(\"XKTMesh \" + meshId + \" already used by XKTEntity \" + mesh.entity.entityId);\n                continue;\n            }\n\n            meshes.push(mesh);\n        }\n\n        const entity = new XKTEntity(entityId, meshes);\n\n        for (let i = 0, len = meshes.length; i < len; i++) {\n            const mesh = meshes[i];\n            mesh.entity = entity;\n        }\n\n        this.entities[entityId] = entity;\n        this.entitiesList.push(entity);\n\n        return entity;\n    }\n\n    /**\n     * Creates a default {@link XKTMetaObject} for each {@link XKTEntity} that does not already have one.\n     */\n    createDefaultMetaObjects() {\n\n        for (let i = 0, len = this.entitiesList.length; i < len; i++) {\n\n            const entity = this.entitiesList[i];\n            const metaObjectId = entity.entityId;\n            const metaObject = this.metaObjects[metaObjectId];\n\n            if (!metaObject) {\n\n                if (!this._rootMetaObject) {\n                    this._rootMetaObject = this.createMetaObject({\n                        metaObjectId: this.modelId,\n                        metaObjectType: \"Default\",\n                        metaObjectName: this.modelId\n                    });\n                }\n\n                this.createMetaObject({\n                    metaObjectId: metaObjectId,\n                    metaObjectType: \"Default\",\n                    metaObjectName: \"\" + metaObjectId,\n                    parentMetaObjectId: this._rootMetaObject.metaObjectId\n                });\n            }\n        }\n    }\n\n    /**\n     * Finalizes this XKTModel.\n     *\n     * After finalizing, we may then serialize the model to an array buffer using {@link writeXKTModelToArrayBuffer}.\n     *\n     * Logs error and does nothing if this XKTModel has already been finalized.\n     *\n     * Internally, this method:\n     *\n     * * for each {@link XKTEntity} that doesn't already have a {@link XKTMetaObject}, creates one with {@link XKTMetaObject#metaObjectType} set to \"default\"\n     * * sets each {@link XKTEntity}'s {@link XKTEntity#hasReusedGeometries} true if it shares its {@link XKTGeometry}s with other {@link XKTEntity}s,\n     * * creates each {@link XKTEntity}'s {@link XKTEntity#aabb},\n     * * creates {@link XKTTile}s in {@link XKTModel#tilesList}, and\n     * * sets {@link XKTModel#finalized} ````true````.\n     */\n    async finalize() {\n\n        if (this.finalized) {\n            console.log(\"XKTModel already finalized\");\n            return;\n        }\n\n        this._removeUnusedTextures();\n\n        await this._compressTextures();\n\n        this._bakeSingleUseGeometryPositions();\n\n        this._bakeAndOctEncodeNormals();\n\n        this._createEntityAABBs();\n\n        const rootKDNode = this._createKDTree();\n\n        this.entitiesList = [];\n\n        this._createTilesFromKDTree(rootKDNode);\n\n        this._createReusedGeometriesDecodeMatrix();\n\n        this._flagSolidGeometries();\n\n        this.aabb.set(rootKDNode.aabb);\n\n        this.finalized = true;\n    }\n\n    _removeUnusedTextures() {\n        let texturesList = [];\n        const textures = {};\n        for (let i = 0, leni = this.texturesList.length; i < leni; i++) {\n            const texture = this.texturesList[i];\n            if (texture.channel !== null) {\n                texture.textureIndex = texturesList.length;\n                texturesList.push(texture);\n                textures[texture.textureId] = texture;\n            }\n        }\n        this.texturesList = texturesList;\n        this.textures = textures;\n    }\n\n    _compressTextures() {\n        let countTextures = this.texturesList.length;\n        return new Promise((resolve) => {\n            if (countTextures === 0) {\n                resolve();\n                return;\n            }\n            for (let i = 0, leni = this.texturesList.length; i < leni; i++) {\n                const texture = this.texturesList[i];\n                const encodingOptions = TEXTURE_ENCODING_OPTIONS[texture.channel] || {};\n\n                if (texture.src) {\n\n                    // XKTTexture created with XKTModel#createTexture({ src: ... })\n\n                    const src = texture.src;\n                    const fileExt = src.split('.').pop();\n                    switch (fileExt) {\n                        case \"jpeg\":\n                        case \"jpg\":\n                        case \"png\":\n                            load(src, ImageLoader, {\n                                image: {\n                                    type: \"data\"\n                                }\n                            }).then((imageData) => {\n                                if (texture.compressed) {\n                                    encode(imageData, KTX2BasisWriter, encodingOptions).then((encodedData) => {\n                                        const encodedImageData = new Uint8Array(encodedData);\n                                        texture.imageData = encodedImageData;\n                                        if (--countTextures <= 0) {\n                                            resolve();\n                                        }\n                                    }).catch((err) => {\n                                        console.error(\"[XKTModel.finalize] Failed to encode image: \" + err);\n                                        if (--countTextures <= 0) {\n                                            resolve();\n                                        }\n                                    });\n                                } else {\n                                    texture.imageData = new Uint8Array(1);\n                                    if (--countTextures <= 0) {\n                                        resolve();\n                                    }\n                                }\n                            }).catch((err) => {\n                                console.error(\"[XKTModel.finalize] Failed to load image: \" + err);\n                                if (--countTextures <= 0) {\n                                    resolve();\n                                }\n                            });\n                            break;\n                        default:\n                            if (--countTextures <= 0) {\n                                resolve();\n                            }\n                            break;\n                    }\n                }\n\n                if (texture.imageData) {\n\n                    // XKTTexture created with XKTModel#createTexture({ imageData: ... })\n\n                    if (texture.compressed) {\n                        encode(texture.imageData, KTX2BasisWriter, encodingOptions)\n                            .then((encodedImageData) => {\n                                texture.imageData = new Uint8Array(encodedImageData);\n                                if (--countTextures <= 0) {\n                                    resolve();\n                                }\n                            }).catch((err) => {\n                            console.error(\"[XKTModel.finalize] Failed to encode image: \" + err);\n                            if (--countTextures <= 0) {\n                                resolve();\n                            }\n                        });\n                    } else {\n                        texture.imageData = new Uint8Array(1);\n                        if (--countTextures <= 0) {\n                            resolve();\n                        }\n                    }\n                }\n            }\n        });\n    }\n\n    _bakeSingleUseGeometryPositions() {\n\n        for (let j = 0, lenj = this.meshesList.length; j < lenj; j++) {\n\n            const mesh = this.meshesList[j];\n\n            const geometry = mesh.geometry;\n\n            if (geometry.numInstances === 1) {\n\n                const matrix = mesh.matrix;\n\n                if (matrix && (!math.isIdentityMat4(matrix))) {\n\n                    const positions = geometry.positions;\n\n                    for (let i = 0, len = positions.length; i < len; i += 3) {\n\n                        tempVec4a[0] = positions[i + 0];\n                        tempVec4a[1] = positions[i + 1];\n                        tempVec4a[2] = positions[i + 2];\n                        tempVec4a[3] = 1;\n\n                        math.transformPoint4(matrix, tempVec4a, tempVec4b);\n\n                        positions[i + 0] = tempVec4b[0];\n                        positions[i + 1] = tempVec4b[1];\n                        positions[i + 2] = tempVec4b[2];\n                    }\n                }\n            }\n        }\n    }\n\n    _bakeAndOctEncodeNormals() {\n\n        for (let i = 0, len = this.meshesList.length; i < len; i++) {\n\n            const mesh = this.meshesList[i];\n            const geometry = mesh.geometry;\n\n            if (geometry.normals && !geometry.normalsOctEncoded) {\n\n                geometry.normalsOctEncoded = new Int8Array(geometry.normals.length);\n\n                if (geometry.numInstances > 1) {\n                    geometryCompression.octEncodeNormals(geometry.normals, geometry.normals.length, geometry.normalsOctEncoded, 0);\n\n                } else {\n                    const modelNormalMatrix = math.inverseMat4(math.transposeMat4(mesh.matrix, tempMat4), tempMat4b);\n                    geometryCompression.transformAndOctEncodeNormals(modelNormalMatrix, geometry.normals, geometry.normals.length, geometry.normalsOctEncoded, 0);\n                }\n            }\n        }\n    }\n\n    _createEntityAABBs() {\n\n        for (let i = 0, len = this.entitiesList.length; i < len; i++) {\n\n            const entity = this.entitiesList[i];\n            const entityAABB = entity.aabb;\n            const meshes = entity.meshes;\n\n            math.collapseAABB3(entityAABB);\n\n            for (let j = 0, lenj = meshes.length; j < lenj; j++) {\n\n                const mesh = meshes[j];\n                const geometry = mesh.geometry;\n                const matrix = mesh.matrix;\n\n                if (geometry.numInstances > 1) {\n\n                    const positions = geometry.positions;\n                    for (let i = 0, len = positions.length; i < len; i += 3) {\n                        tempVec4a[0] = positions[i + 0];\n                        tempVec4a[1] = positions[i + 1];\n                        tempVec4a[2] = positions[i + 2];\n                        tempVec4a[3] = 1;\n                        math.transformPoint4(matrix, tempVec4a, tempVec4b);\n                        math.expandAABB3Point3(entityAABB, tempVec4b);\n                    }\n\n                } else {\n\n                    const positions = geometry.positions;\n                    for (let i = 0, len = positions.length; i < len; i += 3) {\n                        tempVec4a[0] = positions[i + 0];\n                        tempVec4a[1] = positions[i + 1];\n                        tempVec4a[2] = positions[i + 2];\n                        math.expandAABB3Point3(entityAABB, tempVec4a);\n                    }\n                }\n            }\n        }\n    }\n\n    _createKDTree() {\n\n        const aabb = math.collapseAABB3();\n\n        for (let i = 0, len = this.entitiesList.length; i < len; i++) {\n            const entity = this.entitiesList[i];\n            math.expandAABB3(aabb, entity.aabb);\n        }\n\n        const rootKDNode = new KDNode(aabb);\n\n        for (let i = 0, len = this.entitiesList.length; i < len; i++) {\n            const entity = this.entitiesList[i];\n            this._insertEntityIntoKDTree(rootKDNode, entity);\n        }\n\n        return rootKDNode;\n    }\n\n    _insertEntityIntoKDTree(kdNode, entity) {\n\n        const nodeAABB = kdNode.aabb;\n        const entityAABB = entity.aabb;\n\n        const nodeAABBDiag = math.getAABB3Diag(nodeAABB);\n\n        if (nodeAABBDiag < this.minTileSize) {\n            kdNode.entities = kdNode.entities || [];\n            kdNode.entities.push(entity);\n            math.expandAABB3(nodeAABB, entityAABB);\n            return;\n        }\n\n        if (kdNode.left) {\n            if (math.containsAABB3(kdNode.left.aabb, entityAABB)) {\n                this._insertEntityIntoKDTree(kdNode.left, entity);\n                return;\n            }\n        }\n\n        if (kdNode.right) {\n            if (math.containsAABB3(kdNode.right.aabb, entityAABB)) {\n                this._insertEntityIntoKDTree(kdNode.right, entity);\n                return;\n            }\n        }\n\n        kdTreeDimLength[0] = nodeAABB[3] - nodeAABB[0];\n        kdTreeDimLength[1] = nodeAABB[4] - nodeAABB[1];\n        kdTreeDimLength[2] = nodeAABB[5] - nodeAABB[2];\n\n        let dim = 0;\n\n        if (kdTreeDimLength[1] > kdTreeDimLength[dim]) {\n            dim = 1;\n        }\n\n        if (kdTreeDimLength[2] > kdTreeDimLength[dim]) {\n            dim = 2;\n        }\n\n        if (!kdNode.left) {\n            const aabbLeft = nodeAABB.slice();\n            aabbLeft[dim + 3] = ((nodeAABB[dim] + nodeAABB[dim + 3]) / 2.0);\n            kdNode.left = new KDNode(aabbLeft);\n            if (math.containsAABB3(aabbLeft, entityAABB)) {\n                this._insertEntityIntoKDTree(kdNode.left, entity);\n                return;\n            }\n        }\n\n        if (!kdNode.right) {\n            const aabbRight = nodeAABB.slice();\n            aabbRight[dim] = ((nodeAABB[dim] + nodeAABB[dim + 3]) / 2.0);\n            kdNode.right = new KDNode(aabbRight);\n            if (math.containsAABB3(aabbRight, entityAABB)) {\n                this._insertEntityIntoKDTree(kdNode.right, entity);\n                return;\n            }\n        }\n\n        kdNode.entities = kdNode.entities || [];\n        kdNode.entities.push(entity);\n\n        math.expandAABB3(nodeAABB, entityAABB);\n    }\n\n    _createTilesFromKDTree(rootKDNode) {\n        this._createTilesFromKDNode(rootKDNode);\n    }\n\n    _createTilesFromKDNode(kdNode) {\n        if (kdNode.entities && kdNode.entities.length > 0) {\n            this._createTileFromEntities(kdNode.entities);\n        }\n        if (kdNode.left) {\n            this._createTilesFromKDNode(kdNode.left);\n        }\n        if (kdNode.right) {\n            this._createTilesFromKDNode(kdNode.right);\n        }\n    }\n\n    /**\n     * Creates a tile from the given entities.\n     *\n     * For each single-use {@link XKTGeometry}, this method centers {@link XKTGeometry#positions} to make them relative to the\n     * tile's center, then quantizes the positions to unsigned 16-bit integers, relative to the tile's boundary.\n     *\n     * @param entities\n     */\n    _createTileFromEntities(entities) {\n\n        const tileAABB = math.AABB3(); // A tighter World-space AABB around the entities\n        math.collapseAABB3(tileAABB);\n\n        for (let i = 0; i < entities.length; i++) {\n            const entity = entities [i];\n            math.expandAABB3(tileAABB, entity.aabb);\n        }\n\n        const tileCenter = math.getAABB3Center(tileAABB);\n        const tileCenterNeg = math.mulVec3Scalar(tileCenter, -1, math.vec3());\n\n        const rtcAABB = math.AABB3(); // AABB centered at the RTC origin\n\n        rtcAABB[0] = tileAABB[0] - tileCenter[0];\n        rtcAABB[1] = tileAABB[1] - tileCenter[1];\n        rtcAABB[2] = tileAABB[2] - tileCenter[2];\n        rtcAABB[3] = tileAABB[3] - tileCenter[0];\n        rtcAABB[4] = tileAABB[4] - tileCenter[1];\n        rtcAABB[5] = tileAABB[5] - tileCenter[2];\n\n        for (let i = 0; i < entities.length; i++) {\n\n            const entity = entities [i];\n\n            const meshes = entity.meshes;\n\n            for (let j = 0, lenj = meshes.length; j < lenj; j++) {\n\n                const mesh = meshes[j];\n                const geometry = mesh.geometry;\n\n                if (!geometry.reused) { // Batched geometry\n\n                    const positions = geometry.positions;\n\n                    // Center positions relative to their tile's World-space center\n\n                    for (let k = 0, lenk = positions.length; k < lenk; k += 3) {\n\n                        positions[k + 0] -= tileCenter[0];\n                        positions[k + 1] -= tileCenter[1];\n                        positions[k + 2] -= tileCenter[2];\n                    }\n\n                    // Quantize positions relative to tile's RTC-space boundary\n\n                    geometryCompression.quantizePositions(positions, positions.length, rtcAABB, geometry.positionsQuantized);\n\n                } else { // Instanced geometry\n\n                    // Post-multiply a translation to the mesh's modeling matrix\n                    // to center the entity's geometry instances to the tile RTC center\n\n                    //////////////////////////////\n                    // Why do we do this?\n                    // Seems to break various models\n                    /////////////////////////////////\n\n                    math.translateMat4v(tileCenterNeg, mesh.matrix);\n                }\n            }\n\n            entity.entityIndex = this.entitiesList.length;\n\n            this.entitiesList.push(entity);\n        }\n\n        const tile = new XKTTile(tileAABB, entities);\n\n        this.tilesList.push(tile);\n    }\n\n    _createReusedGeometriesDecodeMatrix() {\n\n        const tempVec3a = math.vec3();\n        const reusedGeometriesAABB = math.collapseAABB3(math.AABB3());\n        let countReusedGeometries = 0;\n\n        for (let geometryIndex = 0, numGeometries = this.geometriesList.length; geometryIndex < numGeometries; geometryIndex++) {\n\n            const geometry = this.geometriesList [geometryIndex];\n\n            if (geometry.reused) { // Instanced geometry\n\n                const positions = geometry.positions;\n\n                for (let i = 0, len = positions.length; i < len; i += 3) {\n\n                    tempVec3a[0] = positions[i];\n                    tempVec3a[1] = positions[i + 1];\n                    tempVec3a[2] = positions[i + 2];\n\n                    math.expandAABB3Point3(reusedGeometriesAABB, tempVec3a);\n                }\n\n                countReusedGeometries++;\n            }\n        }\n\n        if (countReusedGeometries > 0) {\n\n            geometryCompression.createPositionsDecodeMatrix(reusedGeometriesAABB, this.reusedGeometriesDecodeMatrix);\n\n            for (let geometryIndex = 0, numGeometries = this.geometriesList.length; geometryIndex < numGeometries; geometryIndex++) {\n\n                const geometry = this.geometriesList [geometryIndex];\n\n                if (geometry.reused) {\n                    geometryCompression.quantizePositions(geometry.positions, geometry.positions.length, reusedGeometriesAABB, geometry.positionsQuantized);\n                }\n            }\n\n        } else {\n            math.identityMat4(this.reusedGeometriesDecodeMatrix); // No need for this matrix, but we'll be tidy and set it to identity\n        }\n    }\n\n    _flagSolidGeometries() {\n        let maxNumPositions = 0;\n        let maxNumIndices = 0;\n        for (let i = 0, len = this.geometriesList.length; i < len; i++) {\n            const geometry = this.geometriesList[i];\n            if (geometry.primitiveType === \"triangles\") {\n                if (geometry.positionsQuantized.length > maxNumPositions) {\n                    maxNumPositions = geometry.positionsQuantized.length;\n                }\n                if (geometry.indices.length > maxNumIndices) {\n                    maxNumIndices = geometry.indices.length;\n                }\n            }\n        }\n        let vertexIndexMapping = new Array(maxNumPositions / 3);\n        let edges = new Array(maxNumIndices);\n        for (let i = 0, len = this.geometriesList.length; i < len; i++) {\n            const geometry = this.geometriesList[i];\n            if (geometry.primitiveType === \"triangles\") {\n                geometry.solid = isTriangleMeshSolid(geometry.indices, geometry.positionsQuantized, vertexIndexMapping, edges);\n            }\n        }\n    }\n}\n\nexport {\n    XKTModel\n}","/**\n * Given geometry defined as an array of positions, optional normals, option uv and an array of indices, returns\n * modified arrays that have duplicate vertices removed.\n *\n * @private\n */\nfunction mergeVertices(positions, indices, mergedPositions, mergedIndices) {\n    const positionsMap = {};\n    const indicesLookup = [];\n    const precisionPoints = 4; // number of decimal points, e.g. 4 for epsilon of 0.0001\n    const precision = 10 ** precisionPoints;\n    let uvi = 0;\n    for (let i = 0, len = positions.length; i < len; i += 3) {\n        const vx = positions[i];\n        const vy = positions[i + 1];\n        const vz = positions[i + 2];\n        const key = `${Math.round(vx * precision)}_${Math.round(vy * precision)}_${Math.round(vz * precision)}`;\n        if (positionsMap[key] === undefined) {\n            positionsMap[key] = mergedPositions.length / 3;\n            mergedPositions.push(vx);\n            mergedPositions.push(vy);\n            mergedPositions.push(vz);\n        }\n        indicesLookup[i / 3] = positionsMap[key];\n        uvi += 2;\n    }\n    for (let i = 0, len = indices.length; i < len; i++) {\n        mergedIndices[i] = indicesLookup[indices[i]];\n    }\n}\n\nexport {mergeVertices};","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"pako\");","import {XKT_INFO} from \"../XKT_INFO.js\";\nimport * as pako from 'pako';\n\nconst XKT_VERSION = XKT_INFO.xktVersion;\nconst NUM_TEXTURE_ATTRIBUTES = 9;\nconst NUM_MATERIAL_ATTRIBUTES = 6;\n\n/**\n * Writes an {@link XKTModel} to an {@link ArrayBuffer}.\n *\n * @param {XKTModel} xktModel The {@link XKTModel}.\n * @param {ArrayBuffer} metaModelData The metamodel JSON in an ArrayBuffer.\n * @param {Object} [stats] Collects statistics.\n * @returns {ArrayBuffer} The {@link ArrayBuffer}.\n */\nfunction writeXKTModelToArrayBuffer(xktModel, metaModelData, stats = {}) {\n    const data = getModelData(xktModel, metaModelData, stats);\n    const deflatedData = deflateData(data, metaModelData);\n    stats.texturesSize += deflatedData.textureData.byteLength;\n    const arrayBuffer = createArrayBuffer(deflatedData);\n    return arrayBuffer;\n}\n\nfunction getModelData(xktModel, metaModelData, stats) {\n\n    //------------------------------------------------------------------------------------------------------------------\n    // Allocate data\n    //------------------------------------------------------------------------------------------------------------------\n\n    const propertySetsList = xktModel.propertySetsList;\n    const metaObjectsList = xktModel.metaObjectsList;\n    const geometriesList = xktModel.geometriesList;\n    const texturesList = xktModel.texturesList;\n    const textureSetsList = xktModel.textureSetsList;\n    const meshesList = xktModel.meshesList;\n    const entitiesList = xktModel.entitiesList;\n    const tilesList = xktModel.tilesList;\n\n    const numPropertySets = propertySetsList.length;\n    const numMetaObjects = metaObjectsList.length;\n    const numGeometries = geometriesList.length;\n    const numTextures = texturesList.length;\n    const numTextureSets = textureSetsList.length;\n    const numMeshes = meshesList.length;\n    const numEntities = entitiesList.length;\n    const numTiles = tilesList.length;\n\n    let lenPositions = 0;\n    let lenNormals = 0;\n    let lenColors = 0;\n    let lenUVs = 0;\n    let lenIndices = 0;\n    let lenEdgeIndices = 0;\n    let lenMatrices = 0;\n    let lenTextures = 0;\n\n    for (let geometryIndex = 0; geometryIndex < numGeometries; geometryIndex++) {\n        const geometry = geometriesList [geometryIndex];\n        if (geometry.positionsQuantized) {\n            lenPositions += geometry.positionsQuantized.length;\n        }\n        if (geometry.normalsOctEncoded) {\n            lenNormals += geometry.normalsOctEncoded.length;\n        }\n        if (geometry.colorsCompressed) {\n            lenColors += geometry.colorsCompressed.length;\n        }\n        if (geometry.uvs) {\n            lenUVs += geometry.uvs.length;\n        }\n        if (geometry.indices) {\n            lenIndices += geometry.indices.length;\n        }\n        if (geometry.edgeIndices) {\n            lenEdgeIndices += geometry.edgeIndices.length;\n        }\n    }\n\n    for (let textureIndex = 0; textureIndex < numTextures; textureIndex++) {\n        const xktTexture = texturesList[textureIndex];\n        const imageData = xktTexture.imageData;\n        lenTextures += imageData.byteLength;\n\n        if (xktTexture.compressed) {\n            stats.numCompressedTextures++;\n        }\n    }\n\n    for (let meshIndex = 0; meshIndex < numMeshes; meshIndex++) {\n        const mesh = meshesList[meshIndex];\n        if (mesh.geometry.numInstances > 1) {\n            lenMatrices += 16;\n        }\n    }\n\n    const data = {\n        metadata: {},\n        textureData: new Uint8Array(lenTextures), // All textures\n        eachTextureDataPortion: new Uint32Array(numTextures), // For each texture, an index to its first element in textureData\n        eachTextureAttributes: new Uint16Array(numTextures * NUM_TEXTURE_ATTRIBUTES),\n        positions: new Uint16Array(lenPositions), // All geometry arrays\n        normals: new Int8Array(lenNormals),\n        colors: new Uint8Array(lenColors),\n        uvs: new Float32Array(lenUVs),\n        indices: new Uint32Array(lenIndices),\n        edgeIndices: new Uint32Array(lenEdgeIndices),\n        eachTextureSetTextures: new Int32Array(numTextureSets * 5), // For each texture set, a set of five Texture indices [color, metal/roughness,normals,emissive,occlusion]; each index has value -1 if no texture\n        matrices: new Float32Array(lenMatrices), // Modeling matrices for entities that share geometries. Each entity either shares all it's geometries, or owns all its geometries exclusively. Exclusively-owned geometries are pre-transformed into World-space, and so their entities don't have modeling matrices in this array.\n        reusedGeometriesDecodeMatrix: new Float32Array(xktModel.reusedGeometriesDecodeMatrix), // A single, global vertex position de-quantization matrix for all reused geometries. Reused geometries are quantized to their collective Local-space AABB, and this matrix is derived from that AABB.\n        eachGeometryPrimitiveType: new Uint8Array(numGeometries), // Primitive type for each geometry (0=solid triangles, 1=surface triangles, 2=lines, 3=points)\n        eachGeometryPositionsPortion: new Uint32Array(numGeometries), // For each geometry, an index to its first element in data.positions. Every primitive type has positions.\n        eachGeometryNormalsPortion: new Uint32Array(numGeometries), // For each geometry, an index to its first element in data.normals. If the next geometry has the same index, then this geometry has no normals.\n        eachGeometryColorsPortion: new Uint32Array(numGeometries), // For each geometry, an index to its first element in data.colors. If the next geometry has the same index, then this geometry has no colors.\n        eachGeometryUVsPortion: new Uint32Array(numGeometries), // For each geometry, an index to its first element in data.uvs. If the next geometry has the same index, then this geometry has no UVs.\n        eachGeometryIndicesPortion: new Uint32Array(numGeometries), // For each geometry, an index to its first element in data.indices. If the next geometry has the same index, then this geometry has no indices.\n        eachGeometryEdgeIndicesPortion: new Uint32Array(numGeometries), // For each geometry, an index to its first element in data.edgeIndices. If the next geometry has the same index, then this geometry has no edge indices.\n        eachMeshGeometriesPortion: new Uint32Array(numMeshes), // For each mesh, an index into the eachGeometry* arrays\n        eachMeshMatricesPortion: new Uint32Array(numMeshes), // For each mesh that shares its geometry, an index to its first element in data.matrices, to indicate the modeling matrix that transforms the shared geometry Local-space vertex positions. This is ignored for meshes that don't share geometries, because the vertex positions of non-shared geometries are pre-transformed into World-space.\n        eachMeshTextureSet: new Int32Array(numMeshes), // For each mesh, the index of its texture set in data.eachTextureSetTextures; this array contains signed integers so that we can use -1 to indicate when a mesh has no texture set\n        eachMeshMaterialAttributes: new Uint8Array(numMeshes * NUM_MATERIAL_ATTRIBUTES), // For each mesh, an RGBA integer color of format [0..255, 0..255, 0..255, 0..255], and PBR metallic and roughness factors, of format [0..255, 0..255]\n        eachEntityId: [], // For each entity, an ID string\n        eachEntityMeshesPortion: new Uint32Array(numEntities), // For each entity, the index of the first element of meshes used by the entity\n        eachTileAABB: new Float64Array(numTiles * 6), // For each tile, an axis-aligned bounding box\n        eachTileEntitiesPortion: new Uint32Array(numTiles) // For each tile, the index of the the first element of eachEntityId, eachEntityMeshesPortion and eachEntityMatricesPortion used by the tile\n    };\n\n    let countPositions = 0;\n    let countNormals = 0;\n    let countColors = 0;\n    let countUVs = 0;\n    let countIndices = 0;\n    let countEdgeIndices = 0;\n\n    // Metadata\n\n    data.metadata = {\n        id: xktModel.modelId,\n        projectId: xktModel.projectId,\n        revisionId: xktModel.revisionId,\n        author: xktModel.author,\n        createdAt: xktModel.createdAt,\n        creatingApplication: xktModel.creatingApplication,\n        schema: xktModel.schema,\n        propertySets: [],\n        metaObjects: []\n    };\n\n    // Property sets\n\n    for (let propertySetsIndex = 0; propertySetsIndex < numPropertySets; propertySetsIndex++) {\n        const propertySet = propertySetsList[propertySetsIndex];\n        const propertySetJSON = {\n            id: \"\" + propertySet.propertySetId,\n            name: propertySet.propertySetName,\n            type: propertySet.propertySetType,\n            properties: propertySet.properties\n        };\n        data.metadata.propertySets.push(propertySetJSON);\n    }\n\n    // Metaobjects\n\n    if (!metaModelData) {\n        for (let metaObjectsIndex = 0; metaObjectsIndex < numMetaObjects; metaObjectsIndex++) {\n            const metaObject = metaObjectsList[metaObjectsIndex];\n            const metaObjectJSON = {\n                name: metaObject.metaObjectName,\n                type: metaObject.metaObjectType,\n                id: \"\" + metaObject.metaObjectId\n            };\n            if (metaObject.parentMetaObjectId !== undefined && metaObject.parentMetaObjectId !== null) {\n                metaObjectJSON.parent = \"\" + metaObject.parentMetaObjectId;\n            }\n            if (metaObject.propertySetIds && metaObject.propertySetIds.length > 0) {\n                metaObjectJSON.propertySetIds = metaObject.propertySetIds;\n            }\n            if (metaObject.external) {\n                metaObjectJSON.external = metaObject.external;\n            }\n            data.metadata.metaObjects.push(metaObjectJSON);\n        }\n    }\n\n    // Geometries\n\n    for (let geometryIndex = 0; geometryIndex < numGeometries; geometryIndex++) {\n        const geometry = geometriesList [geometryIndex];\n        const primitiveType = (geometry.primitiveType === \"triangles\") ? (geometry.solid ? 0 : 1) : (geometry.primitiveType === \"points\" ? 2 : 3)\n        data.eachGeometryPrimitiveType [geometryIndex] = primitiveType;\n        data.eachGeometryPositionsPortion [geometryIndex] = countPositions;\n        data.eachGeometryNormalsPortion [geometryIndex] = countNormals;\n        data.eachGeometryColorsPortion [geometryIndex] = countColors;\n        data.eachGeometryUVsPortion [geometryIndex] = countUVs;\n        data.eachGeometryIndicesPortion [geometryIndex] = countIndices;\n        data.eachGeometryEdgeIndicesPortion [geometryIndex] = countEdgeIndices;\n        if (geometry.positionsQuantized) {\n            data.positions.set(geometry.positionsQuantized, countPositions);\n            countPositions += geometry.positionsQuantized.length;\n        }\n        if (geometry.normalsOctEncoded) {\n            data.normals.set(geometry.normalsOctEncoded, countNormals);\n            countNormals += geometry.normalsOctEncoded.length;\n        }\n        if (geometry.colorsCompressed) {\n            data.colors.set(geometry.colorsCompressed, countColors);\n            countColors += geometry.colorsCompressed.length;\n        }\n        if (geometry.uvs) {\n            data.uvs.set(geometry.uvs, countUVs);\n            countUVs += geometry.uvs.length;\n        }\n        if (geometry.indices) {\n            data.indices.set(geometry.indices, countIndices);\n            countIndices += geometry.indices.length;\n        }\n        if (geometry.edgeIndices) {\n            data.edgeIndices.set(geometry.edgeIndices, countEdgeIndices);\n            countEdgeIndices += geometry.edgeIndices.length;\n        }\n    }\n\n    // Textures\n\n    for (let textureIndex = 0, numTextures = xktModel.texturesList.length, portionIdx = 0; textureIndex < numTextures; textureIndex++) {\n        const xktTexture = xktModel.texturesList[textureIndex];\n        const imageData = xktTexture.imageData;\n        data.textureData.set(imageData, portionIdx);\n        data.eachTextureDataPortion[textureIndex] = portionIdx;\n\n        portionIdx += imageData.byteLength;\n\n        let textureAttrIdx = textureIndex * NUM_TEXTURE_ATTRIBUTES;\n        data.eachTextureAttributes[textureAttrIdx++] = xktTexture.compressed ? 1 : 0;\n        data.eachTextureAttributes[textureAttrIdx++] = xktTexture.mediaType; // GIFMediaType | PNGMediaType | JPEGMediaType\n        data.eachTextureAttributes[textureAttrIdx++] = xktTexture.width;\n        data.eachTextureAttributes[textureAttrIdx++] = xktTexture.height;\n        data.eachTextureAttributes[textureAttrIdx++] = xktTexture.minFilter; // LinearMipmapLinearFilter | LinearMipMapNearestFilter | NearestMipMapNearestFilter | NearestMipMapLinearFilter | LinearMipMapLinearFilter\n        data.eachTextureAttributes[textureAttrIdx++] = xktTexture.magFilter; // LinearFilter | NearestFilter\n        data.eachTextureAttributes[textureAttrIdx++] = xktTexture.wrapS; // ClampToEdgeWrapping | MirroredRepeatWrapping | RepeatWrapping\n        data.eachTextureAttributes[textureAttrIdx++] = xktTexture.wrapT; // ClampToEdgeWrapping | MirroredRepeatWrapping | RepeatWrapping\n        data.eachTextureAttributes[textureAttrIdx++] = xktTexture.wrapR; // ClampToEdgeWrapping | MirroredRepeatWrapping | RepeatWrapping\n    }\n\n    // Texture sets\n\n    for (let textureSetIndex = 0, numTextureSets = xktModel.textureSetsList.length, eachTextureSetTexturesIndex = 0; textureSetIndex < numTextureSets; textureSetIndex++) {\n        const textureSet = textureSetsList[textureSetIndex];\n        data.eachTextureSetTextures[eachTextureSetTexturesIndex++] = textureSet.colorTexture ? textureSet.colorTexture.textureIndex : -1; // Color map\n        data.eachTextureSetTextures[eachTextureSetTexturesIndex++] = textureSet.metallicRoughnessTexture ? textureSet.metallicRoughnessTexture.textureIndex : -1; // Metal/rough map\n        data.eachTextureSetTextures[eachTextureSetTexturesIndex++] = textureSet.normalsTexture ? textureSet.normalsTexture.textureIndex : -1; // Normal map\n        data.eachTextureSetTextures[eachTextureSetTexturesIndex++] = textureSet.emissiveTexture ? textureSet.emissiveTexture.textureIndex : -1; // Emissive map\n        data.eachTextureSetTextures[eachTextureSetTexturesIndex++] = textureSet.occlusionTexture ? textureSet.occlusionTexture.textureIndex : -1; // Occlusion map\n    }\n\n    // Tiles -> Entities -> Meshes\n\n    let entityIndex = 0;\n    let countEntityMeshesPortion = 0;\n    let eachMeshMaterialAttributesIndex = 0;\n    let matricesIndex = 0;\n    let meshIndex = 0;\n\n    for (let tileIndex = 0; tileIndex < numTiles; tileIndex++) {\n\n        const tile = tilesList [tileIndex];\n        const tileEntities = tile.entities;\n        const numTileEntities = tileEntities.length;\n\n        if (numTileEntities === 0) {\n            continue;\n        }\n\n        data.eachTileEntitiesPortion[tileIndex] = entityIndex;\n\n        const tileAABB = tile.aabb;\n\n        for (let j = 0; j < numTileEntities; j++) {\n\n            const entity = tileEntities[j];\n            const entityMeshes = entity.meshes;\n            const numEntityMeshes = entityMeshes.length;\n\n            for (let k = 0; k < numEntityMeshes; k++) {\n\n                const mesh = entityMeshes[k];\n                const geometry = mesh.geometry;\n                const geometryIndex = geometry.geometryIndex;\n\n                data.eachMeshGeometriesPortion [countEntityMeshesPortion + k] = geometryIndex;\n\n                if (mesh.geometry.numInstances > 1) {\n                    data.matrices.set(mesh.matrix, matricesIndex);\n                    data.eachMeshMatricesPortion [meshIndex] = matricesIndex;\n                    matricesIndex += 16;\n                }\n\n                data.eachMeshTextureSet[meshIndex] = mesh.textureSet ? mesh.textureSet.textureSetIndex : -1;\n\n                data.eachMeshMaterialAttributes[eachMeshMaterialAttributesIndex++] = (mesh.color[0] * 255); // Color RGB\n                data.eachMeshMaterialAttributes[eachMeshMaterialAttributesIndex++] = (mesh.color[1] * 255);\n                data.eachMeshMaterialAttributes[eachMeshMaterialAttributesIndex++] = (mesh.color[2] * 255);\n                data.eachMeshMaterialAttributes[eachMeshMaterialAttributesIndex++] = (mesh.opacity * 255); // Opacity\n                data.eachMeshMaterialAttributes[eachMeshMaterialAttributesIndex++] = (mesh.metallic * 255); // Metallic\n                data.eachMeshMaterialAttributes[eachMeshMaterialAttributesIndex++] = (mesh.roughness * 255); // Roughness\n\n                meshIndex++;\n            }\n\n            data.eachEntityId [entityIndex] = entity.entityId;\n            data.eachEntityMeshesPortion[entityIndex] = countEntityMeshesPortion; // <<<<<<<<<<<<<<<<<<<< Error here? Order/value of countEntityMeshesPortion correct?\n\n            entityIndex++;\n            countEntityMeshesPortion += numEntityMeshes;\n        }\n\n        const tileAABBIndex = tileIndex * 6;\n\n        data.eachTileAABB.set(tileAABB, tileAABBIndex);\n    }\n\n    return data;\n}\n\nfunction deflateData(data, metaModelData) {\n    return {\n        metadata: metaModelData ? pako.deflate(metaModelData.buffer) : pako.deflate(deflateJSON(data.metadata)),\n        textureData: pako.deflate(data.textureData.buffer),\n        eachTextureDataPortion: pako.deflate(data.eachTextureDataPortion.buffer),\n        eachTextureAttributes: pako.deflate(data.eachTextureAttributes.buffer),\n        positions: pako.deflate(data.positions.buffer),\n        normals: pako.deflate(data.normals.buffer),\n        colors: pako.deflate(data.colors.buffer),\n        uvs: pako.deflate(data.uvs.buffer),\n        indices: pako.deflate(data.indices.buffer),\n        edgeIndices: pako.deflate(data.edgeIndices.buffer),\n        eachTextureSetTextures: pako.deflate(data.eachTextureSetTextures.buffer),\n        matrices: pako.deflate(data.matrices.buffer),\n        reusedGeometriesDecodeMatrix: pako.deflate(data.reusedGeometriesDecodeMatrix.buffer),\n        eachGeometryPrimitiveType: pako.deflate(data.eachGeometryPrimitiveType.buffer),\n        eachGeometryPositionsPortion: pako.deflate(data.eachGeometryPositionsPortion.buffer),\n        eachGeometryNormalsPortion: pako.deflate(data.eachGeometryNormalsPortion.buffer),\n        eachGeometryColorsPortion: pako.deflate(data.eachGeometryColorsPortion.buffer),\n        eachGeometryUVsPortion: pako.deflate(data.eachGeometryUVsPortion.buffer),\n        eachGeometryIndicesPortion: pako.deflate(data.eachGeometryIndicesPortion.buffer),\n        eachGeometryEdgeIndicesPortion: pako.deflate(data.eachGeometryEdgeIndicesPortion.buffer),\n        eachMeshGeometriesPortion: pako.deflate(data.eachMeshGeometriesPortion.buffer),\n        eachMeshMatricesPortion: pako.deflate(data.eachMeshMatricesPortion.buffer),\n        eachMeshTextureSet: pako.deflate(data.eachMeshTextureSet.buffer),\n        eachMeshMaterialAttributes: pako.deflate(data.eachMeshMaterialAttributes.buffer),\n        eachEntityId: pako.deflate(JSON.stringify(data.eachEntityId)\n            .replace(/[\\u007F-\\uFFFF]/g, function (chr) { // Produce only ASCII-chars, so that the data can be inflated later\n                return \"\\\\u\" + (\"0000\" + chr.charCodeAt(0).toString(16)).substr(-4)\n            })),\n        eachEntityMeshesPortion: pako.deflate(data.eachEntityMeshesPortion.buffer),\n        eachTileAABB: pako.deflate(data.eachTileAABB.buffer),\n        eachTileEntitiesPortion: pako.deflate(data.eachTileEntitiesPortion.buffer)\n    };\n}\n\nfunction deflateJSON(strings) {\n    return JSON.stringify(strings)\n        .replace(/[\\u007F-\\uFFFF]/g, function (chr) { // Produce only ASCII-chars, so that the data can be inflated later\n            return \"\\\\u\" + (\"0000\" + chr.charCodeAt(0).toString(16)).substr(-4)\n        });\n}\n\nfunction createArrayBuffer(deflatedData) {\n    return toArrayBuffer([\n        deflatedData.metadata,\n        deflatedData.textureData,\n        deflatedData.eachTextureDataPortion,\n        deflatedData.eachTextureAttributes,\n        deflatedData.positions,\n        deflatedData.normals,\n        deflatedData.colors,\n        deflatedData.uvs,\n        deflatedData.indices,\n        deflatedData.edgeIndices,\n        deflatedData.eachTextureSetTextures,\n        deflatedData.matrices,\n        deflatedData.reusedGeometriesDecodeMatrix,\n        deflatedData.eachGeometryPrimitiveType,\n        deflatedData.eachGeometryPositionsPortion,\n        deflatedData.eachGeometryNormalsPortion,\n        deflatedData.eachGeometryColorsPortion,\n        deflatedData.eachGeometryUVsPortion,\n        deflatedData.eachGeometryIndicesPortion,\n        deflatedData.eachGeometryEdgeIndicesPortion,\n        deflatedData.eachMeshGeometriesPortion,\n        deflatedData.eachMeshMatricesPortion,\n        deflatedData.eachMeshTextureSet,\n        deflatedData.eachMeshMaterialAttributes,\n        deflatedData.eachEntityId,\n        deflatedData.eachEntityMeshesPortion,\n        deflatedData.eachTileAABB,\n        deflatedData.eachTileEntitiesPortion\n    ]);\n}\n\nfunction toArrayBuffer(elements) {\n    const indexData = new Uint32Array(elements.length + 2);\n    indexData[0] = XKT_VERSION;\n    indexData [1] = elements.length;  // Stored Data 1.1: number of stored elements\n    let dataLen = 0;    // Stored Data 1.2: length of stored elements\n    for (let i = 0, len = elements.length; i < len; i++) {\n        const element = elements[i];\n        const elementsize = element.length;\n        indexData[i + 2] = elementsize;\n        dataLen += elementsize;\n    }\n    const indexBuf = new Uint8Array(indexData.buffer);\n    const dataArray = new Uint8Array(indexBuf.length + dataLen);\n    dataArray.set(indexBuf);\n    let offset = indexBuf.length;\n    for (let i = 0, len = elements.length; i < len; i++) {     // Stored Data 2: the elements themselves\n        const element = elements[i];\n        dataArray.set(element, offset);\n        offset += element.length;\n    }\n    return dataArray.buffer;\n}\n\nexport {writeXKTModelToArrayBuffer};","/** @private */\nfunction earcut(data, holeIndices, dim) {\n\n    dim = dim || 2;\n\n    var hasHoles = holeIndices && holeIndices.length,\n        outerLen = hasHoles ? holeIndices[0] * dim : data.length,\n        outerNode = linkedList(data, 0, outerLen, dim, true),\n        triangles = [];\n\n    if (!outerNode || outerNode.next === outerNode.prev) return triangles;\n\n    var minX, minY, maxX, maxY, x, y, invSize;\n\n    if (hasHoles) outerNode = eliminateHoles(data, holeIndices, outerNode, dim);\n\n    // if the shape is not too simple, we'll use z-order curve hash later; calculate polygon bbox\n    if (data.length > 80 * dim) {\n        minX = maxX = data[0];\n        minY = maxY = data[1];\n\n        for (var i = dim; i < outerLen; i += dim) {\n            x = data[i];\n            y = data[i + 1];\n            if (x < minX) minX = x;\n            if (y < minY) minY = y;\n            if (x > maxX) maxX = x;\n            if (y > maxY) maxY = y;\n        }\n\n        // minX, minY and invSize are later used to transform coords into integers for z-order calculation\n        invSize = Math.max(maxX - minX, maxY - minY);\n        invSize = invSize !== 0 ? 1 / invSize : 0;\n    }\n\n    earcutLinked(outerNode, triangles, dim, minX, minY, invSize);\n\n    return triangles;\n}\n\n// create a circular doubly linked list from polygon points in the specified winding order\nfunction linkedList(data, start, end, dim, clockwise) {\n    var i, last;\n\n    if (clockwise === (signedArea(data, start, end, dim) > 0)) {\n        for (i = start; i < end; i += dim) last = insertNode(i, data[i], data[i + 1], last);\n    } else {\n        for (i = end - dim; i >= start; i -= dim) last = insertNode(i, data[i], data[i + 1], last);\n    }\n\n    if (last && equals(last, last.next)) {\n        removeNode(last);\n        last = last.next;\n    }\n\n    return last;\n}\n\n// eliminate colinear or duplicate points\nfunction filterPoints(start, end) {\n    if (!start) return start;\n    if (!end) end = start;\n\n    var p = start,\n        again;\n    do {\n        again = false;\n\n        if (!p.steiner && (equals(p, p.next) || area(p.prev, p, p.next) === 0)) {\n            removeNode(p);\n            p = end = p.prev;\n            if (p === p.next) break;\n            again = true;\n\n        } else {\n            p = p.next;\n        }\n    } while (again || p !== end);\n\n    return end;\n}\n\n// main ear slicing loop which triangulates a polygon (given as a linked list)\nfunction earcutLinked(ear, triangles, dim, minX, minY, invSize, pass) {\n    if (!ear) return;\n\n    // interlink polygon nodes in z-order\n    if (!pass && invSize) indexCurve(ear, minX, minY, invSize);\n\n    var stop = ear,\n        prev, next;\n\n    // iterate through ears, slicing them one by one\n    while (ear.prev !== ear.next) {\n        prev = ear.prev;\n        next = ear.next;\n\n        if (invSize ? isEarHashed(ear, minX, minY, invSize) : isEar(ear)) {\n            // cut off the triangle\n            triangles.push(prev.i / dim);\n            triangles.push(ear.i / dim);\n            triangles.push(next.i / dim);\n\n            removeNode(ear);\n\n            // skipping the next vertex leads to less sliver triangles\n            ear = next.next;\n            stop = next.next;\n\n            continue;\n        }\n\n        ear = next;\n\n        // if we looped through the whole remaining polygon and can't find any more ears\n        if (ear === stop) {\n            // try filtering points and slicing again\n            if (!pass) {\n                earcutLinked(filterPoints(ear), triangles, dim, minX, minY, invSize, 1);\n\n                // if this didn't work, try curing all small self-intersections locally\n            } else if (pass === 1) {\n                ear = cureLocalIntersections(filterPoints(ear), triangles, dim);\n                earcutLinked(ear, triangles, dim, minX, minY, invSize, 2);\n\n                // as a last resort, try splitting the remaining polygon into two\n            } else if (pass === 2) {\n                splitEarcut(ear, triangles, dim, minX, minY, invSize);\n            }\n\n            break;\n        }\n    }\n}\n\n// check whether a polygon node forms a valid ear with adjacent nodes\nfunction isEar(ear) {\n    var a = ear.prev,\n        b = ear,\n        c = ear.next;\n\n    if (area(a, b, c) >= 0) return false; // reflex, can't be an ear\n\n    // now make sure we don't have other points inside the potential ear\n    var p = ear.next.next;\n\n    while (p !== ear.prev) {\n        if (pointInTriangle(a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y) &&\n            area(p.prev, p, p.next) >= 0) return false;\n        p = p.next;\n    }\n\n    return true;\n}\n\nfunction isEarHashed(ear, minX, minY, invSize) {\n    var a = ear.prev,\n        b = ear,\n        c = ear.next;\n\n    if (area(a, b, c) >= 0) return false; // reflex, can't be an ear\n\n    // triangle bbox; min & max are calculated like this for speed\n    var minTX = a.x < b.x ? (a.x < c.x ? a.x : c.x) : (b.x < c.x ? b.x : c.x),\n        minTY = a.y < b.y ? (a.y < c.y ? a.y : c.y) : (b.y < c.y ? b.y : c.y),\n        maxTX = a.x > b.x ? (a.x > c.x ? a.x : c.x) : (b.x > c.x ? b.x : c.x),\n        maxTY = a.y > b.y ? (a.y > c.y ? a.y : c.y) : (b.y > c.y ? b.y : c.y);\n\n    // z-order range for the current triangle bbox;\n    var minZ = zOrder(minTX, minTY, minX, minY, invSize),\n        maxZ = zOrder(maxTX, maxTY, minX, minY, invSize);\n\n    var p = ear.prevZ,\n        n = ear.nextZ;\n\n    // look for points inside the triangle in both directions\n    while (p && p.z >= minZ && n && n.z <= maxZ) {\n        if (p !== ear.prev && p !== ear.next &&\n            pointInTriangle(a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y) &&\n            area(p.prev, p, p.next) >= 0) return false;\n        p = p.prevZ;\n\n        if (n !== ear.prev && n !== ear.next &&\n            pointInTriangle(a.x, a.y, b.x, b.y, c.x, c.y, n.x, n.y) &&\n            area(n.prev, n, n.next) >= 0) return false;\n        n = n.nextZ;\n    }\n\n    // look for remaining points in decreasing z-order\n    while (p && p.z >= minZ) {\n        if (p !== ear.prev && p !== ear.next &&\n            pointInTriangle(a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y) &&\n            area(p.prev, p, p.next) >= 0) return false;\n        p = p.prevZ;\n    }\n\n    // look for remaining points in increasing z-order\n    while (n && n.z <= maxZ) {\n        if (n !== ear.prev && n !== ear.next &&\n            pointInTriangle(a.x, a.y, b.x, b.y, c.x, c.y, n.x, n.y) &&\n            area(n.prev, n, n.next) >= 0) return false;\n        n = n.nextZ;\n    }\n\n    return true;\n}\n\n// go through all polygon nodes and cure small local self-intersections\nfunction cureLocalIntersections(start, triangles, dim) {\n    var p = start;\n    do {\n        var a = p.prev,\n            b = p.next.next;\n\n        if (!equals(a, b) && intersects(a, p, p.next, b) && locallyInside(a, b) && locallyInside(b, a)) {\n\n            triangles.push(a.i / dim);\n            triangles.push(p.i / dim);\n            triangles.push(b.i / dim);\n\n            // remove two nodes involved\n            removeNode(p);\n            removeNode(p.next);\n\n            p = start = b;\n        }\n        p = p.next;\n    } while (p !== start);\n\n    return filterPoints(p);\n}\n\n// try splitting polygon into two and triangulate them independently\nfunction splitEarcut(start, triangles, dim, minX, minY, invSize) {\n    // look for a valid diagonal that divides the polygon into two\n    var a = start;\n    do {\n        var b = a.next.next;\n        while (b !== a.prev) {\n            if (a.i !== b.i && isValidDiagonal(a, b)) {\n                // split the polygon in two by the diagonal\n                var c = splitPolygon(a, b);\n\n                // filter colinear points around the cuts\n                a = filterPoints(a, a.next);\n                c = filterPoints(c, c.next);\n\n                // run earcut on each half\n                earcutLinked(a, triangles, dim, minX, minY, invSize);\n                earcutLinked(c, triangles, dim, minX, minY, invSize);\n                return;\n            }\n            b = b.next;\n        }\n        a = a.next;\n    } while (a !== start);\n}\n\n// link every hole into the outer loop, producing a single-ring polygon without holes\nfunction eliminateHoles(data, holeIndices, outerNode, dim) {\n    var queue = [],\n        i, len, start, end, list;\n\n    for (i = 0, len = holeIndices.length; i < len; i++) {\n        start = holeIndices[i] * dim;\n        end = i < len - 1 ? holeIndices[i + 1] * dim : data.length;\n        list = linkedList(data, start, end, dim, false);\n        if (list === list.next) list.steiner = true;\n        queue.push(getLeftmost(list));\n    }\n\n    queue.sort(compareX);\n\n    // process holes from left to right\n    for (i = 0; i < queue.length; i++) {\n        eliminateHole(queue[i], outerNode);\n        outerNode = filterPoints(outerNode, outerNode.next);\n    }\n\n    return outerNode;\n}\n\nfunction compareX(a, b) {\n    return a.x - b.x;\n}\n\n// find a bridge between vertices that connects hole with an outer ring and and link it\nfunction eliminateHole(hole, outerNode) {\n    outerNode = findHoleBridge(hole, outerNode);\n    if (outerNode) {\n        var b = splitPolygon(outerNode, hole);\n\n        // filter collinear points around the cuts\n        filterPoints(outerNode, outerNode.next);\n        filterPoints(b, b.next);\n    }\n}\n\n// David Eberly's algorithm for finding a bridge between hole and outer polygon\nfunction findHoleBridge(hole, outerNode) {\n    var p = outerNode,\n        hx = hole.x,\n        hy = hole.y,\n        qx = -Infinity,\n        m;\n\n    // find a segment intersected by a ray from the hole's leftmost point to the left;\n    // segment's endpoint with lesser x will be potential connection point\n    do {\n        if (hy <= p.y && hy >= p.next.y && p.next.y !== p.y) {\n            var x = p.x + (hy - p.y) * (p.next.x - p.x) / (p.next.y - p.y);\n            if (x <= hx && x > qx) {\n                qx = x;\n                if (x === hx) {\n                    if (hy === p.y) return p;\n                    if (hy === p.next.y) return p.next;\n                }\n                m = p.x < p.next.x ? p : p.next;\n            }\n        }\n        p = p.next;\n    } while (p !== outerNode);\n\n    if (!m) return null;\n\n    if (hx === qx) return m; // hole touches outer segment; pick leftmost endpoint\n\n    // look for points inside the triangle of hole point, segment intersection and endpoint;\n    // if there are no points found, we have a valid connection;\n    // otherwise choose the point of the minimum angle with the ray as connection point\n\n    var stop = m,\n        mx = m.x,\n        my = m.y,\n        tanMin = Infinity,\n        tan;\n\n    p = m;\n\n    do {\n        if (hx >= p.x && p.x >= mx && hx !== p.x &&\n            pointInTriangle(hy < my ? hx : qx, hy, mx, my, hy < my ? qx : hx, hy, p.x, p.y)) {\n\n            tan = Math.abs(hy - p.y) / (hx - p.x); // tangential\n\n            if (locallyInside(p, hole) &&\n                (tan < tanMin || (tan === tanMin && (p.x > m.x || (p.x === m.x && sectorContainsSector(m, p)))))) {\n                m = p;\n                tanMin = tan;\n            }\n        }\n\n        p = p.next;\n    } while (p !== stop);\n\n    return m;\n}\n\n// whether sector in vertex m contains sector in vertex p in the same coordinates\nfunction sectorContainsSector(m, p) {\n    return area(m.prev, m, p.prev) < 0 && area(p.next, m, m.next) < 0;\n}\n\n// interlink polygon nodes in z-order\nfunction indexCurve(start, minX, minY, invSize) {\n    var p = start;\n    do {\n        if (p.z === null) p.z = zOrder(p.x, p.y, minX, minY, invSize);\n        p.prevZ = p.prev;\n        p.nextZ = p.next;\n        p = p.next;\n    } while (p !== start);\n\n    p.prevZ.nextZ = null;\n    p.prevZ = null;\n\n    sortLinked(p);\n}\n\n// Simon Tatham's linked list merge sort algorithm\n// http://www.chiark.greenend.org.uk/~sgtatham/algorithms/listsort.html\nfunction sortLinked(list) {\n    var i, p, q, e, tail, numMerges, pSize, qSize,\n        inSize = 1;\n\n    do {\n        p = list;\n        list = null;\n        tail = null;\n        numMerges = 0;\n\n        while (p) {\n            numMerges++;\n            q = p;\n            pSize = 0;\n            for (i = 0; i < inSize; i++) {\n                pSize++;\n                q = q.nextZ;\n                if (!q) break;\n            }\n            qSize = inSize;\n\n            while (pSize > 0 || (qSize > 0 && q)) {\n\n                if (pSize !== 0 && (qSize === 0 || !q || p.z <= q.z)) {\n                    e = p;\n                    p = p.nextZ;\n                    pSize--;\n                } else {\n                    e = q;\n                    q = q.nextZ;\n                    qSize--;\n                }\n\n                if (tail) tail.nextZ = e;\n                else list = e;\n\n                e.prevZ = tail;\n                tail = e;\n            }\n\n            p = q;\n        }\n\n        tail.nextZ = null;\n        inSize *= 2;\n\n    } while (numMerges > 1);\n\n    return list;\n}\n\n// z-order of a point given coords and inverse of the longer side of data bbox\nfunction zOrder(x, y, minX, minY, invSize) {\n    // coords are transformed into non-negative 15-bit integer range\n    x = 32767 * (x - minX) * invSize;\n    y = 32767 * (y - minY) * invSize;\n\n    x = (x | (x << 8)) & 0x00FF00FF;\n    x = (x | (x << 4)) & 0x0F0F0F0F;\n    x = (x | (x << 2)) & 0x33333333;\n    x = (x | (x << 1)) & 0x55555555;\n\n    y = (y | (y << 8)) & 0x00FF00FF;\n    y = (y | (y << 4)) & 0x0F0F0F0F;\n    y = (y | (y << 2)) & 0x33333333;\n    y = (y | (y << 1)) & 0x55555555;\n\n    return x | (y << 1);\n}\n\n// find the leftmost node of a polygon ring\nfunction getLeftmost(start) {\n    var p = start,\n        leftmost = start;\n    do {\n        if (p.x < leftmost.x || (p.x === leftmost.x && p.y < leftmost.y)) leftmost = p;\n        p = p.next;\n    } while (p !== start);\n\n    return leftmost;\n}\n\n// check if a point lies within a convex triangle\nfunction pointInTriangle(ax, ay, bx, by, cx, cy, px, py) {\n    return (cx - px) * (ay - py) - (ax - px) * (cy - py) >= 0 &&\n        (ax - px) * (by - py) - (bx - px) * (ay - py) >= 0 &&\n        (bx - px) * (cy - py) - (cx - px) * (by - py) >= 0;\n}\n\n// check if a diagonal between two polygon nodes is valid (lies in polygon interior)\nfunction isValidDiagonal(a, b) {\n    return a.next.i !== b.i && a.prev.i !== b.i && !intersectsPolygon(a, b) && // dones't intersect other edges\n        (locallyInside(a, b) && locallyInside(b, a) && middleInside(a, b) && // locally visible\n            (area(a.prev, a, b.prev) || area(a, b.prev, b)) || // does not create opposite-facing sectors\n            equals(a, b) && area(a.prev, a, a.next) > 0 && area(b.prev, b, b.next) > 0); // special zero-length case\n}\n\n// signed area of a triangle\nfunction area(p, q, r) {\n    return (q.y - p.y) * (r.x - q.x) - (q.x - p.x) * (r.y - q.y);\n}\n\n// check if two points are equal\nfunction equals(p1, p2) {\n    return p1.x === p2.x && p1.y === p2.y;\n}\n\n// check if two segments intersect\nfunction intersects(p1, q1, p2, q2) {\n    var o1 = sign(area(p1, q1, p2));\n    var o2 = sign(area(p1, q1, q2));\n    var o3 = sign(area(p2, q2, p1));\n    var o4 = sign(area(p2, q2, q1));\n\n    if (o1 !== o2 && o3 !== o4) return true; // general case\n\n    if (o1 === 0 && onSegment(p1, p2, q1)) return true; // p1, q1 and p2 are collinear and p2 lies on p1q1\n    if (o2 === 0 && onSegment(p1, q2, q1)) return true; // p1, q1 and q2 are collinear and q2 lies on p1q1\n    if (o3 === 0 && onSegment(p2, p1, q2)) return true; // p2, q2 and p1 are collinear and p1 lies on p2q2\n    if (o4 === 0 && onSegment(p2, q1, q2)) return true; // p2, q2 and q1 are collinear and q1 lies on p2q2\n\n    return false;\n}\n\n// for collinear points p, q, r, check if point q lies on segment pr\nfunction onSegment(p, q, r) {\n    return q.x <= Math.max(p.x, r.x) && q.x >= Math.min(p.x, r.x) && q.y <= Math.max(p.y, r.y) && q.y >= Math.min(p.y, r.y);\n}\n\nfunction sign(num) {\n    return num > 0 ? 1 : num < 0 ? -1 : 0;\n}\n\n// check if a polygon diagonal intersects any polygon segments\nfunction intersectsPolygon(a, b) {\n    var p = a;\n    do {\n        if (p.i !== a.i && p.next.i !== a.i && p.i !== b.i && p.next.i !== b.i &&\n            intersects(p, p.next, a, b)) return true;\n        p = p.next;\n    } while (p !== a);\n\n    return false;\n}\n\n// check if a polygon diagonal is locally inside the polygon\nfunction locallyInside(a, b) {\n    return area(a.prev, a, a.next) < 0 ?\n        area(a, b, a.next) >= 0 && area(a, a.prev, b) >= 0 :\n        area(a, b, a.prev) < 0 || area(a, a.next, b) < 0;\n}\n\n// check if the middle point of a polygon diagonal is inside the polygon\nfunction middleInside(a, b) {\n    var p = a,\n        inside = false,\n        px = (a.x + b.x) / 2,\n        py = (a.y + b.y) / 2;\n    do {\n        if (((p.y > py) !== (p.next.y > py)) && p.next.y !== p.y &&\n            (px < (p.next.x - p.x) * (py - p.y) / (p.next.y - p.y) + p.x))\n            inside = !inside;\n        p = p.next;\n    } while (p !== a);\n\n    return inside;\n}\n\n// link two polygon vertices with a bridge; if the vertices belong to the same ring, it splits polygon into two;\n// if one belongs to the outer ring and another to a hole, it merges it into a single ring\nfunction splitPolygon(a, b) {\n    var a2 = new Node(a.i, a.x, a.y),\n        b2 = new Node(b.i, b.x, b.y),\n        an = a.next,\n        bp = b.prev;\n\n    a.next = b;\n    b.prev = a;\n\n    a2.next = an;\n    an.prev = a2;\n\n    b2.next = a2;\n    a2.prev = b2;\n\n    bp.next = b2;\n    b2.prev = bp;\n\n    return b2;\n}\n\n// create a node and optionally link it with previous one (in a circular doubly linked list)\nfunction insertNode(i, x, y, last) {\n    var p = new Node(i, x, y);\n\n    if (!last) {\n        p.prev = p;\n        p.next = p;\n\n    } else {\n        p.next = last.next;\n        p.prev = last;\n        last.next.prev = p;\n        last.next = p;\n    }\n    return p;\n}\n\nfunction removeNode(p) {\n    p.next.prev = p.prev;\n    p.prev.next = p.next;\n\n    if (p.prevZ) p.prevZ.nextZ = p.nextZ;\n    if (p.nextZ) p.nextZ.prevZ = p.prevZ;\n}\n\nfunction Node(i, x, y) {\n    // vertex index in coordinates array\n    this.i = i;\n\n    // vertex coordinates\n    this.x = x;\n    this.y = y;\n\n    // previous and next vertex nodes in a polygon ring\n    this.prev = null;\n    this.next = null;\n\n    // z-order curve value\n    this.z = null;\n\n    // previous and next nodes in z-order\n    this.prevZ = null;\n    this.nextZ = null;\n\n    // indicates whether this is a steiner point\n    this.steiner = false;\n}\n\n// return a percentage difference between the polygon area and its triangulation area;\n// used to verify correctness of triangulation\nearcut.deviation = function (data, holeIndices, dim, triangles) {\n    var hasHoles = holeIndices && holeIndices.length;\n    var outerLen = hasHoles ? holeIndices[0] * dim : data.length;\n\n    var polygonArea = Math.abs(signedArea(data, 0, outerLen, dim));\n    if (hasHoles) {\n        for (var i = 0, len = holeIndices.length; i < len; i++) {\n            var start = holeIndices[i] * dim;\n            var end = i < len - 1 ? holeIndices[i + 1] * dim : data.length;\n            polygonArea -= Math.abs(signedArea(data, start, end, dim));\n        }\n    }\n\n    var trianglesArea = 0;\n    for (i = 0; i < triangles.length; i += 3) {\n        var a = triangles[i] * dim;\n        var b = triangles[i + 1] * dim;\n        var c = triangles[i + 2] * dim;\n        trianglesArea += Math.abs(\n            (data[a] - data[c]) * (data[b + 1] - data[a + 1]) -\n            (data[a] - data[b]) * (data[c + 1] - data[a + 1]));\n    }\n\n    return polygonArea === 0 && trianglesArea === 0 ? 0 :\n        Math.abs((trianglesArea - polygonArea) / polygonArea);\n};\n\nfunction signedArea(data, start, end, dim) {\n    var sum = 0;\n    for (var i = start, j = end - dim; i < end; i += dim) {\n        sum += (data[j] - data[i]) * (data[i + 1] + data[j + 1]);\n        j = i;\n    }\n    return sum;\n}\n\n// turn a polygon in a multi-dimensional array form (e.g. as in GeoJSON) into a form Earcut accepts\nearcut.flatten = function (data) {\n    var dim = data[0][0].length,\n        result = {vertices: [], holes: [], dimensions: dim},\n        holeIndex = 0;\n\n    for (var i = 0; i < data.length; i++) {\n        for (var j = 0; j < data[i].length; j++) {\n            for (var d = 0; d < dim; d++) result.vertices.push(data[i][j][d]);\n        }\n        if (i > 0) {\n            holeIndex += data[i - 1].length;\n            result.holes.push(holeIndex);\n        }\n    }\n    return result;\n};\n\nexport {earcut};","import {earcut} from './../lib/earcut';\nimport {math} from \"./../lib/math.js\";\n\nconst tempVec2a = math.vec2();\nconst tempVec3a = math.vec3();\nconst tempVec3b = math.vec3();\nconst tempVec3c = math.vec3();\n\n/**\n * @desc Parses a CityJSON model into an {@link XKTModel}.\n *\n * [CityJSON](https://www.cityjson.org) is a JSON-based encoding for a subset of the CityGML data model (version 2.0.0),\n * which is an open standardised data model and exchange format to store digital 3D models of cities and\n * landscapes. CityGML is an official standard of the [Open Geospatial Consortium](https://www.ogc.org/).\n *\n * This converter function supports most of the [CityJSON 1.0.2 Specification](https://www.cityjson.org/specs/1.0.2),\n * with the following limitations:\n *\n * * Does not (yet) support CityJSON semantics for geometry primitives.\n * * Does not (yet) support textured geometries.\n * * Does not (yet) support geometry templates.\n * * When the CityJSON file provides multiple *themes* for a geometry, then we parse only the first of the provided themes for that geometry.\n *\n * ## Usage\n *\n * In the example below we'll create an {@link XKTModel}, then load a CityJSON model into it.\n *\n * ````javascript\n * utils.loadJSON(\"./models/cityjson/DenHaag.json\", async (data) => {\n *\n *     const xktModel = new XKTModel();\n *\n *     parseCityJSONIntoXKTModel({\n *          data,\n *          xktModel,\n *          log: (msg) => { console.log(msg); }\n *     }).then(()=>{\n *        xktModel.finalize();\n *     },\n *     (msg) => {\n *         console.error(msg);\n *     });\n * });\n * ````\n *\n * @param {Object} params Parsing params.\n * @param {Object} params.data CityJSON data.\n * @param {XKTModel} params.xktModel XKTModel to parse into.\n * @param {Object} [params.stats] Collects statistics.\n * @param {function} [params.log] Logging callback.\n @returns {Promise} Resolves when CityJSON has been parsed.\n */\nfunction parseCityJSONIntoXKTModel({data, xktModel, stats = {}, log}) {\n\n    return new Promise(function (resolve, reject) {\n\n        if (!data) {\n            reject(\"Argument expected: data\");\n            return;\n        }\n\n        if (data.type !== \"CityJSON\") {\n            reject(\"Invalid argument: data is not a CityJSON file\");\n            return;\n        }\n\n        if (!xktModel) {\n            reject(\"Argument expected: xktModel\");\n            return;\n        }\n\n        const vertices = data.transform // Avoid side effects - don't modify the CityJSON data\n            ? transformVertices(data.vertices, data.transform)\n            : data.vertices;\n\n        stats.sourceFormat = data.type || \"\";\n        stats.schemaVersion = data.version || \"\";\n        stats.title = \"\";\n        stats.author = \"\";\n        stats.created = \"\";\n        stats.numMetaObjects = 0;\n        stats.numPropertySets = 0;\n        stats.numTriangles = 0;\n        stats.numVertices = 0;\n        stats.numObjects = 0;\n        stats.numGeometries = 0;\n\n        const rootMetaObjectId = math.createUUID();\n\n        xktModel.createMetaObject({\n            metaObjectId: rootMetaObjectId,\n            metaObjectType: \"Model\",\n            metaObjectName: \"Model\"\n        });\n\n        stats.numMetaObjects++;\n\n        const modelMetaObjectId = math.createUUID();\n\n        xktModel.createMetaObject({\n            metaObjectId: modelMetaObjectId,\n            metaObjectType: \"CityJSON\",\n            metaObjectName: \"CityJSON\",\n            parentMetaObjectId: rootMetaObjectId\n        });\n\n        stats.numMetaObjects++;\n\n        const ctx = {\n            data,\n            vertices,\n            xktModel,\n            rootMetaObjectId: modelMetaObjectId,\n            log: (log || function (msg) {\n            }),\n            nextId: 0,\n            stats\n        };\n\n        ctx.log(\"Using parser: parseCityJSONIntoXKTModel\");\n\n        ctx.xktModel.schema = data.type + \" \" + data.version;\n\n        ctx.log(\"Converting \" + ctx.xktModel.schema);\n\n        parseCityJSON(ctx);\n\n        resolve();\n    });\n}\n\nfunction transformVertices(vertices, transform) {\n    const transformedVertices = [];\n    const scale = transform.scale || math.vec3([1, 1, 1]);\n    const translate = transform.translate || math.vec3([0, 0, 0]);\n    for (let i = 0, j = 0; i < vertices.length; i++, j += 3) {\n        const x = (vertices[i][0] * scale[0]) + translate[0];\n        const y = (vertices[i][1] * scale[1]) + translate[1];\n        const z = (vertices[i][2] * scale[2]) + translate[2];\n        transformedVertices.push([x, y, z]);\n    }\n    return transformedVertices;\n}\n\nfunction parseCityJSON(ctx) {\n\n    const data = ctx.data;\n    const cityObjects = data.CityObjects;\n\n    for (const objectId in cityObjects) {\n        if (cityObjects.hasOwnProperty(objectId)) {\n            const cityObject = cityObjects[objectId];\n            parseCityObject(ctx, cityObject, objectId);\n        }\n    }\n}\n\nfunction parseCityObject(ctx, cityObject, objectId) {\n\n    const xktModel = ctx.xktModel;\n    const data = ctx.data;\n    const metaObjectId = objectId;\n    const metaObjectType = cityObject.type;\n    const metaObjectName = metaObjectType + \" : \" + objectId;\n\n    const parentMetaObjectId = cityObject.parents ? cityObject.parents[0] : ctx.rootMetaObjectId;\n\n    xktModel.createMetaObject({\n        metaObjectId,\n        metaObjectName,\n        metaObjectType,\n        parentMetaObjectId\n    });\n\n    ctx.stats.numMetaObjects++;\n\n    if (!(cityObject.geometry && cityObject.geometry.length > 0)) {\n        return;\n    }\n\n    const meshIds = [];\n\n    for (let i = 0, len = cityObject.geometry.length; i < len; i++) {\n\n        const geometry = cityObject.geometry[i];\n\n        let objectMaterial;\n        let surfaceMaterials;\n\n        const appearance = data.appearance;\n        if (appearance) {\n            const materials = appearance.materials;\n            if (materials) {\n                const geometryMaterial = geometry.material;\n                if (geometryMaterial) {\n                    const themeIds = Object.keys(geometryMaterial);\n                    if (themeIds.length > 0) {\n                        const themeId = themeIds[0];\n                        const theme = geometryMaterial[themeId];\n                        if (theme.value !== undefined) {\n                            objectMaterial = materials[theme.value];\n                        } else {\n                            const values = theme.values;\n                            if (values) {\n                                surfaceMaterials = [];\n                                for (let j = 0, lenj = values.length; j < lenj; j++) {\n                                    const value = values[i];\n                                    const surfaceMaterial = materials[value];\n                                    surfaceMaterials.push(surfaceMaterial);\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        if (surfaceMaterials) {\n            parseGeometrySurfacesWithOwnMaterials(ctx, geometry, surfaceMaterials, meshIds);\n\n        } else {\n            parseGeometrySurfacesWithSharedMaterial(ctx, geometry, objectMaterial, meshIds);\n        }\n    }\n\n    if (meshIds.length > 0) {\n        xktModel.createEntity({\n            entityId: objectId,\n            meshIds: meshIds\n        });\n\n        ctx.stats.numObjects++;\n    }\n}\n\nfunction parseGeometrySurfacesWithOwnMaterials(ctx, geometry, surfaceMaterials, meshIds) {\n\n    const geomType = geometry.type;\n\n    switch (geomType) {\n\n        case \"MultiPoint\":\n            break;\n\n        case \"MultiLineString\":\n            break;\n\n        case \"MultiSurface\":\n\n        case \"CompositeSurface\":\n            const surfaces = geometry.boundaries;\n            parseSurfacesWithOwnMaterials(ctx, surfaceMaterials, surfaces, meshIds);\n            break;\n\n        case \"Solid\":\n            const shells = geometry.boundaries;\n            for (let j = 0; j < shells.length; j++) {\n                const surfaces = shells[j];\n                parseSurfacesWithOwnMaterials(ctx, surfaceMaterials, surfaces, meshIds);\n            }\n            break;\n\n        case \"MultiSolid\":\n\n        case \"CompositeSolid\":\n            const solids = geometry.boundaries;\n            for (let j = 0; j < solids.length; j++) {\n                for (let k = 0; k < solids[j].length; k++) {\n                    const surfaces = solids[j][k];\n                    parseSurfacesWithOwnMaterials(ctx, surfaceMaterials, surfaces, meshIds);\n                }\n            }\n            break;\n\n        case \"GeometryInstance\":\n            break;\n    }\n}\n\nfunction parseSurfacesWithOwnMaterials(ctx, surfaceMaterials, surfaces, meshIds) {\n\n    const vertices = ctx.vertices;\n    const xktModel = ctx.xktModel;\n\n    for (let i = 0; i < surfaces.length; i++) {\n\n        const surface = surfaces[i];\n        const surfaceMaterial = surfaceMaterials[i] || {diffuseColor: [0.8, 0.8, 0.8], transparency: 1.0};\n\n        const face = [];\n        const holes = [];\n\n        const sharedIndices = [];\n\n        const geometryCfg = {\n            positions: [],\n            indices: []\n        };\n\n        for (let j = 0; j < surface.length; j++) {\n\n            if (face.length > 0) {\n                holes.push(face.length);\n            }\n\n            const newFace = extractLocalIndices(ctx, surface[j], sharedIndices, geometryCfg);\n\n            face.push(...newFace);\n        }\n\n        if (face.length === 3) { // Triangle\n\n            geometryCfg.indices.push(face[0]);\n            geometryCfg.indices.push(face[1]);\n            geometryCfg.indices.push(face[2]);\n\n        } else if (face.length > 3) { // Polygon\n\n            // Prepare to triangulate\n\n            const pList = [];\n\n            for (let k = 0; k < face.length; k++) {\n                pList.push({\n                    x: vertices[sharedIndices[face[k]]][0],\n                    y: vertices[sharedIndices[face[k]]][1],\n                    z: vertices[sharedIndices[face[k]]][2]\n                });\n            }\n\n            const normal = getNormalOfPositions(pList, math.vec3());\n\n            // Convert to 2D\n\n            let pv = [];\n\n            for (let k = 0; k < pList.length; k++) {\n\n                to2D(pList[k], normal, tempVec2a);\n\n                pv.unshift(tempVec2a[0]);\n                pv.unshift(tempVec2a[1]);\n            }\n\n            // Triangulate\n\n            const tr = earcut(pv, holes, 2);\n\n            // Create triangles\n\n            for (let k = 0; k < tr.length; k += 3) {\n                geometryCfg.indices.unshift(face[tr[k]]);\n                geometryCfg.indices.unshift(face[tr[k + 1]]);\n                geometryCfg.indices.unshift(face[tr[k + 2]]);\n            }\n        }\n\n        const geometryId = \"\" + ctx.nextId++;\n        const meshId = \"\" + ctx.nextId++;\n\n        xktModel.createGeometry({\n            geometryId: geometryId,\n            primitiveType: \"triangles\",\n            positions: geometryCfg.positions,\n            indices: geometryCfg.indices\n        });\n\n        xktModel.createMesh({\n            meshId: meshId,\n            geometryId: geometryId,\n            color: (surfaceMaterial && surfaceMaterial.diffuseColor) ? surfaceMaterial.diffuseColor : [0.8, 0.8, 0.8],\n            opacity: 1.0\n            //opacity: (surfaceMaterial && surfaceMaterial.transparency !== undefined) ? (1.0 - surfaceMaterial.transparency) : 1.0\n        });\n\n        meshIds.push(meshId);\n\n        ctx.stats.numGeometries++;\n        ctx.stats.numVertices += geometryCfg.positions.length / 3;\n        ctx.stats.numTriangles += geometryCfg.indices.length / 3;\n    }\n}\n\nfunction parseGeometrySurfacesWithSharedMaterial(ctx, geometry, objectMaterial, meshIds) {\n\n    const xktModel = ctx.xktModel;\n    const sharedIndices = [];\n    const geometryCfg = {\n        positions: [],\n        indices: []\n    };\n\n    const geomType = geometry.type;\n\n    switch (geomType) {\n        case \"MultiPoint\":\n            break;\n\n        case \"MultiLineString\":\n            break;\n\n        case \"MultiSurface\":\n        case \"CompositeSurface\":\n            const surfaces = geometry.boundaries;\n            parseSurfacesWithSharedMaterial(ctx, surfaces, sharedIndices, geometryCfg);\n            break;\n\n        case \"Solid\":\n            const shells = geometry.boundaries;\n            for (let j = 0; j < shells.length; j++) {\n                const surfaces = shells[j];\n                parseSurfacesWithSharedMaterial(ctx, surfaces, sharedIndices, geometryCfg);\n            }\n            break;\n\n        case \"MultiSolid\":\n        case \"CompositeSolid\":\n            const solids = geometry.boundaries;\n            for (let j = 0; j < solids.length; j++) {\n                for (let k = 0; k < solids[j].length; k++) {\n                    const surfaces = solids[j][k];\n                    parseSurfacesWithSharedMaterial(ctx, surfaces, sharedIndices, geometryCfg);\n                }\n            }\n            break;\n\n        case \"GeometryInstance\":\n            break;\n    }\n\n    const geometryId = \"\" + ctx.nextId++;\n    const meshId = \"\" + ctx.nextId++;\n\n    xktModel.createGeometry({\n        geometryId: geometryId,\n        primitiveType: \"triangles\",\n        positions: geometryCfg.positions,\n        indices: geometryCfg.indices\n    });\n\n    xktModel.createMesh({\n        meshId: meshId,\n        geometryId: geometryId,\n        color: (objectMaterial && objectMaterial.diffuseColor) ? objectMaterial.diffuseColor : [0.8, 0.8, 0.8],\n        opacity: 1.0\n        //opacity: (objectMaterial && objectMaterial.transparency !== undefined) ? (1.0 - objectMaterial.transparency) : 1.0\n    });\n\n    meshIds.push(meshId);\n\n    ctx.stats.numGeometries++;\n    ctx.stats.numVertices += geometryCfg.positions.length / 3;\n    ctx.stats.numTriangles += geometryCfg.indices.length / 3;\n}\n\nfunction parseSurfacesWithSharedMaterial(ctx, surfaces, sharedIndices, primitiveCfg) {\n\n    const vertices = ctx.vertices;\n\n    for (let i = 0; i < surfaces.length; i++) {\n\n        let boundary = [];\n        let holes = [];\n\n        for (let j = 0; j < surfaces[i].length; j++) {\n            if (boundary.length > 0) {\n                holes.push(boundary.length);\n            }\n            const newBoundary = extractLocalIndices(ctx, surfaces[i][j], sharedIndices, primitiveCfg);\n            boundary.push(...newBoundary);\n        }\n\n        if (boundary.length === 3) { // Triangle\n\n            primitiveCfg.indices.push(boundary[0]);\n            primitiveCfg.indices.push(boundary[1]);\n            primitiveCfg.indices.push(boundary[2]);\n\n        } else if (boundary.length > 3) { // Polygon\n\n            let pList = [];\n\n            for (let k = 0; k < boundary.length; k++) {\n                pList.push({\n                    x: vertices[sharedIndices[boundary[k]]][0],\n                    y: vertices[sharedIndices[boundary[k]]][1],\n                    z: vertices[sharedIndices[boundary[k]]][2]\n                });\n            }\n\n            const normal = getNormalOfPositions(pList, math.vec3());\n            let pv = [];\n\n            for (let k = 0; k < pList.length; k++) {\n                to2D(pList[k], normal, tempVec2a);\n                pv.unshift(tempVec2a[0]);\n                pv.unshift(tempVec2a[1]);\n            }\n\n            const tr = earcut(pv, holes, 2);\n\n            for (let k = 0; k < tr.length; k += 3) {\n                primitiveCfg.indices.unshift(boundary[tr[k]]);\n                primitiveCfg.indices.unshift(boundary[tr[k + 1]]);\n                primitiveCfg.indices.unshift(boundary[tr[k + 2]]);\n            }\n        }\n    }\n}\n\nfunction extractLocalIndices(ctx, boundary, sharedIndices, geometryCfg) {\n\n    const vertices = ctx.vertices;\n    const newBoundary = []\n\n    for (let i = 0, len = boundary.length; i < len; i++) {\n\n        const index = boundary[i];\n\n        if (sharedIndices.includes(index)) {\n            const vertexIndex = sharedIndices.indexOf(index);\n            newBoundary.push(vertexIndex);\n\n        } else {\n            geometryCfg.positions.push(vertices[index][0]);\n            geometryCfg.positions.push(vertices[index][1]);\n            geometryCfg.positions.push(vertices[index][2]);\n\n            newBoundary.push(sharedIndices.length);\n\n            sharedIndices.push(index);\n        }\n    }\n\n    return newBoundary\n}\n\nfunction getNormalOfPositions(positions, normal) {\n\n    for (let i = 0; i < positions.length; i++) {\n\n        let nexti = i + 1;\n        if (nexti === positions.length) {\n            nexti = 0;\n        }\n\n        normal[0] += ((positions[i].y - positions[nexti].y) * (positions[i].z + positions[nexti].z));\n        normal[1] += ((positions[i].z - positions[nexti].z) * (positions[i].x + positions[nexti].x));\n        normal[2] += ((positions[i].x - positions[nexti].x) * (positions[i].y + positions[nexti].y));\n    }\n\n    return math.normalizeVec3(normal);\n}\n\nfunction to2D(_p, _n, re) {\n\n    const p = tempVec3a;\n    const n = tempVec3b;\n    const x3 = tempVec3c;\n\n    p[0] = _p.x;\n    p[1] = _p.y;\n    p[2] = _p.z;\n\n    n[0] = _n.x;\n    n[1] = _n.y;\n    n[2] = _n.z;\n\n    x3[0] = 1.1;\n    x3[1] = 1.1;\n    x3[2] = 1.1;\n\n    const dist = math.lenVec3(math.subVec3(x3, n));\n\n    if (dist < 0.01) {\n        x3[0] += 1.0;\n        x3[1] += 2.0;\n        x3[2] += 3.0;\n    }\n\n    const dot = math.dotVec3(x3, n);\n    const tmp2 = math.mulVec3Scalar(n, dot, math.vec3());\n\n    x3[0] -= tmp2[0];\n    x3[1] -= tmp2[1];\n    x3[2] -= tmp2[2];\n\n    math.normalizeVec3(x3);\n\n    const y3 = math.cross3Vec3(n, x3, math.vec3());\n    const x = math.dotVec3(p, x3);\n    const y = math.dotVec3(p, y3);\n\n    re[0] = x;\n    re[1] = y;\n}\n\nexport {parseCityJSONIntoXKTModel};","function isString(value) {\n    return (typeof value === 'string' || value instanceof String);\n}\n\nfunction apply(o, o2) {\n    for (const name in o) {\n        if (o.hasOwnProperty(name)) {\n            o2[name] = o[name];\n        }\n    }\n    return o2;\n}\n\n/**\n * @private\n */\nconst utils = {\n    isString,\n    apply\n};\n\nexport {utils};\n","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@loaders.gl/gltf\");","import {utils} from \"../XKTModel/lib/utils.js\";\nimport {math} from \"../lib/math.js\";\n\nimport {parse} from '@loaders.gl/core';\nimport {GLTFLoader} from '@loaders.gl/gltf';\nimport {\n    ClampToEdgeWrapping,\n    LinearFilter,\n    LinearMipMapLinearFilter,\n    LinearMipMapNearestFilter,\n    MirroredRepeatWrapping,\n    NearestFilter,\n    NearestMipMapLinearFilter,\n    NearestMipMapNearestFilter,\n    RepeatWrapping\n} from \"../constants.js\";\n\n/**\n * @desc Parses glTF into an {@link XKTModel}, supporting ````.glb```` and textures.\n *\n * * Supports ````.glb```` and textures\n * * For a lightweight glTF JSON parser that ignores textures, see {@link parseGLTFJSONIntoXKTModel}.\n *\n * ## Usage\n *\n * In the example below we'll create an {@link XKTModel}, then load a binary glTF model into it.\n *\n * ````javascript\n * utils.loadArraybuffer(\"../assets/models/gltf/HousePlan/glTF-Binary/HousePlan.glb\", async (data) => {\n *\n *     const xktModel = new XKTModel();\n *\n *     parseGLTFIntoXKTModel({\n *          data,\n *          xktModel,\n *          log: (msg) => { console.log(msg); }\n *     }).then(()=>{\n *        xktModel.finalize();\n *     },\n *     (msg) => {\n *         console.error(msg);\n *     });\n * });\n * ````\n *\n * @param {Object} params Parsing parameters.\n * @param {ArrayBuffer} params.data The glTF.\n * @param {String} [params.baseUri] The base URI used to load this glTF, if any. For resolving relative uris to linked resources.\n * @param {Object} [params.metaModelData] Metamodel JSON. If this is provided, then parsing is able to ensure that the XKTObjects it creates will fit the metadata properly.\n * @param {XKTModel} params.xktModel XKTModel to parse into.\n * @param {Boolean} [params.includeTextures=true] Whether to parse textures.\n * @param {Boolean} [params.includeNormals=true] Whether to parse normals. When false, the parser will ignore the glTF\n * geometry normals, and the glTF data will rely on the xeokit ````Viewer```` to automatically generate them. This has\n * the limitation that the normals will be face-aligned, and therefore the ````Viewer```` will only be able to render\n * a flat-shaded non-PBR representation of the glTF.\n * @param {Object} [params.stats] Collects statistics.\n * @param {function} [params.log] Logging callback.\n @returns {Promise} Resolves when glTF has been parsed.\n */\nfunction parseGLTFIntoXKTModel({\n                                   data,\n                                   baseUri,\n                                   xktModel,\n                                   metaModelData,\n                                   includeTextures = true,\n                                   includeNormals = true,\n                                   getAttachment,\n                                   stats = {},\n                                   log\n                               }) {\n\n    return new Promise(function (resolve, reject) {\n\n        if (!data) {\n            reject(\"Argument expected: data\");\n            return;\n        }\n\n        if (!xktModel) {\n            reject(\"Argument expected: xktModel\");\n            return;\n        }\n\n        stats.sourceFormat = \"glTF\";\n        stats.schemaVersion = \"2.0\";\n        stats.title = \"\";\n        stats.author = \"\";\n        stats.created = \"\";\n        stats.numTriangles = 0;\n        stats.numVertices = 0;\n        stats.numNormals = 0;\n        stats.numUVs = 0;\n        stats.numTextures = 0;\n        stats.numObjects = 0;\n        stats.numGeometries = 0;\n\n        parse(data, GLTFLoader, {\n            baseUri\n        }).then((gltfData) => {\n\n            const ctx = {\n                gltfData,\n                metaModelCorrections: metaModelData ? getMetaModelCorrections(metaModelData) : null,\n                getAttachment: getAttachment || (() => {\n                    throw new Error('You must define getAttachment() method to convert glTF with external resources')\n                }),\n                log: (log || function (msg) {\n                }),\n                error: function (msg) {\n                    console.error(msg);\n                },\n                xktModel,\n                includeNormals: (includeNormals !== false),\n                includeTextures: (includeTextures !== false),\n                geometryCreated: {},\n                nextId: 0,\n                stats\n            };\n\n            ctx.log(\"Using parser: parseGLTFIntoXKTModel\");\n            ctx.log(`Parsing normals: ${ctx.includeNormals ? \"enabled\" : \"disabled\"}`);\n            ctx.log(`Parsing textures: ${ctx.includeTextures ? \"enabled\" : \"disabled\"}`);\n\n            if (ctx.includeTextures) {\n                parseTextures(ctx);\n            }\n            parseMaterials(ctx);\n            parseDefaultScene(ctx);\n\n            resolve();\n\n        }, (errMsg) => {\n            reject(`[parseGLTFIntoXKTModel] ${errMsg}`);\n        });\n    });\n}\n\nfunction getMetaModelCorrections(metaModelData) {\n    const eachRootStats = {};\n    const eachChildRoot = {};\n    const metaObjects = metaModelData.metaObjects || [];\n    const metaObjectsMap = {};\n    for (let i = 0, len = metaObjects.length; i < len; i++) {\n        const metaObject = metaObjects[i];\n        metaObjectsMap[metaObject.id] = metaObject;\n    }\n    for (let i = 0, len = metaObjects.length; i < len; i++) {\n        const metaObject = metaObjects[i];\n        if (metaObject.parent !== undefined && metaObject.parent !== null) {\n            const metaObjectParent = metaObjectsMap[metaObject.parent];\n            if (metaObject.type === metaObjectParent.type) {\n                let rootMetaObject = metaObjectParent;\n                while (rootMetaObject.parent && metaObjectsMap[rootMetaObject.parent].type === rootMetaObject.type) {\n                    rootMetaObject = metaObjectsMap[rootMetaObject.parent];\n                }\n                const rootStats = eachRootStats[rootMetaObject.id] || (eachRootStats[rootMetaObject.id] = {\n                    numChildren: 0,\n                    countChildren: 0\n                });\n                rootStats.numChildren++;\n                eachChildRoot[metaObject.id] = rootMetaObject;\n            } else {\n\n            }\n        }\n    }\n    return {\n        metaObjectsMap,\n        eachRootStats,\n        eachChildRoot\n    };\n}\n\nfunction parseTextures(ctx) {\n    const gltfData = ctx.gltfData;\n    const textures = gltfData.textures;\n    if (textures) {\n        for (let i = 0, len = textures.length; i < len; i++) {\n            parseTexture(ctx, textures[i]);\n            ctx.stats.numTextures++;\n        }\n    }\n}\n\nfunction parseTexture(ctx, texture) {\n    if (!texture.source || !texture.source.image) {\n        return;\n    }\n    const textureId = `texture-${ctx.nextId++}`;\n\n    let minFilter = NearestMipMapLinearFilter;\n    switch (texture.sampler.minFilter) {\n        case 9728:\n            minFilter = NearestFilter;\n            break;\n        case 9729:\n            minFilter = LinearFilter;\n            break;\n        case 9984:\n            minFilter = NearestMipMapNearestFilter;\n            break;\n        case 9985:\n            minFilter = LinearMipMapNearestFilter;\n            break;\n        case 9986:\n            minFilter = NearestMipMapLinearFilter;\n            break;\n        case 9987:\n            minFilter = LinearMipMapLinearFilter;\n            break;\n    }\n\n    let magFilter = LinearFilter;\n    switch (texture.sampler.magFilter) {\n        case 9728:\n            magFilter = NearestFilter;\n            break;\n        case 9729:\n            magFilter = LinearFilter;\n            break;\n    }\n\n    let wrapS = RepeatWrapping;\n    switch (texture.sampler.wrapS) {\n        case 33071:\n            wrapS = ClampToEdgeWrapping;\n            break;\n        case 33648:\n            wrapS = MirroredRepeatWrapping;\n            break;\n        case 10497:\n            wrapS = RepeatWrapping;\n            break;\n    }\n\n    let wrapT = RepeatWrapping;\n    switch (texture.sampler.wrapT) {\n        case 33071:\n            wrapT = ClampToEdgeWrapping;\n            break;\n        case 33648:\n            wrapT = MirroredRepeatWrapping;\n            break;\n        case 10497:\n            wrapT = RepeatWrapping;\n            break;\n    }\n\n    let wrapR = RepeatWrapping;\n    switch (texture.sampler.wrapR) {\n        case 33071:\n            wrapR = ClampToEdgeWrapping;\n            break;\n        case 33648:\n            wrapR = MirroredRepeatWrapping;\n            break;\n        case 10497:\n            wrapR = RepeatWrapping;\n            break;\n    }\n\n    ctx.xktModel.createTexture({\n        textureId: textureId,\n        imageData: texture.source.image,\n        mediaType: texture.source.mediaType,\n        compressed: true,\n        width: texture.source.image.width,\n        height: texture.source.image.height,\n        minFilter,\n        magFilter,\n        wrapS,\n        wrapT,\n        wrapR,\n        flipY: !!texture.flipY,\n        //     encoding: \"sRGB\"\n    });\n    texture._textureId = textureId;\n}\n\nfunction parseMaterials(ctx) {\n    const gltfData = ctx.gltfData;\n    const materials = gltfData.materials;\n    if (materials) {\n        for (let i = 0, len = materials.length; i < len; i++) {\n            const material = materials[i];\n            material._textureSetId = ctx.includeTextures ? parseTextureSet(ctx, material) : null;\n            material._attributes = parseMaterialAttributes(ctx, material);\n        }\n    }\n}\n\nfunction parseTextureSet(ctx, material) {\n    const textureSetCfg = {};\n    if (material.normalTexture) {\n        textureSetCfg.normalTextureId = material.normalTexture.texture._textureId;\n    }\n    if (material.occlusionTexture) {\n        textureSetCfg.occlusionTextureId = material.occlusionTexture.texture._textureId;\n    }\n    if (material.emissiveTexture) {\n        textureSetCfg.emissiveTextureId = material.emissiveTexture.texture._textureId;\n    }\n    // const alphaMode = material.alphaMode;\n    // switch (alphaMode) {\n    //     case \"NORMAL_OPAQUE\":\n    //         materialCfg.alphaMode = \"opaque\";\n    //         break;\n    //     case \"MASK\":\n    //         materialCfg.alphaMode = \"mask\";\n    //         break;\n    //     case \"BLEND\":\n    //         materialCfg.alphaMode = \"blend\";\n    //         break;\n    //     default:\n    // }\n    // const alphaCutoff = material.alphaCutoff;\n    // if (alphaCutoff !== undefined) {\n    //     materialCfg.alphaCutoff = alphaCutoff;\n    // }\n    const metallicPBR = material.pbrMetallicRoughness;\n    if (material.pbrMetallicRoughness) {\n        const pbrMetallicRoughness = material.pbrMetallicRoughness;\n        const baseColorTexture = pbrMetallicRoughness.baseColorTexture || pbrMetallicRoughness.colorTexture;\n        if (baseColorTexture) {\n            if (baseColorTexture.texture) {\n                textureSetCfg.colorTextureId = baseColorTexture.texture._textureId;\n            } else {\n                textureSetCfg.colorTextureId = ctx.gltfData.textures[baseColorTexture.index]._textureId;\n            }\n        }\n        if (metallicPBR.metallicRoughnessTexture) {\n            textureSetCfg.metallicRoughnessTextureId = metallicPBR.metallicRoughnessTexture.texture._textureId;\n        }\n    }\n    const extensions = material.extensions;\n    if (extensions) {\n        const specularPBR = extensions[\"KHR_materials_pbrSpecularGlossiness\"];\n        if (specularPBR) {\n            const specularTexture = specularPBR.specularTexture;\n            if (specularTexture !== null && specularTexture !== undefined) {\n                //  textureSetCfg.colorTextureId = ctx.gltfData.textures[specularColorTexture.index]._textureId;\n            }\n            const specularColorTexture = specularPBR.specularColorTexture;\n            if (specularColorTexture !== null && specularColorTexture !== undefined) {\n                textureSetCfg.colorTextureId = ctx.gltfData.textures[specularColorTexture.index]._textureId;\n            }\n        }\n    }\n    if (textureSetCfg.normalTextureId !== undefined ||\n        textureSetCfg.occlusionTextureId !== undefined ||\n        textureSetCfg.emissiveTextureId !== undefined ||\n        textureSetCfg.colorTextureId !== undefined ||\n        textureSetCfg.metallicRoughnessTextureId !== undefined) {\n        textureSetCfg.textureSetId = `textureSet-${ctx.nextId++};`\n        ctx.xktModel.createTextureSet(textureSetCfg);\n        ctx.stats.numTextureSets++;\n        return textureSetCfg.textureSetId;\n    }\n    return null;\n}\n\nfunction parseMaterialAttributes(ctx, material) { // Substitute RGBA for material, to use fast flat shading instead\n    const extensions = material.extensions;\n    const materialAttributes = {\n        color: new Float32Array([1, 1, 1, 1]),\n        opacity: 1,\n        metallic: 0,\n        roughness: 1\n    };\n    if (extensions) {\n        const specularPBR = extensions[\"KHR_materials_pbrSpecularGlossiness\"];\n        if (specularPBR) {\n            const diffuseFactor = specularPBR.diffuseFactor;\n            if (diffuseFactor !== null && diffuseFactor !== undefined) {\n                materialAttributes.color.set(diffuseFactor);\n            }\n        }\n        const common = extensions[\"KHR_materials_common\"];\n        if (common) {\n            const technique = common.technique;\n            const values = common.values || {};\n            const blinn = technique === \"BLINN\";\n            const phong = technique === \"PHONG\";\n            const lambert = technique === \"LAMBERT\";\n            const diffuse = values.diffuse;\n            if (diffuse && (blinn || phong || lambert)) {\n                if (!utils.isString(diffuse)) {\n                    materialAttributes.color.set(diffuse);\n                }\n            }\n            const transparency = values.transparency;\n            if (transparency !== null && transparency !== undefined) {\n                materialAttributes.opacity = transparency;\n            }\n            const transparent = values.transparent;\n            if (transparent !== null && transparent !== undefined) {\n                materialAttributes.opacity = transparent;\n            }\n        }\n    }\n    const metallicPBR = material.pbrMetallicRoughness;\n    if (metallicPBR) {\n        const baseColorFactor = metallicPBR.baseColorFactor;\n        if (baseColorFactor) {\n            materialAttributes.color[0] = baseColorFactor[0];\n            materialAttributes.color[1] = baseColorFactor[1];\n            materialAttributes.color[2] = baseColorFactor[2];\n            materialAttributes.opacity = baseColorFactor[3];\n        }\n        const metallicFactor = metallicPBR.metallicFactor;\n        if (metallicFactor !== null && metallicFactor !== undefined) {\n            materialAttributes.metallic = metallicFactor;\n        }\n        const roughnessFactor = metallicPBR.roughnessFactor;\n        if (roughnessFactor !== null && roughnessFactor !== undefined) {\n            materialAttributes.roughness = roughnessFactor;\n        }\n    }\n    return materialAttributes;\n}\n\nfunction parseDefaultScene(ctx) {\n    const gltfData = ctx.gltfData;\n    const scene = gltfData.scene || gltfData.scenes[0];\n    if (!scene) {\n        ctx.error(\"glTF has no default scene\");\n        return;\n    }\n    parseScene(ctx, scene);\n}\n\nfunction parseScene(ctx, scene) {\n    const nodes = scene.nodes;\n    if (!nodes) {\n        return;\n    }\n    for (let i = 0, len = nodes.length; i < len; i++) {\n        const node = nodes[i];\n        countMeshUsage(ctx, node);\n    }\n    for (let i = 0, len = nodes.length; i < len; i++) {\n        const node = nodes[i];\n        parseNode(ctx, node, 0, null);\n    }\n}\n\nfunction countMeshUsage(ctx, node) {\n    const mesh = node.mesh;\n    if (mesh) {\n        mesh.instances = mesh.instances ? mesh.instances + 1 : 1;\n    }\n    if (node.children) {\n        const children = node.children;\n        for (let i = 0, len = children.length; i < len; i++) {\n            const childNode = children[i];\n            if (!childNode) {\n                ctx.error(\"Node not found: \" + i);\n                continue;\n            }\n            countMeshUsage(ctx, childNode);\n        }\n    }\n}\n\nconst deferredMeshIds = [];\n\nfunction parseNode(ctx, node, depth, matrix) {\n\n    const xktModel = ctx.xktModel;\n\n    // Pre-order visit scene node\n\n    let localMatrix;\n    if (node.matrix) {\n        localMatrix = node.matrix;\n        if (matrix) {\n            matrix = math.mulMat4(matrix, localMatrix, math.mat4());\n        } else {\n            matrix = localMatrix;\n        }\n    }\n    if (node.translation) {\n        localMatrix = math.translationMat4v(node.translation);\n        if (matrix) {\n            matrix = math.mulMat4(matrix, localMatrix, math.mat4());\n        } else {\n            matrix = localMatrix;\n        }\n    }\n    if (node.rotation) {\n        localMatrix = math.quaternionToMat4(node.rotation);\n        if (matrix) {\n            matrix = math.mulMat4(matrix, localMatrix, math.mat4());\n        } else {\n            matrix = localMatrix;\n        }\n    }\n    if (node.scale) {\n        localMatrix = math.scalingMat4v(node.scale);\n        if (matrix) {\n            matrix = math.mulMat4(matrix, localMatrix, math.mat4());\n        } else {\n            matrix = localMatrix;\n        }\n    }\n\n    if (node.mesh) {\n\n        const mesh = node.mesh;\n        const numPrimitives = mesh.primitives.length;\n\n        if (numPrimitives > 0) {\n            for (let i = 0; i < numPrimitives; i++) {\n                const primitive = mesh.primitives[i];\n                if (!primitive._xktGeometryId) {\n                    const xktGeometryId = \"geometry-\" + ctx.nextId++;\n                    const geometryCfg = {\n                        geometryId: xktGeometryId\n                    };\n                    switch (primitive.mode) {\n                        case 0: // POINTS\n                            geometryCfg.primitiveType = \"points\";\n                            break;\n                        case 1: // LINES\n                            geometryCfg.primitiveType = \"lines\";\n                            break;\n                        case 2: // LINE_LOOP\n                            geometryCfg.primitiveType = \"lines\";\n                            break;\n                        case 3: // LINE_STRIP\n                            geometryCfg.primitiveType = \"lines\";\n                            break;\n                        case 4: // TRIANGLES\n                            geometryCfg.primitiveType = \"triangles\";\n                            break;\n                        case 5: // TRIANGLE_STRIP\n                            geometryCfg.primitiveType = \"triangles\";\n                            break;\n                        case 6: // TRIANGLE_FAN\n                            geometryCfg.primitiveType = \"triangles\";\n                            break;\n                        default:\n                            geometryCfg.primitiveType = \"triangles\";\n                    }\n                    const POSITION = primitive.attributes.POSITION;\n                    if (!POSITION) {\n                        continue;\n                    }\n                    geometryCfg.positions = primitive.attributes.POSITION.value;\n                    ctx.stats.numVertices += geometryCfg.positions.length / 3;\n                    if (ctx.includeNormals) {\n                        if (primitive.attributes.NORMAL) {\n                            geometryCfg.normals = primitive.attributes.NORMAL.value;\n                            ctx.stats.numNormals += geometryCfg.normals.length / 3;\n                        }\n                    }\n                    if (primitive.attributes.COLOR_0) {\n                        geometryCfg.colorsCompressed = primitive.attributes.COLOR_0.value;\n                    }\n                    if (ctx.includeTextures) {\n                        if (primitive.attributes.TEXCOORD_0) {\n                            geometryCfg.uvs = primitive.attributes.TEXCOORD_0.value;\n                            ctx.stats.numUVs += geometryCfg.uvs.length / 2;\n                        }\n                    }\n                    if (primitive.indices) {\n                        geometryCfg.indices = primitive.indices.value;\n                        if (primitive.mode === 4) {\n                            ctx.stats.numTriangles += geometryCfg.indices.length / 3;\n                        }\n                    }\n                    xktModel.createGeometry(geometryCfg);\n                    primitive._xktGeometryId = xktGeometryId;\n                    ctx.stats.numGeometries++;\n                }\n\n                const xktMeshId = ctx.nextId++;\n                const meshCfg = {\n                    meshId: xktMeshId,\n                    geometryId: primitive._xktGeometryId,\n                    matrix: matrix ? matrix.slice() : math.identityMat4()\n                };\n                const material = primitive.material;\n                if (material) {\n                    meshCfg.textureSetId = material._textureSetId;\n                    meshCfg.color = material._attributes.color;\n                    meshCfg.opacity = material._attributes.opacity;\n                    meshCfg.metallic = material._attributes.metallic;\n                    meshCfg.roughness = material._attributes.roughness;\n                } else {\n                    meshCfg.color = [1.0, 1.0, 1.0];\n                    meshCfg.opacity = 1.0;\n                }\n                xktModel.createMesh(meshCfg);\n                deferredMeshIds.push(xktMeshId);\n            }\n        }\n    }\n\n    // Visit child scene nodes\n\n    if (node.children) {\n        const children = node.children;\n        for (let i = 0, len = children.length; i < len; i++) {\n            const childNode = children[i];\n            parseNode(ctx, childNode, depth + 1, matrix);\n        }\n    }\n\n    // Post-order visit scene node\n\n    const nodeName = node.name;\n    if (((nodeName !== undefined && nodeName !== null) || depth === 0) && deferredMeshIds.length > 0) {\n        if (nodeName === undefined || nodeName === null) {\n            ctx.log(`Warning: 'name' properties not found on glTF scene nodes - will randomly-generate object IDs in XKT`);\n        }\n        let xktEntityId = nodeName; // Fall back on generated ID when `name` not found on glTF scene node(s)\n        if (xktEntityId === undefined || xktEntityId === null) {\n            if (xktModel.entities[xktEntityId]) {\n                ctx.log(`Warning: Two or more glTF nodes found with same 'name' attribute: '${nodeName} - will randomly-generating an object ID in XKT`);\n            }\n            while (!xktEntityId || xktModel.entities[xktEntityId]) {\n                xktEntityId = \"entity-\" + ctx.nextId++;\n            }\n        }\n        if (ctx.metaModelCorrections) {\n            // Merging meshes into XKTObjects that map to metaobjects\n            const rootMetaObject = ctx.metaModelCorrections.eachChildRoot[xktEntityId];\n            if (rootMetaObject) {\n                const rootMetaObjectStats = ctx.metaModelCorrections.eachRootStats[rootMetaObject.id];\n                rootMetaObjectStats.countChildren++;\n                if (rootMetaObjectStats.countChildren >= rootMetaObjectStats.numChildren) {\n                    xktModel.createEntity({\n                        entityId: rootMetaObject.id,\n                        meshIds: deferredMeshIds\n                    });\n                    ctx.stats.numObjects++;\n                    deferredMeshIds.length = 0;\n                }\n            } else {\n                const metaObject = ctx.metaModelCorrections.metaObjectsMap[xktEntityId];\n                if (metaObject) {\n                    xktModel.createEntity({\n                        entityId: xktEntityId,\n                        meshIds: deferredMeshIds\n                    });\n                    ctx.stats.numObjects++;\n                    deferredMeshIds.length = 0;\n                }\n            }\n        } else {\n            // Create an XKTObject from the meshes at each named glTF node, don't care about metaobjects\n            xktModel.createEntity({\n                entityId: xktEntityId,\n                meshIds: deferredMeshIds\n            });\n            ctx.stats.numObjects++;\n            deferredMeshIds.length = 0;\n        }\n    }\n}\n\nexport {parseGLTFIntoXKTModel};\n","import {utils} from \"../XKTModel/lib/utils.js\";\nimport {math} from \"../lib/math.js\";\n\nconst atob2 = (typeof atob !== 'undefined') ? atob : a => Buffer.from(a, 'base64').toString('binary');\n\nconst WEBGL_COMPONENT_TYPES = {\n    5120: Int8Array,\n    5121: Uint8Array,\n    5122: Int16Array,\n    5123: Uint16Array,\n    5125: Uint32Array,\n    5126: Float32Array\n};\n\nconst WEBGL_TYPE_SIZES = {\n    'SCALAR': 1,\n    'VEC2': 2,\n    'VEC3': 3,\n    'VEC4': 4,\n    'MAT2': 4,\n    'MAT3': 9,\n    'MAT4': 16\n};\n\n/**\n * @desc Parses glTF JSON into an {@link XKTModel}, without ````.glb```` and textures.\n *\n * * Lightweight JSON-based glTF parser which ignores textures\n * * For texture and ````.glb```` support, see {@link parseGLTFIntoXKTModel}\n *\n * ## Usage\n *\n * In the example below we'll create an {@link XKTModel}, then load a glTF model into it.\n *\n * ````javascript\n * utils.loadJSON(\"./models/gltf/duplex/scene.gltf\", async (data) => {\n *\n *     const xktModel = new XKTModel();\n *\n *     parseGLTFJSONIntoXKTModel({\n *          data,\n *          xktModel,\n *          log: (msg) => { console.log(msg); }\n *     }).then(()=>{\n *        xktModel.finalize();\n *     },\n *     (msg) => {\n *         console.error(msg);\n *     });\n * });\n * ````\n *\n * @param {Object} params Parsing parameters.\n * @param {Object} params.data The glTF JSON.\n * @param {Object} [params.metaModelData] Metamodel JSON. If this is provided, then parsing is able to ensure that the XKTObjects it creates will fit the metadata properly.\n * @param {XKTModel} params.xktModel XKTModel to parse into.\n * @param {Boolean} [params.includeNormals=false] Whether to parse normals. When false, the parser will ignore the glTF\n * geometry normals, and the glTF data will rely on the xeokit ````Viewer```` to automatically generate them. This has\n * the limitation that the normals will be face-aligned, and therefore the ````Viewer```` will only be able to render\n * a flat-shaded representation of the glTF.\n * @param {Boolean} [params.reuseGeometries=true] When true, the parser will enable geometry reuse within the XKTModel. When false,\n * will automatically \"expand\" all reused geometries into duplicate copies. This has the drawback of increasing the XKT\n * file size (~10-30% for typical models), but can make the model more responsive in the xeokit Viewer, especially if the model\n * has excessive geometry reuse. An example of excessive geometry reuse would be if we have 4000 geometries that are\n * shared amongst 2000 objects, ie. a large number of geometries with a low amount of reuse, which can present a\n * pathological performance case for xeokit's underlying graphics APIs (WebGL, WebGPU etc).\n * @param {function} [params.getAttachment] Callback through which to fetch attachments, if the glTF has them.\n * @param {Object} [params.stats] Collects statistics.\n * @param {function} [params.log] Logging callback.\n * @returns {Promise}\n */\nfunction parseGLTFJSONIntoXKTModel({\n                                       data,\n                                       xktModel,\n                                       metaModelData,\n                                       includeNormals,\n                                       reuseGeometries,\n                                       getAttachment,\n                                       stats = {},\n                                       log\n                                   }) {\n\n    if (log) {\n        log(\"Using parser: parseGLTFJSONIntoXKTModel\");\n    }\n\n    return new Promise(function (resolve, reject) {\n\n        if (!data) {\n            reject(\"Argument expected: data\");\n            return;\n        }\n\n        if (!xktModel) {\n            reject(\"Argument expected: xktModel\");\n            return;\n        }\n\n        stats.sourceFormat = \"glTF\";\n        stats.schemaVersion = \"2.0\";\n        stats.title = \"\";\n        stats.author = \"\";\n        stats.created = \"\";\n        stats.numTriangles = 0;\n        stats.numVertices = 0;\n        stats.numNormals = 0;\n        stats.numObjects = 0;\n        stats.numGeometries = 0;\n\n        const ctx = {\n            gltf: data,\n            metaModelCorrections: metaModelData ? getMetaModelCorrections(metaModelData) : null,\n            getAttachment: getAttachment || (() => {\n                throw new Error('You must define getAttachment() method to convert glTF with external resources')\n            }),\n            log: (log || function (msg) {\n            }),\n            xktModel,\n            includeNormals,\n            createXKTGeometryIds: {},\n            nextMeshId: 0,\n            reuseGeometries: (reuseGeometries !== false),\n            stats\n        };\n\n        ctx.log(`Parsing normals: ${ctx.includeNormals ? \"enabled\" : \"disabled\"}`);\n\n        parseBuffers(ctx).then(() => {\n\n            parseBufferViews(ctx);\n            freeBuffers(ctx);\n            parseMaterials(ctx);\n            parseDefaultScene(ctx);\n\n            resolve();\n\n        }, (errMsg) => {\n            reject(errMsg);\n        });\n    });\n}\n\nfunction getMetaModelCorrections(metaModelData) {\n    const eachRootStats = {};\n    const eachChildRoot = {};\n    const metaObjects = metaModelData.metaObjects || [];\n    const metaObjectsMap = {};\n    for (let i = 0, len = metaObjects.length; i < len; i++) {\n        const metaObject = metaObjects[i];\n        metaObjectsMap[metaObject.id] = metaObject;\n    }\n    for (let i = 0, len = metaObjects.length; i < len; i++) {\n        const metaObject = metaObjects[i];\n        if (metaObject.parent !== undefined && metaObject.parent !== null) {\n            const metaObjectParent = metaObjectsMap[metaObject.parent];\n            if (metaObject.type === metaObjectParent.type) {\n                let rootMetaObject = metaObjectParent;\n                while (rootMetaObject.parent && metaObjectsMap[rootMetaObject.parent].type === rootMetaObject.type) {\n                    rootMetaObject = metaObjectsMap[rootMetaObject.parent];\n                }\n                const rootStats = eachRootStats[rootMetaObject.id] || (eachRootStats[rootMetaObject.id] = {\n                    numChildren: 0,\n                    countChildren: 0\n                });\n                rootStats.numChildren++;\n                eachChildRoot[metaObject.id] = rootMetaObject;\n            } else {\n\n            }\n        }\n    }\n    const metaModelCorrections = {\n        metaObjectsMap,\n        eachRootStats,\n        eachChildRoot\n    };\n    return metaModelCorrections;\n}\n\nfunction parseBuffers(ctx) {  // Parses geometry buffers into temporary  \"_buffer\" Unit8Array properties on the glTF \"buffer\" elements\n    const buffers = ctx.gltf.buffers;\n    if (buffers) {\n        return Promise.all(buffers.map(buffer => parseBuffer(ctx, buffer)));\n    } else {\n        return new Promise(function (resolve, reject) {\n            resolve();\n        });\n    }\n}\n\nfunction parseBuffer(ctx, bufferInfo) {\n    return new Promise(function (resolve, reject) {\n        // Allow a shortcut where the glTF buffer is \"enrichened\" with direct\n        // access to the data-arrayBuffer, w/out needing to either:\n        // - read the file indicated by the \".uri\" component of the buffer\n        // - base64-decode the encoded data in the \".uri\" component\n        if (bufferInfo._arrayBuffer) {\n            bufferInfo._buffer = bufferInfo._arrayBuffer;\n            resolve(bufferInfo);\n            return;\n        }\n        // Otherwise, proceed with \"standard-glTF\" .uri component.\n        const uri = bufferInfo.uri;\n        if (!uri) {\n            reject('gltf/handleBuffer missing uri in ' + JSON.stringify(bufferInfo));\n            return;\n        }\n        parseArrayBuffer(ctx, uri).then((arrayBuffer) => {\n            bufferInfo._buffer = arrayBuffer;\n            resolve(arrayBuffer);\n        }, (errMsg) => {\n            reject(errMsg);\n        })\n    });\n}\n\nfunction parseArrayBuffer(ctx, uri) {\n    return new Promise(function (resolve, reject) {\n        const dataUriRegex = /^data:(.*?)(;base64)?,(.*)$/; // Check for data: URI\n        const dataUriRegexResult = uri.match(dataUriRegex);\n        if (dataUriRegexResult) { // Safari can't handle data URIs through XMLHttpRequest\n            const isBase64 = !!dataUriRegexResult[2];\n            let data = dataUriRegexResult[3];\n            data = decodeURIComponent(data);\n            if (isBase64) {\n                data = atob2(data);\n            }\n            const buffer = new ArrayBuffer(data.length);\n            const view = new Uint8Array(buffer);\n            for (let i = 0; i < data.length; i++) {\n                view[i] = data.charCodeAt(i);\n            }\n            resolve(buffer);\n        } else { // Uri is a path to a file\n            ctx.getAttachment(uri).then(\n                (arrayBuffer) => {\n                    resolve(arrayBuffer);\n                },\n                (errMsg) => {\n                    reject(errMsg);\n                });\n        }\n    });\n}\n\nfunction parseBufferViews(ctx) { // Parses our temporary \"_buffer\" properties into \"_buffer\" properties on glTF \"bufferView\" elements\n    const bufferViewsInfo = ctx.gltf.bufferViews;\n    if (bufferViewsInfo) {\n        for (let i = 0, len = bufferViewsInfo.length; i < len; i++) {\n            parseBufferView(ctx, bufferViewsInfo[i]);\n        }\n    }\n}\n\nfunction parseBufferView(ctx, bufferViewInfo) {\n    const buffer = ctx.gltf.buffers[bufferViewInfo.buffer];\n    bufferViewInfo._typedArray = null;\n    const byteLength = bufferViewInfo.byteLength || 0;\n    const byteOffset = bufferViewInfo.byteOffset || 0;\n    bufferViewInfo._buffer = buffer._buffer.slice(byteOffset, byteOffset + byteLength);\n}\n\nfunction freeBuffers(ctx) { // Deletes the \"_buffer\" properties from the glTF \"buffer\" elements, to save memory\n    const buffers = ctx.gltf.buffers;\n    if (buffers) {\n        for (let i = 0, len = buffers.length; i < len; i++) {\n            buffers[i]._buffer = null;\n        }\n    }\n}\n\nfunction parseMaterials(ctx) {\n    const materialsInfo = ctx.gltf.materials;\n    if (materialsInfo) {\n        for (let i = 0, len = materialsInfo.length; i < len; i++) {\n            const materialInfo = materialsInfo[i];\n            const material = parseMaterial(ctx, materialInfo);\n            materialInfo._materialData = material;\n        }\n    }\n}\n\nfunction parseMaterial(ctx, materialInfo) { // Attempts to extract an RGBA color for a glTF material\n    const material = {\n        color: new Float32Array([1, 1, 1]),\n        opacity: 1.0,\n        metallic: 0,\n        roughness: 1\n    };\n    const extensions = materialInfo.extensions;\n    if (extensions) {\n        const specularPBR = extensions[\"KHR_materials_pbrSpecularGlossiness\"];\n        if (specularPBR) {\n            const diffuseFactor = specularPBR.diffuseFactor;\n            if (diffuseFactor !== null && diffuseFactor !== undefined) {\n                material.color[0] = diffuseFactor[0];\n                material.color[1] = diffuseFactor[1];\n                material.color[2] = diffuseFactor[2];\n            }\n        }\n        const common = extensions[\"KHR_materials_common\"];\n        if (common) {\n            const technique = common.technique;\n            const values = common.values || {};\n            const blinn = technique === \"BLINN\";\n            const phong = technique === \"PHONG\";\n            const lambert = technique === \"LAMBERT\";\n            const diffuse = values.diffuse;\n            if (diffuse && (blinn || phong || lambert)) {\n                if (!utils.isString(diffuse)) {\n                    material.color[0] = diffuse[0];\n                    material.color[1] = diffuse[1];\n                    material.color[2] = diffuse[2];\n                }\n            }\n            const transparency = values.transparency;\n            if (transparency !== null && transparency !== undefined) {\n                material.opacity = transparency;\n            }\n            const transparent = values.transparent;\n            if (transparent !== null && transparent !== undefined) {\n                material.opacity = transparent;\n            }\n        }\n    }\n    const metallicPBR = materialInfo.pbrMetallicRoughness;\n    if (metallicPBR) {\n        const baseColorFactor = metallicPBR.baseColorFactor;\n        if (baseColorFactor) {\n            material.color[0] = baseColorFactor[0];\n            material.color[1] = baseColorFactor[1];\n            material.color[2] = baseColorFactor[2];\n            material.opacity = baseColorFactor[3];\n        }\n        const metallicFactor = metallicPBR.metallicFactor;\n        if (metallicFactor !== null && metallicFactor !== undefined) {\n            material.metallic = metallicFactor;\n        }\n        const roughnessFactor = metallicPBR.roughnessFactor;\n        if (roughnessFactor !== null && roughnessFactor !== undefined) {\n            material.roughness = roughnessFactor;\n        }\n    }\n    return material;\n}\n\nfunction parseDefaultScene(ctx) {\n    const scene = ctx.gltf.scene || 0;\n    const defaultSceneInfo = ctx.gltf.scenes[scene];\n    if (!defaultSceneInfo) {\n        throw new Error(\"glTF has no default scene\");\n    }\n    parseScene(ctx, defaultSceneInfo);\n}\n\n\nfunction parseScene(ctx, sceneInfo) {\n    const nodes = sceneInfo.nodes;\n    if (!nodes) {\n        return;\n    }\n    for (let i = 0, len = nodes.length; i < len; i++) {\n        const glTFNode = ctx.gltf.nodes[nodes[i]];\n        if (glTFNode) {\n            parseNode(ctx, glTFNode, 0, null);\n        }\n    }\n}\n\nlet deferredMeshIds = [];\n\nfunction parseNode(ctx, glTFNode, depth, matrix) {\n\n    const gltf = ctx.gltf;\n    const xktModel = ctx.xktModel;\n\n    let localMatrix;\n\n    if (glTFNode.matrix) {\n        localMatrix = glTFNode.matrix;\n        if (matrix) {\n            matrix = math.mulMat4(matrix, localMatrix, math.mat4());\n        } else {\n            matrix = localMatrix;\n        }\n    }\n\n    if (glTFNode.translation) {\n        localMatrix = math.translationMat4v(glTFNode.translation);\n        if (matrix) {\n            matrix = math.mulMat4(matrix, localMatrix, localMatrix);\n        } else {\n            matrix = localMatrix;\n        }\n    }\n\n    if (glTFNode.rotation) {\n        localMatrix = math.quaternionToMat4(glTFNode.rotation);\n        if (matrix) {\n            matrix = math.mulMat4(matrix, localMatrix, localMatrix);\n        } else {\n            matrix = localMatrix;\n        }\n    }\n\n    if (glTFNode.scale) {\n        localMatrix = math.scalingMat4v(glTFNode.scale);\n        if (matrix) {\n            matrix = math.mulMat4(matrix, localMatrix, localMatrix);\n        } else {\n            matrix = localMatrix;\n        }\n    }\n\n    const gltfMeshId = glTFNode.mesh;\n\n    if (gltfMeshId !== undefined) {\n\n        const meshInfo = gltf.meshes[gltfMeshId];\n\n        if (meshInfo) {\n\n            const numPrimitivesInMesh = meshInfo.primitives.length;\n\n            if (numPrimitivesInMesh > 0) {\n\n                for (let i = 0; i < numPrimitivesInMesh; i++) {\n\n                    const primitiveInfo = meshInfo.primitives[i];\n\n                    const geometryHash = createPrimitiveGeometryHash(primitiveInfo);\n\n                    let xktGeometryId = ctx.createXKTGeometryIds[geometryHash];\n\n                    if ((!ctx.reuseGeometries) || !xktGeometryId) {\n\n                        xktGeometryId = \"geometry-\" + ctx.nextMeshId++\n\n                        const geometryArrays = {};\n\n                        parsePrimitiveGeometry(ctx, primitiveInfo, geometryArrays);\n\n                        const colors = geometryArrays.colors;\n\n                        let colorsCompressed;\n\n                        if (geometryArrays.colors) {\n                            colorsCompressed = [];\n                            for (let j = 0, lenj = colors.length; j < lenj; j += 4) {\n                                colorsCompressed.push(colors[j + 0]);\n                                colorsCompressed.push(colors[j + 1]);\n                                colorsCompressed.push(colors[j + 2]);\n                                colorsCompressed.push(255);\n                            }\n                        }\n\n                        xktModel.createGeometry({\n                            geometryId: xktGeometryId,\n                            primitiveType: geometryArrays.primitive,\n                            positions: geometryArrays.positions,\n                            normals: ctx.includeNormals ? geometryArrays.normals : null,\n                            colorsCompressed: colorsCompressed,\n                            indices: geometryArrays.indices\n                        });\n\n                        ctx.stats.numGeometries++;\n                        ctx.stats.numVertices += geometryArrays.positions ? geometryArrays.positions.length / 3 : 0;\n                        ctx.stats.numNormals += (ctx.includeNormals && geometryArrays.normals) ? geometryArrays.normals.length / 3 : 0;\n                        ctx.stats.numTriangles += geometryArrays.indices ? geometryArrays.indices.length / 3 : 0;\n\n                        ctx.createXKTGeometryIds[geometryHash] = xktGeometryId;\n                    } else {\n// Geometry reused\n                    }\n\n                    const materialIndex = primitiveInfo.material;\n                    const materialInfo = (materialIndex !== null && materialIndex !== undefined) ? gltf.materials[materialIndex] : null;\n                    const color = materialInfo ? materialInfo._materialData.color : new Float32Array([1.0, 1.0, 1.0, 1.0]);\n                    const opacity = materialInfo ? materialInfo._materialData.opacity : 1.0;\n                    const metallic = materialInfo ? materialInfo._materialData.metallic : 0.0;\n                    const roughness = materialInfo ? materialInfo._materialData.roughness : 1.0;\n\n                    const xktMeshId = \"mesh-\" + ctx.nextMeshId++;\n\n                    xktModel.createMesh({\n                        meshId: xktMeshId,\n                        geometryId: xktGeometryId,\n                        matrix: matrix ? matrix.slice() : math.identityMat4(),\n                        color: color,\n                        opacity: opacity,\n                        metallic: metallic,\n                        roughness: roughness\n                    });\n\n                    deferredMeshIds.push(xktMeshId);\n                }\n            }\n        }\n    }\n\n\n    if (glTFNode.children) {\n        const children = glTFNode.children;\n        for (let i = 0, len = children.length; i < len; i++) {\n            const childNodeIdx = children[i];\n            const childGLTFNode = gltf.nodes[childNodeIdx];\n            if (!childGLTFNode) {\n                console.warn('Node not found: ' + i);\n                continue;\n            }\n            parseNode(ctx, childGLTFNode, depth + 1, matrix);\n        }\n    }\n\n    // Post-order visit scene node\n\n    const nodeName = glTFNode.name;\n    if (((nodeName !== undefined && nodeName !== null) || depth === 0) && deferredMeshIds.length > 0) {\n        if (nodeName === undefined || nodeName === null) {\n            ctx.log(`[parseGLTFJSONIntoXKTModel] Warning: 'name' properties not found on glTF scene nodes - will randomly-generate object IDs in XKT`);\n        }\n        let xktEntityId = nodeName; // Fall back on generated ID when `name` not found on glTF scene node(s)\n        if (xktEntityId === undefined || xktEntityId === null) {\n            if (xktModel.entities[xktEntityId]) {\n                ctx.error(\"Two or more glTF nodes found with same 'name' attribute: '\" + nodeName + \"'\");\n            }\n            while (!xktEntityId || xktModel.entities[xktEntityId]) {\n                xktEntityId = \"entity-\" + ctx.nextId++;\n            }\n        }\n        if (ctx.metaModelCorrections) {  // Merging meshes into XKTObjects that map to metaobjects\n            const rootMetaObject = ctx.metaModelCorrections.eachChildRoot[xktEntityId];\n            if (rootMetaObject) {\n                const rootMetaObjectStats = ctx.metaModelCorrections.eachRootStats[rootMetaObject.id];\n                rootMetaObjectStats.countChildren++;\n                if (rootMetaObjectStats.countChildren >= rootMetaObjectStats.numChildren) {\n                    xktModel.createEntity({\n                        entityId: rootMetaObject.id,\n                        meshIds: deferredMeshIds\n                    });\n                    ctx.stats.numObjects++;\n                    deferredMeshIds = [];\n                }\n            } else {\n                const metaObject = ctx.metaModelCorrections.metaObjectsMap[xktEntityId];\n                if (metaObject) {\n                    xktModel.createEntity({\n                        entityId: xktEntityId,\n                        meshIds: deferredMeshIds\n                    });\n                    ctx.stats.numObjects++;\n                    deferredMeshIds = [];\n                }\n            }\n        } else { // Create an XKTObject from the meshes at each named glTF node, don't care about metaobjects\n            xktModel.createEntity({\n                entityId: xktEntityId,\n                meshIds: deferredMeshIds\n            });\n            ctx.stats.numObjects++;\n            deferredMeshIds = [];\n        }\n    }\n}\n\nfunction createPrimitiveGeometryHash(primitiveInfo) {\n    const attributes = primitiveInfo.attributes;\n    if (!attributes) {\n        return \"empty\";\n    }\n    const mode = primitiveInfo.mode;\n    const material = primitiveInfo.material;\n    const indices = primitiveInfo.indices;\n    const positions = primitiveInfo.attributes.POSITION;\n    const normals = primitiveInfo.attributes.NORMAL;\n    const colors = primitiveInfo.attributes.COLOR_0;\n    const uv = primitiveInfo.attributes.TEXCOORD_0;\n    return [\n        mode,\n        //  material,\n        (indices !== null && indices !== undefined) ? indices : \"-\",\n        (positions !== null && positions !== undefined) ? positions : \"-\",\n        (normals !== null && normals !== undefined) ? normals : \"-\",\n        (colors !== null && colors !== undefined) ? colors : \"-\",\n        (uv !== null && uv !== undefined) ? uv : \"-\"\n    ].join(\";\");\n}\n\nfunction parsePrimitiveGeometry(ctx, primitiveInfo, geometryArrays) {\n    const attributes = primitiveInfo.attributes;\n    if (!attributes) {\n        return;\n    }\n    switch (primitiveInfo.mode) {\n        case 0: // POINTS\n            geometryArrays.primitive = \"points\";\n            break;\n        case 1: // LINES\n            geometryArrays.primitive = \"lines\";\n            break;\n        case 2: // LINE_LOOP\n            // TODO: convert\n            geometryArrays.primitive = \"lines\";\n            break;\n        case 3: // LINE_STRIP\n            // TODO: convert\n            geometryArrays.primitive = \"lines\";\n            break;\n        case 4: // TRIANGLES\n            geometryArrays.primitive = \"triangles\";\n            break;\n        case 5: // TRIANGLE_STRIP\n            // TODO: convert\n            console.log(\"TRIANGLE_STRIP\");\n            geometryArrays.primitive = \"triangles\";\n            break;\n        case 6: // TRIANGLE_FAN\n            // TODO: convert\n            console.log(\"TRIANGLE_FAN\");\n            geometryArrays.primitive = \"triangles\";\n            break;\n        default:\n            geometryArrays.primitive = \"triangles\";\n    }\n    const accessors = ctx.gltf.accessors;\n    const indicesIndex = primitiveInfo.indices;\n    if (indicesIndex !== null && indicesIndex !== undefined) {\n        const accessorInfo = accessors[indicesIndex];\n        geometryArrays.indices = parseAccessorTypedArray(ctx, accessorInfo);\n    }\n    const positionsIndex = attributes.POSITION;\n    if (positionsIndex !== null && positionsIndex !== undefined) {\n        const accessorInfo = accessors[positionsIndex];\n        geometryArrays.positions = parseAccessorTypedArray(ctx, accessorInfo);\n    }\n    const normalsIndex = attributes.NORMAL;\n    if (normalsIndex !== null && normalsIndex !== undefined) {\n        const accessorInfo = accessors[normalsIndex];\n        geometryArrays.normals = parseAccessorTypedArray(ctx, accessorInfo);\n    }\n    const colorsIndex = attributes.COLOR_0;\n    if (colorsIndex !== null && colorsIndex !== undefined) {\n        const accessorInfo = accessors[colorsIndex];\n        geometryArrays.colors = parseAccessorTypedArray(ctx, accessorInfo);\n    }\n}\n\nfunction parseAccessorTypedArray(ctx, accessorInfo) {\n    const bufferView = ctx.gltf.bufferViews[accessorInfo.bufferView];\n    const itemSize = WEBGL_TYPE_SIZES[accessorInfo.type];\n    const TypedArray = WEBGL_COMPONENT_TYPES[accessorInfo.componentType];\n    const elementBytes = TypedArray.BYTES_PER_ELEMENT; // For VEC3: itemSize is 3, elementBytes is 4, itemBytes is 12.\n    const itemBytes = elementBytes * itemSize;\n    if (accessorInfo.byteStride && accessorInfo.byteStride !== itemBytes) { // The buffer is not interleaved if the stride is the item size in bytes.\n        throw new Error(\"interleaved buffer!\"); // TODO\n    } else {\n        return new TypedArray(bufferView._buffer, accessorInfo.byteOffset || 0, accessorInfo.count * itemSize);\n    }\n}\n\nexport {parseGLTFJSONIntoXKTModel};\n","/**\n * @desc Parses IFC STEP file data into an {@link XKTModel}.\n *\n * This function uses [web-ifc](https://github.com/tomvandig/web-ifc) to parse the IFC, which relies on a\n * WASM file to do the parsing.\n *\n * Depending on how we use this function, we may need to provide it with a path to the directory where that WASM file is stored.\n *\n * This function is tested with web-ifc version 0.0.34.\n *\n * ## Usage\n *\n * In the example below we'll create an {@link XKTModel}, then load an IFC model into it.\n *\n * ````javascript\n * import {XKTModel, parseIFCIntoXKTModel, writeXKTModelToArrayBuffer} from \"xeokit-convert.es.js\";\n *\n * import * as WebIFC from \"web-ifc-api.js\";\n *\n * utils.loadArraybuffer(\"rac_advanced_sample_project.ifc\", async (data) => {\n *\n *     const xktModel = new XKTModel();\n *\n *     parseIFCIntoXKTModel({\n *          WebIFC,\n *          data,\n *          xktModel,\n *          wasmPath: \"../dist/\",\n *          autoNormals: true,\n *          log: (msg) => { console.log(msg); }\n *     }).then(()=>{\n *        xktModel.finalize();\n *     },\n *     (msg) => {\n *         console.error(msg);\n *     });\n * });\n * ````\n *\n * @param {Object} params Parsing params.\n * @param {Object} params.WebIFC The WebIFC library. We pass this in as an external dependency, in order to give the\n * caller the choice of whether to use the Browser or NodeJS version.\n * @param {ArrayBuffer} [params.data] IFC file data.\n * @param {XKTModel} [params.xktModel] XKTModel to parse into.\n * @param {Boolean} [params.autoNormals=true] When true, the parser will ignore the IFC geometry normals, and the IFC\n * data will rely on the xeokit ````Viewer```` to automatically generate them. This has the limitation that the\n * normals will be face-aligned, and therefore the ````Viewer```` will only be able to render a flat-shaded representation\n * of the IFC model. This is ````true```` by default, because IFC models tend to look acceptable with flat-shading,\n * and we always want to minimize IFC model size wherever possible.\n * @param {String[]} [params.includeTypes] Option to only convert objects of these types.\n * @param {String[]} [params.excludeTypes] Option to never convert objects of these types.\n * @param {String} params.wasmPath Path to ````web-ifc.wasm````, required by this function.\n * @param {Object} [params.stats={}] Collects statistics.\n * @param {function} [params.log] Logging callback.\n * @returns {Promise} Resolves when IFC has been parsed.\n */\nfunction parseIFCIntoXKTModel({\n                                  WebIFC,\n                                  data,\n                                  xktModel,\n                                  autoNormals = true,\n                                  includeTypes,\n                                  excludeTypes,\n                                  wasmPath,\n                                  stats = {},\n                                  log\n                              }) {\n\n    if (log) {\n        log(\"Using parser: parseIFCIntoXKTModel\");\n    }\n\n    return new Promise(function (resolve, reject) {\n\n        if (!data) {\n            reject(\"Argument expected: data\");\n            return;\n        }\n\n        if (!xktModel) {\n            reject(\"Argument expected: xktModel\");\n            return;\n        }\n\n        if (!wasmPath) {\n            reject(\"Argument expected: wasmPath\");\n            return;\n        }\n\n        const ifcAPI = new WebIFC.IfcAPI();\n\n        if (wasmPath) {\n            ifcAPI.SetWasmPath(wasmPath);\n        }\n\n        ifcAPI.Init().then(() => {\n\n            const dataArray = new Uint8Array(data);\n\n            const modelID = ifcAPI.OpenModel(dataArray);\n\n            stats.sourceFormat = \"IFC\";\n            stats.schemaVersion = \"\";\n            stats.title = \"\";\n            stats.author = \"\";\n            stats.created = \"\";\n            stats.numMetaObjects = 0;\n            stats.numPropertySets = 0;\n            stats.numObjects = 0;\n            stats.numGeometries = 0;\n            stats.numTriangles = 0;\n            stats.numVertices = 0;\n\n            const ctx = {\n                WebIFC,\n                modelID,\n                ifcAPI,\n                xktModel,\n                autoNormals,\n                log: (log || function (msg) {\n                }),\n                nextId: 0,\n                stats\n            };\n\n            if (includeTypes) {\n                ctx.includeTypes = {};\n                for (let i = 0, len = includeTypes.length; i < len; i++) {\n                    ctx.includeTypes[includeTypes[i]] = true;\n                }\n            }\n\n            if (excludeTypes) {\n                ctx.excludeTypes = {};\n                for (let i = 0, len = excludeTypes.length; i < len; i++) {\n                    ctx.excludeTypes[excludeTypes[i]] = true;\n                }\n            }\n\n            const lines = ctx.ifcAPI.GetLineIDsWithType(modelID, WebIFC.IFCPROJECT);\n            const ifcProjectId = lines.get(0);\n            const ifcProject = ctx.ifcAPI.GetLine(modelID, ifcProjectId);\n\n            ctx.xktModel.schema = \"\";\n            ctx.xktModel.modelId = \"\" + modelID;\n            ctx.xktModel.projectId = \"\" + ifcProjectId;\n\n            parseMetadata(ctx);\n            parseGeometry(ctx);\n            parsePropertySets(ctx);\n\n            resolve();\n\n        }).catch((e) => {\n\n            reject(e);\n        })\n    });\n}\n\nfunction parsePropertySets(ctx) {\n\n    const lines = ctx.ifcAPI.GetLineIDsWithType(ctx.modelID, ctx.WebIFC.IFCRELDEFINESBYPROPERTIES);\n\n    for (let i = 0; i < lines.size(); i++) {\n\n        let relID = lines.get(i);\n\n        let rel = ctx.ifcAPI.GetLine(ctx.modelID, relID, true);\n\n        if (rel) {\n\n            const relatingPropertyDefinition = rel.RelatingPropertyDefinition;\n            if (!relatingPropertyDefinition) {\n                continue;\n            }\n\n            const propertySetId = relatingPropertyDefinition.GlobalId.value;\n\n            const relatedObjects = rel.RelatedObjects;\n            if (relatedObjects) {\n                for (let i = 0, len = relatedObjects.length; i < len; i++) {\n                    const relatedObject = relatedObjects[i];\n                    const metaObjectId = relatedObject.GlobalId.value;\n                    const metaObject = ctx.xktModel.metaObjects[metaObjectId];\n                    if (metaObject) {\n                        if (!metaObject.propertySetIds) {\n                            metaObject.propertySetIds = [];\n                        }\n                        metaObject.propertySetIds.push(propertySetId);\n                    }\n                }\n            }\n\n            const props = relatingPropertyDefinition.HasProperties;\n            if (props && props.length > 0) {\n                const propertySetType = \"Default\";\n                const propertySetName = relatingPropertyDefinition.Name.value;\n                const properties = [];\n                for (let i = 0, len = props.length; i < len; i++) {\n                    const prop = props[i];\n                    const name = prop.Name;\n                    const nominalValue = prop.NominalValue;\n                    if (name && nominalValue) {\n                        const property = {\n                            name: name.value,\n                            type: nominalValue.type,\n                            value: nominalValue.value,\n                            valueType: nominalValue.valueType\n                        };\n                        if (prop.Description) {\n                            property.description = prop.Description.value;\n                        } else if (nominalValue.description) {\n                            property.description = nominalValue.description;\n                        }\n                        properties.push(property);\n                    }\n                }\n                ctx.xktModel.createPropertySet({propertySetId, propertySetType, propertySetName, properties});\n                ctx.stats.numPropertySets++;\n            }\n        }\n    }\n}\n\nfunction parseMetadata(ctx) {\n\n    const lines = ctx.ifcAPI.GetLineIDsWithType(ctx.modelID, ctx.WebIFC.IFCPROJECT);\n    const ifcProjectId = lines.get(0);\n    const ifcProject = ctx.ifcAPI.GetLine(ctx.modelID, ifcProjectId);\n\n    parseSpatialChildren(ctx, ifcProject);\n}\n\nfunction parseSpatialChildren(ctx, ifcElement, parentMetaObjectId) {\n\n    const metaObjectType = ifcElement.__proto__.constructor.name;\n\n    if (ctx.includeTypes && (!ctx.includeTypes[metaObjectType])) {\n        return;\n    }\n\n    if (ctx.excludeTypes && ctx.excludeTypes[metaObjectType]) {\n        return;\n    }\n\n    createMetaObject(ctx, ifcElement, parentMetaObjectId);\n\n    const metaObjectId = ifcElement.GlobalId.value;\n\n    parseRelatedItemsOfType(\n        ctx,\n        ifcElement.expressID,\n        'RelatingObject',\n        'RelatedObjects',\n        ctx.WebIFC.IFCRELAGGREGATES,\n        metaObjectId);\n\n    parseRelatedItemsOfType(\n        ctx,\n        ifcElement.expressID,\n        'RelatingStructure',\n        'RelatedElements',\n        ctx.WebIFC.IFCRELCONTAINEDINSPATIALSTRUCTURE,\n        metaObjectId);\n}\n\nfunction createMetaObject(ctx, ifcElement, parentMetaObjectId) {\n\n    const metaObjectId = ifcElement.GlobalId.value;\n    const propertySetIds = null;\n    const metaObjectType = ifcElement.__proto__.constructor.name;\n    const metaObjectName = (ifcElement.Name && ifcElement.Name.value !== \"\") ? ifcElement.Name.value : metaObjectType;\n\n    ctx.xktModel.createMetaObject({metaObjectId, propertySetIds, metaObjectType, metaObjectName, parentMetaObjectId});\n    ctx.stats.numMetaObjects++;\n}\n\nfunction parseRelatedItemsOfType(ctx, id, relation, related, type, parentMetaObjectId) {\n\n    const lines = ctx.ifcAPI.GetLineIDsWithType(ctx.modelID, type);\n\n    for (let i = 0; i < lines.size(); i++) {\n\n        const relID = lines.get(i);\n        const rel = ctx.ifcAPI.GetLine(ctx.modelID, relID);\n        const relatedItems = rel[relation];\n\n        let foundElement = false;\n\n        if (Array.isArray(relatedItems)) {\n            const values = relatedItems.map((item) => item.value);\n            foundElement = values.includes(id);\n\n        } else {\n            foundElement = (relatedItems.value === id);\n        }\n\n        if (foundElement) {\n\n            const element = rel[related];\n\n            if (!Array.isArray(element)) {\n\n                const ifcElement = ctx.ifcAPI.GetLine(ctx.modelID, element.value);\n\n                parseSpatialChildren(ctx, ifcElement, parentMetaObjectId);\n\n            } else {\n\n                element.forEach((element2) => {\n\n                    const ifcElement = ctx.ifcAPI.GetLine(ctx.modelID, element2.value);\n\n                    parseSpatialChildren(ctx, ifcElement, parentMetaObjectId);\n                });\n            }\n        }\n    }\n}\n\nfunction parseGeometry(ctx) {\n\n    // Parses the geometry and materials in the IFC, creates\n    // XKTEntity, XKTMesh and XKTGeometry components within the XKTModel.\n\n    const flatMeshes = ctx.ifcAPI.LoadAllGeometry(ctx.modelID);\n\n    for (let i = 0, len = flatMeshes.size(); i < len; i++) {\n        const flatMesh = flatMeshes.get(i);\n        createObject(ctx, flatMesh);\n    }\n\n    // LoadAllGeometry does not return IFCSpace meshes\n    // here is a workaround\n\n    const lines = ctx.ifcAPI.GetLineIDsWithType(ctx.modelID, ctx.WebIFC.IFCSPACE);\n    for (let j = 0, len = lines.size(); j < len; j++) {\n        const ifcSpaceId = lines.get(j);\n        const flatMesh = ctx.ifcAPI.GetFlatMesh(ctx.modelID, ifcSpaceId);\n        createObject(ctx, flatMesh);\n    }\n}\n\nfunction createObject(ctx, flatMesh) {\n\n    const flatMeshExpressID = flatMesh.expressID;\n    const placedGeometries = flatMesh.geometries;\n\n    const meshIds = [];\n\n    const properties = ctx.ifcAPI.GetLine(ctx.modelID, flatMeshExpressID);\n    const entityId = properties.GlobalId.value;\n\n    const metaObjectId = entityId;\n    const metaObject = ctx.xktModel.metaObjects[metaObjectId];\n\n    if (ctx.includeTypes && (!metaObject || (!ctx.includeTypes[metaObject.metaObjectType]))) {\n        return;\n    }\n\n    if (ctx.excludeTypes && (!metaObject || ctx.excludeTypes[metaObject.metaObjectType])) {\n        console.log(\"excluding: \" + metaObjectId)\n        return;\n    }\n\n    for (let j = 0, lenj = placedGeometries.size(); j < lenj; j++) {\n\n        const placedGeometry = placedGeometries.get(j);\n        const geometryId = \"\" + placedGeometry.geometryExpressID;\n\n        if (!ctx.xktModel.geometries[geometryId]) {\n\n            const geometry = ctx.ifcAPI.GetGeometry(ctx.modelID, placedGeometry.geometryExpressID);\n            const vertexData = ctx.ifcAPI.GetVertexArray(geometry.GetVertexData(), geometry.GetVertexDataSize());\n            const indices = ctx.ifcAPI.GetIndexArray(geometry.GetIndexData(), geometry.GetIndexDataSize());\n\n            // De-interleave vertex arrays\n\n            const positions = [];\n            const normals = [];\n\n            for (let k = 0, lenk = vertexData.length / 6; k < lenk; k++) {\n                positions.push(vertexData[k * 6 + 0]);\n                positions.push(vertexData[k * 6 + 1]);\n                positions.push(vertexData[k * 6 + 2]);\n            }\n\n            if (!ctx.autoNormals) {\n                for (let k = 0, lenk = vertexData.length / 6; k < lenk; k++) {\n                    normals.push(vertexData[k * 6 + 3]);\n                    normals.push(vertexData[k * 6 + 4]);\n                    normals.push(vertexData[k * 6 + 5]);\n                }\n            }\n\n            ctx.xktModel.createGeometry({\n                geometryId: geometryId,\n                primitiveType: \"triangles\",\n                positions: positions,\n                normals: ctx.autoNormals ? null : normals,\n                indices: indices\n            });\n\n            ctx.stats.numGeometries++;\n            ctx.stats.numVertices += (positions.length / 3);\n            ctx.stats.numTriangles += (indices.length / 3);\n        }\n\n        const meshId = (\"mesh\" + ctx.nextId++);\n\n        ctx.xktModel.createMesh({\n            meshId: meshId,\n            geometryId: geometryId,\n            matrix: new Float32Array(placedGeometry.flatTransformation),\n            color: [placedGeometry.color.x, placedGeometry.color.y, placedGeometry.color.z],\n            opacity: placedGeometry.color.w\n        });\n\n        meshIds.push(meshId);\n    }\n\n    if (meshIds.length > 0) {\n        ctx.xktModel.createEntity({\n            entityId: entityId,\n            meshIds: meshIds\n        });\n        ctx.stats.numObjects++;\n    }\n}\n\nexport {parseIFCIntoXKTModel};\n","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@loaders.gl/las\");","\nimport {parse} from '@loaders.gl/core';\nimport {LASLoader} from '@loaders.gl/las';\n\nimport {math} from \"../lib/math.js\";\n\n\n\n/**\n * @desc Parses LAS and LAZ point cloud data into an {@link XKTModel}.\n *\n * This parser handles both the LASER file format (LAS) and its compressed version (LAZ),\n * a public format for the interchange of 3-dimensional point cloud data data, developed\n * for LIDAR mapping purposes.\n *\n * ## Usage\n *\n * In the example below we'll create an {@link XKTModel}, then load an LAZ point cloud model into it.\n *\n * ````javascript\n * utils.loadArraybuffer(\"./models/laz/autzen.laz\", async (data) => {\n *\n *     const xktModel = new XKTModel();\n *\n *     await parseLASIntoXKTModel({\n *          data,\n *          xktModel,\n *          rotateX: true,\n *          log: (msg) => { console.log(msg); }\n *     }).then(()=>{\n *        xktModel.finalize();\n *     },\n *     (msg) => {\n *         console.error(msg);\n *     });\n * });\n * ````\n *\n * @param {Object} params Parsing params.\n * @param {ArrayBuffer} params.data LAS/LAZ file data.\n * @param {XKTModel} params.xktModel XKTModel to parse into.\n * @param {Boolean} [params.rotateX=false] Whether to rotate the model 90 degrees about the X axis to make the Y axis \"up\", if necessary.\n * @param {Number|String} [params.colorDepth=8] Whether colors encoded using 8 or 16 bits. Can be set to 'auto'. LAS specification recommends 16 bits.\n * @param {Number} [params.skip=1] Read one from every n points.\n * @param {Object} [params.stats] Collects statistics.\n * @param {function} [params.log] Logging callback.\n * @returns {Promise} Resolves when LAS has been parsed.\n */\nfunction parseLASIntoXKTModel({\n                                  data,\n                                  xktModel,\n                                  rotateX = false,\n                                  colorDepth = 8,\n                                  skip = 1,\n                                  stats,\n                                  log = () => {\n                                  }\n                              }) {\n\n    if (log) {\n        log(\"Using parser: parseLASIntoXKTModel\");\n    }\n\n    return new Promise(function (resolve, reject) {\n\n        if (!data) {\n            reject(\"Argument expected: data\");\n            return;\n        }\n\n        if (!xktModel) {\n            reject(\"Argument expected: xktModel\");\n            return;\n        }\n\n        if (log) {\n            log(\"Converting LAZ/LAS\");\n            if (rotateX) {\n                log(\"Rotating model 90 degrees about X-axis\");\n            }\n        }\n\n        parse(data, LASLoader, {\n            las: {\n                colorDepth,\n                skip\n            }\n        }).then((parsedData) => {\n\n            const attributes = parsedData.attributes;\n\n            const loaderData = parsedData.loaderData;\n            const pointsFormatId = loaderData.pointsFormatId !== undefined ? loaderData.pointsFormatId : -1;\n\n            if (!attributes.POSITION) {\n                log(\"No positions found in file (expected for all LAS point formats)\");\n                return;\n            }\n\n            let positionsValue\n            let colorsCompressed;\n\n            switch (pointsFormatId) {\n                case 0:\n                    if (!attributes.intensity) {\n                        log(\"No intensities found in file (expected for LAS point format 0)\");\n                        return;\n                    }\n                    positionsValue = readPositions(attributes.POSITION, rotateX);\n                    colorsCompressed = readIntensities(attributes.intensity);\n                    break;\n                case 1:\n                    if (!attributes.intensity) {\n                        log(\"No intensities found in file (expected for LAS point format 1)\");\n                        return;\n                    }\n                    positionsValue = readPositions(attributes.POSITION, rotateX);\n                    colorsCompressed = readIntensities(attributes.intensity);\n                    break;\n                case 2:\n                    if (!attributes.intensity) {\n                        log(\"No intensities found in file (expected for LAS point format 2)\");\n                        return;\n                    }\n                    positionsValue = readPositions(attributes.POSITION, rotateX);\n                    colorsCompressed = readColorsAndIntensities(attributes.COLOR_0, attributes.intensity);\n                    break;\n                case 3:\n                    if (!attributes.intensity) {\n                        log(\"No intensities found in file (expected for LAS point format 3)\");\n                        return;\n                    }\n                    positionsValue = readPositions(attributes.POSITION, rotateX);\n                    colorsCompressed = readColorsAndIntensities(attributes.COLOR_0, attributes.intensity);\n                    break;\n            }\n\n            xktModel.createGeometry({\n                geometryId: \"pointsGeometry\",\n                primitiveType: \"points\",\n                positions: positionsValue,\n                colorsCompressed: colorsCompressed\n            });\n\n            xktModel.createMesh({\n                meshId: \"pointsMesh\",\n                geometryId: \"pointsGeometry\"\n            });\n\n            const entityId = math.createUUID();\n\n            xktModel.createEntity({\n                entityId: entityId,\n                meshIds: [\"pointsMesh\"]\n            });\n\n            const rootMetaObjectId = math.createUUID();\n\n            xktModel.createMetaObject({\n                metaObjectId: rootMetaObjectId,\n                metaObjectType: \"Model\",\n                metaObjectName: \"Model\"\n            });\n\n            xktModel.createMetaObject({\n                metaObjectId: entityId,\n                metaObjectType: \"PointCloud\",\n                metaObjectName: \"PointCloud (LAZ)\",\n                parentMetaObjectId: rootMetaObjectId\n            });\n\n            if (stats) {\n                stats.sourceFormat = \"LAS\";\n                stats.schemaVersion = \"\";\n                stats.title = \"\";\n                stats.author = \"\";\n                stats.created = \"\";\n                stats.numMetaObjects = 2;\n                stats.numPropertySets = 0;\n                stats.numObjects = 1;\n                stats.numGeometries = 1;\n                stats.numVertices = positionsValue.length / 3;\n            }\n\n            resolve();\n\n        }, (errMsg) => {\n            reject(errMsg);\n        });\n    });\n}\n\nfunction readPositions(attributesPosition, rotateX) {\n    const positionsValue = attributesPosition.value;\n    if (rotateX) {\n        if (positionsValue) {\n            for (let i = 0, len = positionsValue.length; i < len; i += 3) {\n                const temp = positionsValue[i + 1];\n                positionsValue[i + 1] = positionsValue[i + 2];\n                positionsValue[i + 2] = temp;\n            }\n        }\n    }\n    return positionsValue;\n}\n\nfunction readColorsAndIntensities(attributesColor, attributesIntensity) {\n    const colors = attributesColor.value;\n    const colorSize = attributesColor.size;\n    const intensities = attributesIntensity.value;\n    const colorsCompressedSize = intensities.length * 4;\n    const colorsCompressed = new Uint8Array(colorsCompressedSize);\n    for (let i = 0, j = 0, k = 0, len = intensities.length; i < len; i++, k += colorSize, j += 4) {\n        colorsCompressed[j + 0] = colors[k + 0];\n        colorsCompressed[j + 1] = colors[k + 1];\n        colorsCompressed[j + 2] = colors[k + 2];\n        colorsCompressed[j + 3] = Math.round((intensities[i] / 65536) * 255);\n    }\n    return colorsCompressed;\n}\n\nfunction readIntensities(attributesIntensity) {\n    const intensities = attributesIntensity.intensity;\n    const colorsCompressedSize = intensities.length * 4;\n    const colorsCompressed = new Uint8Array(colorsCompressedSize);\n    for (let i = 0, j = 0, k = 0, len = intensities.length; i < len; i++, k += 3, j += 4) {\n        colorsCompressed[j + 0] = 0;\n        colorsCompressed[j + 1] = 0;\n        colorsCompressed[j + 2] = 0;\n        colorsCompressed[j + 3] = Math.round((intensities[i] / 65536) * 255);\n    }\n    return colorsCompressed;\n}\n\nexport {parseLASIntoXKTModel};","/**\n * @desc Parses JSON metamodel into an {@link XKTModel}.\n *\n * @param {Object} params Parsing parameters.\n * @param {JSON} params.metaModelData Metamodel data.\n * @param {String[]} [params.excludeTypes] Types to exclude from parsing.\n * @param {String[]} [params.includeTypes] Types to include in parsing.\n * @param {XKTModel} params.xktModel XKTModel to parse into.\n * @param {function} [params.log] Logging callback.\n @returns {Promise} Resolves when JSON has been parsed.\n */\nfunction parseMetaModelIntoXKTModel({metaModelData, xktModel, includeTypes, excludeTypes, log}) {\n\n    if (log) {\n        log(\"Using parser: parseMetaModelIntoXKTModel\");\n    }\n\n    return new Promise(function (resolve, reject) {\n\n        const metaObjects = metaModelData.metaObjects || [];\n        const propertySets = metaModelData.propertySets || [];\n\n        xktModel.modelId = metaModelData.revisionId || \"\"; // HACK\n        xktModel.projectId = metaModelData.projectId || \"\";\n        xktModel.revisionId = metaModelData.revisionId || \"\";\n        xktModel.author = metaModelData.author || \"\";\n        xktModel.createdAt = metaModelData.createdAt || \"\";\n        xktModel.creatingApplication = metaModelData.creatingApplication || \"\";\n        xktModel.schema = metaModelData.schema || \"\";\n\n        for (let i = 0, len = propertySets.length; i < len; i++) {\n\n            const propertySet = propertySets[i];\n\n            xktModel.createPropertySet({\n                propertySetId: propertySet.id,\n                propertySetName: propertySet.name,\n                propertySetType: propertySet.type,\n                properties: propertySet.properties\n            });\n        }\n\n        let includeTypesMap;\n        if (includeTypes) {\n            includeTypesMap = {};\n            for (let i = 0, len = includeTypes.length; i < len; i++) {\n                includeTypesMap[includeTypes[i]] = true;\n            }\n        }\n\n        let excludeTypesMap;\n        if (excludeTypes) {\n            excludeTypesMap = {};\n            for (let i = 0, len = excludeTypes.length; i < len; i++) {\n                excludeTypesMap[excludeTypes[i]] = true;\n            }\n        }\n\n        const metaObjectsMap = {};\n\n        for (let i = 0, len = metaObjects.length; i < len; i++) {\n            const newObject = metaObjects[i];\n            metaObjectsMap[newObject.id] = newObject;\n        }\n\n        let countMetaObjects = 0;\n\n        for (let i = 0, len = metaObjects.length; i < len; i++) {\n\n            const metaObject = metaObjects[i];\n            const type = metaObject.type;\n\n            if (excludeTypesMap && excludeTypesMap[type]) {\n                continue;\n            }\n\n            if (includeTypesMap && !includeTypesMap[type]) {\n                continue;\n            }\n\n            if (metaObject.parent !== undefined && metaObject.parent !== null) {\n                const metaObjectParent = metaObjectsMap[metaObject.parent];\n                if (metaObject.type === metaObjectParent.type) { // Don't create redundant sub-objects\n                    continue\n                }\n            }\n\n            const propertySetIds = [];\n            if (metaObject.propertySetIds) {\n                for (let j = 0, lenj = metaObject.propertySetIds.length; j < lenj; j++) {\n                    const propertySetId = metaObject.propertySetIds[j];\n                    if (propertySetId !== undefined && propertySetId !== null && propertySetId !== \"\") {\n                        propertySetIds.push(propertySetId);\n                    }\n                }\n            }\n            if (metaObject.propertySetId !== undefined && metaObject.propertySetId !== null && metaObject.propertySetId !== \"\") {\n                propertySetIds.push(metaObject.propertySetId);\n            }\n\n            xktModel.createMetaObject({\n                metaObjectId: metaObject.id,\n                metaObjectType: metaObject.type,\n                metaObjectName: metaObject.name,\n                parentMetaObjectId: metaObject.parent,\n                propertySetIds: propertySetIds.length > 0 ? propertySetIds : null\n            });\n\n            countMetaObjects++;\n        }\n\n        if (log) {\n            log(\"Converted meta objects: \" + countMetaObjects);\n        }\n\n        resolve();\n    });\n}\n\nexport {parseMetaModelIntoXKTModel};\n","/**\n * @desc Parses PCD point cloud data into an {@link XKTModel}.\n *\n * ## Usage\n *\n * In the example below we'll create an {@link XKTModel}, then load an LAZ point cloud model into it.\n *\n * ````javascript\n * utils.loadArraybuffer(\"\"./models/pcd/ism_test_cat.pcd\"\", async (data) => {\n *\n *     const xktModel = new XKTModel();\n *\n *     await parsePCDIntoXKTModel({\n *          data,\n *          xktModel,\n *          log: (msg) => { console.log(msg); }\n *     }).then(()=>{\n *        xktModel.finalize();\n *     },\n *     (msg) => {\n *         console.error(msg);\n *     });\n * });\n * ````\n *\n * @param {Object} params Parsing params.\n * @param {ArrayBuffer} params.data PCD file data.\n * @param {Boolean} [params.littleEndian=true] Whether PCD binary data is Little-Endian or Big-Endian.\n * @param {XKTModel} params.xktModel XKTModel to parse into.\n * @param {Object} [params.stats] Collects statistics.\n * @param {function} [params.log] Logging callback.\n @returns {Promise} Resolves when PCD has been parsed.\n */\nfunction parsePCDIntoXKTModel({data, xktModel, littleEndian = true, stats, log}) {\n\n    if (log) {\n        log(\"Using parser: parsePCDIntoXKTModel\");\n    }\n\n    return new Promise(function(resolve, reject) {\n\n        const textData = decodeText(new Uint8Array(data));\n\n        const header = parseHeader(textData);\n\n        const positions = [];\n        const normals = [];\n        const colors = [];\n\n        if (header.data === 'ascii') {\n\n            const offset = header.offset;\n            const data = textData.substr(header.headerLen);\n            const lines = data.split('\\n');\n\n            for (let i = 0, l = lines.length; i < l; i++) {\n\n                if (lines[i] === '') {\n                    continue;\n                }\n\n                const line = lines[i].split(' ');\n\n                if (offset.x !== undefined) {\n                    positions.push(parseFloat(line[offset.x]));\n                    positions.push(parseFloat(line[offset.y]));\n                    positions.push(parseFloat(line[offset.z]));\n                }\n\n                if (offset.rgb !== undefined) {\n                    const rgb = parseFloat(line[offset.rgb]);\n                    const r = (rgb >> 16) & 0x0000ff;\n                    const g = (rgb >> 8) & 0x0000ff;\n                    const b = (rgb >> 0) & 0x0000ff;\n                    colors.push(r, g, b, 255);\n                } else {\n                    colors.push(255);\n                    colors.push(255);\n                    colors.push(255);\n                }\n            }\n        }\n\n        if (header.data === 'binary_compressed') {\n\n            const sizes = new Uint32Array(data.slice(header.headerLen, header.headerLen + 8));\n            const compressedSize = sizes[0];\n            const decompressedSize = sizes[1];\n            const decompressed = decompressLZF(new Uint8Array(data, header.headerLen + 8, compressedSize), decompressedSize);\n            const dataview = new DataView(decompressed.buffer);\n            const offset = header.offset;\n\n            for (let i = 0; i < header.points; i++) {\n\n                if (offset.x !== undefined) {\n                    positions.push(dataview.getFloat32((header.points * offset.x) + header.size[0] * i, littleEndian));\n                    positions.push(dataview.getFloat32((header.points * offset.y) + header.size[1] * i, littleEndian));\n                    positions.push(dataview.getFloat32((header.points * offset.z) + header.size[2] * i, littleEndian));\n                }\n\n                if (offset.rgb !== undefined) {\n                    colors.push(dataview.getUint8((header.points * offset.rgb) + header.size[3] * i + 0));\n                    colors.push(dataview.getUint8((header.points * offset.rgb) + header.size[3] * i + 1));\n                    colors.push(dataview.getUint8((header.points * offset.rgb) + header.size[3] * i + 2));\n                    //    colors.push(255);\n                } else {\n                    colors.push(1);\n                    colors.push(1);\n                    colors.push(1);\n                }\n            }\n        }\n\n        if (header.data === 'binary') {\n\n            const dataview = new DataView(data, header.headerLen);\n            const offset = header.offset;\n\n            for (let i = 0, row = 0; i < header.points; i++, row += header.rowSize) {\n                if (offset.x !== undefined) {\n                    positions.push(dataview.getFloat32(row + offset.x, littleEndian));\n                    positions.push(dataview.getFloat32(row + offset.y, littleEndian));\n                    positions.push(dataview.getFloat32(row + offset.z, littleEndian));\n                }\n\n                if (offset.rgb !== undefined) {\n                    colors.push(dataview.getUint8(row + offset.rgb + 2));\n                    colors.push(dataview.getUint8(row + offset.rgb + 1));\n                    colors.push(dataview.getUint8(row + offset.rgb + 0));\n                } else {\n                    colors.push(255);\n                    colors.push(255);\n                    colors.push(255);\n                }\n            }\n        }\n\n        xktModel.createGeometry({\n            geometryId: \"pointsGeometry\",\n            primitiveType: \"points\",\n            positions: positions,\n            colors: colors && colors.length > 0 ? colors : null\n        });\n\n        xktModel.createMesh({\n            meshId: \"pointsMesh\",\n            geometryId: \"pointsGeometry\"\n        });\n\n        xktModel.createEntity({\n            entityId: \"geometries\",\n            meshIds: [\"pointsMesh\"]\n        });\n\n        if (log) {\n            log(\"Converted drawable objects: 1\");\n            log(\"Converted geometries: 1\");\n            log(\"Converted vertices: \" + positions.length / 3);\n        }\n\n        if (stats) {\n            stats.sourceFormat = \"PCD\";\n            stats.schemaVersion = \"\";\n            stats.title = \"\";\n            stats.author = \"\";\n            stats.created = \"\";\n            stats.numObjects = 1;\n            stats.numGeometries = 1;\n            stats.numVertices = positions.length / 3;\n        }\n\n        resolve();\n    });\n}\n\nfunction parseHeader(data) {\n    const header = {};\n    const result1 = data.search(/[\\r\\n]DATA\\s(\\S*)\\s/i);\n    const result2 = /[\\r\\n]DATA\\s(\\S*)\\s/i.exec(data.substr(result1 - 1));\n    header.data = result2[1];\n    header.headerLen = result2[0].length + result1;\n    header.str = data.substr(0, header.headerLen);\n    header.str = header.str.replace(/\\#.*/gi, '');     // Strip comments\n    header.version = /VERSION (.*)/i.exec(header.str); // Parse\n    header.fields = /FIELDS (.*)/i.exec(header.str);\n    header.size = /SIZE (.*)/i.exec(header.str);\n    header.type = /TYPE (.*)/i.exec(header.str);\n    header.count = /COUNT (.*)/i.exec(header.str);\n    header.width = /WIDTH (.*)/i.exec(header.str);\n    header.height = /HEIGHT (.*)/i.exec(header.str);\n    header.viewpoint = /VIEWPOINT (.*)/i.exec(header.str);\n    header.points = /POINTS (.*)/i.exec(header.str);\n    if (header.version !== null) {\n        header.version = parseFloat(header.version[1]);\n    }\n    if (header.fields !== null) {\n        header.fields = header.fields[1].split(' ');\n    }\n    if (header.type !== null) {\n        header.type = header.type[1].split(' ');\n    }\n    if (header.width !== null) {\n        header.width = parseInt(header.width[1]);\n    }\n    if (header.height !== null) {\n        header.height = parseInt(header.height[1]);\n    }\n    if (header.viewpoint !== null) {\n        header.viewpoint = header.viewpoint[1];\n    }\n    if (header.points !== null) {\n        header.points = parseInt(header.points[1], 10);\n    }\n    if (header.points === null) {\n        header.points = header.width * header.height;\n    }\n    if (header.size !== null) {\n        header.size = header.size[1].split(' ').map(function (x) {\n            return parseInt(x, 10);\n        });\n    }\n    if (header.count !== null) {\n        header.count = header.count[1].split(' ').map(function (x) {\n            return parseInt(x, 10);\n        });\n    } else {\n        header.count = [];\n        for (let i = 0, l = header.fields.length; i < l; i++) {\n            header.count.push(1);\n        }\n    }\n    header.offset = {};\n    let sizeSum = 0;\n    for (let i = 0, l = header.fields.length; i < l; i++) {\n        if (header.data === 'ascii') {\n            header.offset[header.fields[i]] = i;\n        } else {\n            header.offset[header.fields[i]] = sizeSum;\n            sizeSum += header.size[i] * header.count[i];\n        }\n    }\n    header.rowSize = sizeSum; // For binary only\n    return header;\n}\n\nfunction decodeText(array) {\n    if (typeof TextDecoder !== 'undefined') {\n        return new TextDecoder().decode(array);\n    }\n    let s = '';\n    for (let i = 0, il = array.length; i < il; i++) {\n        s += String.fromCharCode(array[i]);\n    }\n    try {\n        return decodeURIComponent(escape(s));\n    } catch (e) {\n        return s;\n    }\n}\n\nfunction decompressLZF(inData, outLength) { // https://gitlab.com/taketwo/three-pcd-loader/blob/master/decompress-lzf.js\n    const inLength = inData.length;\n    const outData = new Uint8Array(outLength);\n    let inPtr = 0;\n    let outPtr = 0;\n    let ctrl;\n    let len;\n    let ref;\n    do {\n        ctrl = inData[inPtr++];\n        if (ctrl < (1 << 5)) {\n            ctrl++;\n            if (outPtr + ctrl > outLength) throw new Error('Output buffer is not large enough');\n            if (inPtr + ctrl > inLength) throw new Error('Invalid compressed data');\n            do {\n                outData[outPtr++] = inData[inPtr++];\n            } while (--ctrl);\n        } else {\n            len = ctrl >> 5;\n            ref = outPtr - ((ctrl & 0x1f) << 8) - 1;\n            if (inPtr >= inLength) throw new Error('Invalid compressed data');\n            if (len === 7) {\n                len += inData[inPtr++];\n                if (inPtr >= inLength) throw new Error('Invalid compressed data');\n            }\n            ref -= inData[inPtr++];\n            if (outPtr + len + 2 > outLength) throw new Error('Output buffer is not large enough');\n            if (ref < 0) throw new Error('Invalid compressed data');\n            if (ref >= outPtr) throw new Error('Invalid compressed data');\n            do {\n                outData[outPtr++] = outData[ref++];\n            } while (--len + 2);\n        }\n    } while (inPtr < inLength);\n    return outData;\n}\n\nexport {parsePCDIntoXKTModel};","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@loaders.gl/ply\");","import {parse} from '@loaders.gl/core';\nimport {PLYLoader} from '@loaders.gl/ply';\n\n/**\n * @desc Parses PLY file data into an {@link XKTModel}.\n *\n * ## Usage\n *\n * In the example below we'll create an {@link XKTModel}, then load a PLY model into it.\n *\n * ````javascript\n * utils.loadArraybuffer(\"./models/ply/test.ply\", async (data) => {\n *\n *     const xktModel = new XKTModel();\n *\n *     parsePLYIntoXKTModel({data, xktModel}).then(()=>{\n *        xktModel.finalize();\n *     },\n *     (msg) => {\n *         console.error(msg);\n *     });\n * });\n * ````\n *\n * @param {Object} params Parsing params.\n * @param {ArrayBuffer} params.data PLY file data.\n * @param {XKTModel} params.xktModel XKTModel to parse into.\n * @param {Object} [params.stats] Collects statistics.\n * @param {function} [params.log] Logging callback.\n @returns {Promise} Resolves when PLY has been parsed.\n */\nasync function parsePLYIntoXKTModel({data, xktModel, stats, log}) {\n\n    if (log) {\n        log(\"Using parser: parsePLYIntoXKTModel\");\n    }\n\n    if (!data) {\n        throw \"Argument expected: data\";\n    }\n\n    if (!xktModel) {\n        throw \"Argument expected: xktModel\";\n    }\n\n    let parsedData;\n    try {\n        parsedData = await parse(data, PLYLoader);\n    } catch (e) {\n        if (log) {\n            log(\"Error: \" + e);\n        }\n        return;\n    }\n\n    const attributes = parsedData.attributes;\n    const hasColors = !!attributes.COLOR_0;\n\n    if (hasColors) {\n        const colorsValue = hasColors ? attributes.COLOR_0.value : null;\n        const colorsCompressed = [];\n        for (let i = 0, len = colorsValue.length; i < len; i += 4) {\n            colorsCompressed.push(colorsValue[i]);\n            colorsCompressed.push(colorsValue[i + 1]);\n            colorsCompressed.push(colorsValue[i + 2]);\n        }\n        xktModel.createGeometry({\n            geometryId: \"plyGeometry\",\n            primitiveType: \"triangles\",\n            positions: attributes.POSITION.value,\n            indices: parsedData.indices ? parsedData.indices.value : [],\n            colorsCompressed: colorsCompressed\n        });\n    } else {\n        xktModel.createGeometry({\n            geometryId: \"plyGeometry\",\n            primitiveType: \"triangles\",\n            positions: attributes.POSITION.value,\n            indices: parsedData.indices ? parsedData.indices.value : []\n        });\n    }\n\n    xktModel.createMesh({\n        meshId: \"plyMesh\",\n        geometryId: \"plyGeometry\",\n        color: (!hasColors) ? [1, 1, 1] : null\n    });\n\n    xktModel.createEntity({\n        entityId: \"ply\",\n        meshIds: [\"plyMesh\"]\n    });\n\n    if (stats) {\n        stats.sourceFormat = \"PLY\";\n        stats.schemaVersion = \"\";\n        stats.title = \"\";\n        stats.author = \"\";\n        stats.created = \"\";\n        stats.numMetaObjects = 2;\n        stats.numPropertySets = 0;\n        stats.numObjects = 1;\n        stats.numGeometries = 1;\n        stats.numVertices = attributes.POSITION.value.length / 3;\n    }\n}\n\nexport {parsePLYIntoXKTModel};\n","import {faceToVertexNormals} from \"../lib/faceToVertexNormals.js\";\nimport {math} from \"../lib/math.js\";\n\n/**\n * @desc Parses STL file data into an {@link XKTModel}.\n *\n * * Supports binary and ASCII STL formats.\n * * Option to create a separate {@link XKTEntity} for each group of faces that share the same vertex colors.\n * * Option to smooth face-aligned normals loaded from STL.\n * * Option to reduce XKT file size by ignoring STL normals and relying on xeokit to auto-generate them.\n *\n * ## Usage\n *\n * In the example below we'll create an {@link XKTModel}, then load an STL model into it.\n *\n * ````javascript\n * utils.loadArraybuffer(\"./models/stl/binary/spurGear.stl\", async (data) => {\n *\n *     const xktModel = new XKTModel();\n *\n *     parseSTLIntoXKTModel({data, xktModel});\n *\n *     xktModel.finalize();\n * });\n * ````\n *\n * @param {Object} params Parsing params.\n * @param {ArrayBuffer|String} [params.data] STL file data. Can be binary or string.\n * @param {Boolean} [params.autoNormals=false] When true, the parser will ignore the STL geometry normals, and the STL\n * data will rely on the xeokit ````Viewer```` to automatically generate them. This has the limitation that the\n * normals will be face-aligned, and therefore the ````Viewer```` will only be able to render a flat-shaded representation\n * of the STL.\n * Overrides ````smoothNormals```` when ````true````. This ignores the normals in the STL, and loads no\n * normals from the STL into the {@link XKTModel}, resulting in the XKT file storing no normals for the STL model. The\n * xeokit-sdk will then automatically generate the normals within its shaders. The disadvantages are that auto-normals\n * may slow rendering down a little bit, and that the normals can only be face-aligned (and thus rendered using flat\n * shading). The advantages, however, are a smaller XKT file size, and the ability to apply certain geometry optimizations\n * during parsing, such as removing duplicated STL vertex positions, that are not possible when normals are loaded\n * for the STL vertices.\n * @param {Boolean} [params.smoothNormals=true] When true, automatically converts face-oriented STL normals to vertex normals, for a smooth appearance. Ignored if ````autoNormals```` is ````true````.\n * @param {Number} [params.smoothNormalsAngleThreshold=20] This is the threshold angle between normals of adjacent triangles, below which their shared wireframe edge is not drawn.\n * @param {Boolean} [params.splitMeshes=true] When true, creates a separate {@link XKTEntity} for each group of faces that share the same vertex colors. Only works with binary STL (ie. when ````data```` is an ArrayBuffer).\n * @param {XKTModel} [params.xktModel] XKTModel to parse into.\n * @param {Object} [params.stats] Collects statistics.\n * @param {function} [params.log] Logging callback.\n @returns {Promise} Resolves when STL has been parsed.\n */\nasync function parseSTLIntoXKTModel({\n                                        data,\n                                        splitMeshes,\n                                        autoNormals,\n                                        smoothNormals,\n                                        smoothNormalsAngleThreshold,\n                                        xktModel,\n                                        stats,\n                                        log\n                                    }) {\n\n    if (log) {\n        log(\"Using parser: parseSTLIntoXKTModel\");\n    }\n\n    return new Promise(function (resolve, reject) {\n\n        if (!data) {\n            reject(\"Argument expected: data\");\n            return;\n        }\n\n        if (!xktModel) {\n            reject(\"Argument expected: xktModel\");\n            return;\n        }\n\n        const rootMetaObjectId = math.createUUID();\n\n        const rootMetaObject = xktModel.createMetaObject({\n            metaObjectId: rootMetaObjectId,\n            metaObjectType: \"Model\",\n            metaObjectName: \"Model\"\n        });\n\n        const ctx = {\n            data,\n            splitMeshes,\n            autoNormals,\n            smoothNormals,\n            smoothNormalsAngleThreshold,\n            xktModel,\n            rootMetaObject,\n            nextId: 0,\n            log: (log || function (msg) {\n            }),\n            stats: {\n                numObjects: 0,\n                numGeometries: 0,\n                numTriangles: 0,\n                numVertices: 0\n            }\n        };\n\n        const binData = ensureBinary(data);\n\n        if (isBinary(binData)) {\n            parseBinary(ctx, binData);\n        } else {\n            parseASCII(ctx, ensureString(data));\n        }\n\n        if (stats) {\n            stats.sourceFormat = \"STL\";\n            stats.schemaVersion = \"\";\n            stats.title = \"\";\n            stats.author = \"\";\n            stats.created = \"\";\n            stats.numMetaObjects = 2;\n            stats.numPropertySets = 0;\n            stats.numObjects = 1;\n            stats.numGeometries = 1;\n            stats.numTriangles = ctx.stats.numTriangles;\n            stats.numVertices = ctx.stats.numVertices;\n        }\n\n        resolve();\n    });\n}\n\nfunction isBinary(data) {\n    const reader = new DataView(data);\n    const numFaces = reader.getUint32(80, true);\n    const faceSize = (32 / 8 * 3) + ((32 / 8 * 3) * 3) + (16 / 8);\n    const numExpectedBytes = 80 + (32 / 8) + (numFaces * faceSize);\n    if (numExpectedBytes === reader.byteLength) {\n        return true;\n    }\n    const solid = [115, 111, 108, 105, 100];\n    for (let i = 0; i < 5; i++) {\n        if (solid[i] !== reader.getUint8(i, false)) {\n            return true;\n        }\n    }\n    return false;\n}\n\nfunction parseBinary(ctx, data) {\n    const reader = new DataView(data);\n    const faces = reader.getUint32(80, true);\n    let r;\n    let g;\n    let b;\n    let hasColors = false;\n    let colors;\n    let defaultR;\n    let defaultG;\n    let defaultB;\n    let lastR = null;\n    let lastG = null;\n    let lastB = null;\n    let newMesh = false;\n    let alpha;\n    for (let index = 0; index < 80 - 10; index++) {\n        if ((reader.getUint32(index, false) === 0x434F4C4F /*COLO*/) &&\n            (reader.getUint8(index + 4) === 0x52 /*'R'*/) &&\n            (reader.getUint8(index + 5) === 0x3D /*'='*/)) {\n            hasColors = true;\n            colors = [];\n            defaultR = reader.getUint8(index + 6) / 255;\n            defaultG = reader.getUint8(index + 7) / 255;\n            defaultB = reader.getUint8(index + 8) / 255;\n            alpha = reader.getUint8(index + 9) / 255;\n        }\n    }\n    let dataOffset = 84;\n    let faceLength = 12 * 4 + 2;\n    let positions = [];\n    let normals = [];\n    let splitMeshes = ctx.splitMeshes;\n    for (let face = 0; face < faces; face++) {\n        let start = dataOffset + face * faceLength;\n        let normalX = reader.getFloat32(start, true);\n        let normalY = reader.getFloat32(start + 4, true);\n        let normalZ = reader.getFloat32(start + 8, true);\n        if (hasColors) {\n            let packedColor = reader.getUint16(start + 48, true);\n            if ((packedColor & 0x8000) === 0) {\n                r = (packedColor & 0x1F) / 31;\n                g = ((packedColor >> 5) & 0x1F) / 31;\n                b = ((packedColor >> 10) & 0x1F) / 31;\n            } else {\n                r = defaultR;\n                g = defaultG;\n                b = defaultB;\n            }\n            if (splitMeshes && r !== lastR || g !== lastG || b !== lastB) {\n                if (lastR !== null) {\n                    newMesh = true;\n                }\n                lastR = r;\n                lastG = g;\n                lastB = b;\n            }\n        }\n        for (let i = 1; i <= 3; i++) {\n            let vertexstart = start + i * 12;\n            positions.push(reader.getFloat32(vertexstart, true));\n            positions.push(reader.getFloat32(vertexstart + 4, true));\n            positions.push(reader.getFloat32(vertexstart + 8, true));\n            if (!ctx.autoNormals) {\n                normals.push(normalX, normalY, normalZ);\n            }\n            if (hasColors) {\n                colors.push(r, g, b, 1); // TODO: handle alpha\n            }\n        }\n        if (splitMeshes && newMesh) {\n            addMesh(ctx, positions, normals, colors);\n            positions = [];\n            normals = [];\n            colors = colors ? [] : null;\n            newMesh = false;\n        }\n    }\n    if (positions.length > 0) {\n        addMesh(ctx, positions, normals, colors);\n    }\n}\n\nfunction parseASCII(ctx, data) {\n    const faceRegex = /facet([\\s\\S]*?)endfacet/g;\n    let faceCounter = 0;\n    const floatRegex = /[\\s]+([+-]?(?:\\d+.\\d+|\\d+.|\\d+|.\\d+)(?:[eE][+-]?\\d+)?)/.source;\n    const vertexRegex = new RegExp('vertex' + floatRegex + floatRegex + floatRegex, 'g');\n    const normalRegex = new RegExp('normal' + floatRegex + floatRegex + floatRegex, 'g');\n    const positions = [];\n    const normals = [];\n    const colors = null;\n    let normalx;\n    let normaly;\n    let normalz;\n    let result;\n    let verticesPerFace;\n    let normalsPerFace;\n    let text;\n    while ((result = faceRegex.exec(data)) !== null) {\n        verticesPerFace = 0;\n        normalsPerFace = 0;\n        text = result[0];\n        while ((result = normalRegex.exec(text)) !== null) {\n            normalx = parseFloat(result[1]);\n            normaly = parseFloat(result[2]);\n            normalz = parseFloat(result[3]);\n            normalsPerFace++;\n        }\n        while ((result = vertexRegex.exec(text)) !== null) {\n            positions.push(parseFloat(result[1]), parseFloat(result[2]), parseFloat(result[3]));\n            normals.push(normalx, normaly, normalz);\n            verticesPerFace++;\n        }\n        if (normalsPerFace !== 1) {\n            ctx.log(\"Error in normal of face \" + faceCounter);\n            return -1;\n        }\n        if (verticesPerFace !== 3) {\n            ctx.log(\"Error in positions of face \" + faceCounter);\n            return -1;\n        }\n        faceCounter++;\n    }\n    addMesh(ctx, positions, normals, colors);\n}\n\nlet nextGeometryId = 0;\n\nfunction addMesh(ctx, positions, normals, colors) {\n\n    const indices = new Int32Array(positions.length / 3);\n    for (let ni = 0, len = indices.length; ni < len; ni++) {\n        indices[ni] = ni;\n    }\n\n    normals = normals && normals.length > 0 ? normals : null;\n    colors = colors && colors.length > 0 ? colors : null;\n\n    if (!ctx.autoNormals && ctx.smoothNormals) {\n        faceToVertexNormals(positions, normals, {smoothNormalsAngleThreshold: ctx.smoothNormalsAngleThreshold});\n    }\n\n    const geometryId = \"\" + nextGeometryId++;\n    const meshId = \"\" + nextGeometryId++;\n    const entityId = \"\" + nextGeometryId++;\n\n    ctx.xktModel.createGeometry({\n        geometryId: geometryId,\n        primitiveType: \"triangles\",\n        positions: positions,\n        normals: (!ctx.autoNormals) ? normals : null,\n        colors: colors,\n        indices: indices\n    });\n\n    ctx.xktModel.createMesh({\n        meshId: meshId,\n        geometryId: geometryId,\n        color: colors ? null : [1, 1, 1],\n        metallic: 0.9,\n        roughness: 0.1\n    });\n\n    ctx.xktModel.createEntity({\n        entityId: entityId,\n        meshIds: [meshId]\n    });\n\n    ctx.xktModel.createMetaObject({\n        metaObjectId: entityId,\n        metaObjectType: \"Default\",\n        metaObjectName: \"STL Mesh\",\n        parentMetaObjectId: ctx.rootMetaObject.metaObjectId\n    });\n\n    ctx.stats.numGeometries++;\n    ctx.stats.numObjects++;\n    ctx.stats.numVertices += positions.length / 3;\n    ctx.stats.numTriangles += indices.length / 3;\n}\n\nfunction ensureString(buffer) {\n    if (typeof buffer !== 'string') {\n        return decodeText(new Uint8Array(buffer));\n    }\n    return buffer;\n}\n\nfunction ensureBinary(buffer) {\n    if (typeof buffer === 'string') {\n        const arrayBuffer = new Uint8Array(buffer.length);\n        for (let i = 0; i < buffer.length; i++) {\n            arrayBuffer[i] = buffer.charCodeAt(i) & 0xff; // implicitly assumes little-endian\n        }\n        return arrayBuffer.buffer || arrayBuffer;\n    } else {\n        return buffer;\n    }\n}\n\nfunction decodeText(array) {\n    if (typeof TextDecoder !== 'undefined') {\n        return new TextDecoder().decode(array);\n    }\n    let s = '';\n    for (let i = 0, il = array.length; i < il; i++) {\n        s += String.fromCharCode(array[i]); // Implicitly assumes little-endian.\n    }\n    return decodeURIComponent(escape(s));\n}\n\nexport {parseSTLIntoXKTModel};\n","import {math} from \"./math.js\";\n\n/**\n * Converts surface-perpendicular face normals to vertex normals. Assumes that the mesh contains disjoint triangles\n * that don't share vertex array elements. Works by finding groups of vertices that have the same location and\n * averaging their normal vectors.\n *\n * @returns {{positions: Array, normals: *}}\n * @private\n */\nfunction faceToVertexNormals(positions, normals, options = {}) {\n    const smoothNormalsAngleThreshold = options.smoothNormalsAngleThreshold || 20;\n    const vertexMap = {};\n    const vertexNormals = [];\n    const vertexNormalAccum = {};\n    let acc;\n    let vx;\n    let vy;\n    let vz;\n    let key;\n    const precisionPoints = 4; // number of decimal points, e.g. 4 for epsilon of 0.0001\n    const precision = 10 ** precisionPoints;\n    let posi;\n    let i;\n    let j;\n    let len;\n    let a;\n    let b;\n    let c;\n\n    for (i = 0, len = positions.length; i < len; i += 3) {\n\n        posi = i / 3;\n\n        vx = positions[i];\n        vy = positions[i + 1];\n        vz = positions[i + 2];\n\n        key = `${Math.round(vx * precision)}_${Math.round(vy * precision)}_${Math.round(vz * precision)}`;\n\n        if (vertexMap[key] === undefined) {\n            vertexMap[key] = [posi];\n        } else {\n            vertexMap[key].push(posi);\n        }\n\n        const normal = math.normalizeVec3([normals[i], normals[i + 1], normals[i + 2]]);\n\n        vertexNormals[posi] = normal;\n\n        acc = math.vec4([normal[0], normal[1], normal[2], 1]);\n\n        vertexNormalAccum[posi] = acc;\n    }\n\n    for (key in vertexMap) {\n\n        if (vertexMap.hasOwnProperty(key)) {\n\n            const vertices = vertexMap[key];\n            const numVerts = vertices.length;\n\n            for (i = 0; i < numVerts; i++) {\n\n                const ii = vertices[i];\n\n                acc = vertexNormalAccum[ii];\n\n                for (j = 0; j < numVerts; j++) {\n\n                    if (i === j) {\n                        continue;\n                    }\n\n                    const jj = vertices[j];\n\n                    a = vertexNormals[ii];\n                    b = vertexNormals[jj];\n\n                    const angle = Math.abs(math.angleVec3(a, b) / math.DEGTORAD);\n\n                    if (angle < smoothNormalsAngleThreshold) {\n\n                        acc[0] += b[0];\n                        acc[1] += b[1];\n                        acc[2] += b[2];\n                        acc[3] += 1.0;\n                    }\n                }\n            }\n        }\n    }\n\n    for (i = 0, len = normals.length; i < len; i += 3) {\n\n        acc = vertexNormalAccum[i / 3];\n\n        normals[i + 0] = acc[0] / acc[3];\n        normals[i + 1] = acc[1] / acc[3];\n        normals[i + 2] = acc[2] / acc[3];\n\n    }\n}\n\nexport {faceToVertexNormals};","/**\n * @desc Creates box-shaped triangle mesh geometry arrays.\n *\n * ## Usage\n *\n * In the example below we'll create an {@link XKTModel}, then create an {@link XKTMesh} with a box-shaped {@link XKTGeometry}.\n *\n * [[Run this example](http://xeokit.github.io/xeokit-sdk/examples/#geometry_builders_buildBoxGeometry)]\n *\n * ````javascript\n * const xktModel = new XKTModel();\n *\n * const box = buildBoxGeometry({\n *     primitiveType: \"triangles\" // or \"lines\"\n *     center: [0,0,0],\n *     xSize: 1,  // Half-size on each axis\n *     ySize: 1,\n *     zSize: 1\n * });\n *\n * const xktGeometry = xktModel.createGeometry({\n *      geometryId: \"boxGeometry\",\n *      primitiveType: box.primitiveType,\n *      positions: box.positions,\n *      normals: box.normals,\n *      indices: box.indices\n * });\n *\n * const xktMesh = xktModel.createMesh({\n *      meshId: \"redBoxMesh\",\n *      geometryId: \"boxGeometry\",\n *      position: [-4, -6, -4],\n *      scale: [1, 3, 1],\n *      rotation: [0, 0, 0],\n *      color: [1, 0, 0],\n *      opacity: 1\n * });\n *\n * const xktEntity = xktModel.createEntity({\n *      entityId: \"redBox\",\n *      meshIds: [\"redBoxMesh\"]\n *  });\n *\n * xktModel.finalize();\n * ````\n *\n * @function buildBoxGeometry\n * @param {*} [cfg] Configs\n * @param {Number[]} [cfg.center]  3D point indicating the center position.\n * @param {Number} [cfg.xSize=1.0]  Half-size on the X-axis.\n * @param {Number} [cfg.ySize=1.0]  Half-size on the Y-axis.\n * @param {Number} [cfg.zSize=1.0]  Half-size on the Z-axis.\n * @returns {Object} Geometry arrays for {@link XKTModel#createGeometry} or {@link XKTModel#createMesh}.\n */\nfunction buildBoxGeometry(cfg = {}) {\n\n    let xSize = cfg.xSize || 1;\n    if (xSize < 0) {\n        console.error(\"negative xSize not allowed - will invert\");\n        xSize *= -1;\n    }\n\n    let ySize = cfg.ySize || 1;\n    if (ySize < 0) {\n        console.error(\"negative ySize not allowed - will invert\");\n        ySize *= -1;\n    }\n\n    let zSize = cfg.zSize || 1;\n    if (zSize < 0) {\n        console.error(\"negative zSize not allowed - will invert\");\n        zSize *= -1;\n    }\n\n    const center = cfg.center;\n    const centerX = center ? center[0] : 0;\n    const centerY = center ? center[1] : 0;\n    const centerZ = center ? center[2] : 0;\n\n    const xmin = -xSize + centerX;\n    const ymin = -ySize + centerY;\n    const zmin = -zSize + centerZ;\n    const xmax = xSize + centerX;\n    const ymax = ySize + centerY;\n    const zmax = zSize + centerZ;\n\n    return {\n\n        primitiveType: \"triangles\",\n\n        // The vertices - eight for our cube, each\n        // one spanning three array elements for X,Y and Z\n\n        positions: [\n\n            // v0-v1-v2-v3 front\n            xmax, ymax, zmax,\n            xmin, ymax, zmax,\n            xmin, ymin, zmax,\n            xmax, ymin, zmax,\n\n            // v0-v3-v4-v1 right\n            xmax, ymax, zmax,\n            xmax, ymin, zmax,\n            xmax, ymin, zmin,\n            xmax, ymax, zmin,\n\n            // v0-v1-v6-v1 top\n            xmax, ymax, zmax,\n            xmax, ymax, zmin,\n            xmin, ymax, zmin,\n            xmin, ymax, zmax,\n\n            // v1-v6-v7-v2 left\n            xmin, ymax, zmax,\n            xmin, ymax, zmin,\n            xmin, ymin, zmin,\n            xmin, ymin, zmax,\n\n            // v7-v4-v3-v2 bottom\n            xmin, ymin, zmin,\n            xmax, ymin, zmin,\n            xmax, ymin, zmax,\n            xmin, ymin, zmax,\n\n            // v4-v7-v6-v1 back\n            xmax, ymin, zmin,\n            xmin, ymin, zmin,\n            xmin, ymax, zmin,\n            xmax, ymax, zmin\n        ],\n\n        // Normal vectors, one for each vertex\n        normals: [\n\n            // v0-v1-v2-v3 front\n            0, 0, 1,\n            0, 0, 1,\n            0, 0, 1,\n            0, 0, 1,\n\n            // v0-v3-v4-v5 right\n            1, 0, 0,\n            1, 0, 0,\n            1, 0, 0,\n            1, 0, 0,\n\n            // v0-v5-v6-v1 top\n            0, 1, 0,\n            0, 1, 0,\n            0, 1, 0,\n            0, 1, 0,\n\n            // v1-v6-v7-v2 left\n            -1, 0, 0,\n            -1, 0, 0,\n            -1, 0, 0,\n            -1, 0, 0,\n\n            // v7-v4-v3-v2 bottom\n            0, -1, 0,\n            0, -1, 0,\n            0, -1, 0,\n            0, -1, 0,\n\n            // v4-v7-v6-v5 back\n            0, 0, -1,\n            0, 0, -1,\n            0, 0, -1,\n            0, 0, -1\n        ],\n\n        // UV coords\n        uv: [\n\n            // v0-v1-v2-v3 front\n            1, 0,\n            0, 0,\n            0, 1,\n            1, 1,\n\n            // v0-v3-v4-v1 right\n            0, 0,\n            0, 1,\n            1, 1,\n            1, 0,\n\n            // v0-v1-v6-v1 top\n            1, 1,\n            1, 0,\n            0, 0,\n            0, 1,\n\n            // v1-v6-v7-v2 left\n            1, 0,\n            0, 0,\n            0, 1,\n            1, 1,\n\n            // v7-v4-v3-v2 bottom\n            0, 1,\n            1, 1,\n            1, 0,\n            0, 0,\n\n            // v4-v7-v6-v1 back\n            0, 1,\n            1, 1,\n            1, 0,\n            0, 0\n        ],\n\n        // Indices - these organise the\n        // positions and uv texture coordinates\n        // into geometric primitives in accordance\n        // with the \"primitive\" parameter,\n        // in this case a set of three indices\n        // for each triangle.\n        //\n        // Note that each triangle is specified\n        // in counter-clockwise winding order.\n        //\n        // You can specify them in clockwise\n        // order if you configure the Modes\n        // node's frontFace flag as \"cw\", instead of\n        // the default \"ccw\".\n        indices: [\n            0, 1, 2,\n            0, 2, 3,\n            // front\n            4, 5, 6,\n            4, 6, 7,\n            // right\n            8, 9, 10,\n            8, 10, 11,\n            // top\n            12, 13, 14,\n            12, 14, 15,\n            // left\n            16, 17, 18,\n            16, 18, 19,\n            // bottom\n            20, 21, 22,\n            20, 22, 23\n        ]\n    };\n}\n\nexport {buildBoxGeometry};\n","/**\n * @desc Creates box-shaped line segment geometry arrays.\n *\n * ## Usage\n *\n * In the example below we'll create an {@link XKTModel}, then create an {@link XKTMesh} with a box-shaped {@link XKTGeometry}.\n *\n * [[Run this example](http://xeokit.github.io/xeokit-sdk/examples/#geometry_builders_buildBoxLinesGeometry)]\n *\n * ````javascript\n * const xktModel = new XKTModel();\n *\n * const box = buildBoxLinesGeometry({\n *     center: [0,0,0],\n *     xSize: 1,  // Half-size on each axis\n *     ySize: 1,\n *     zSize: 1\n * });\n *\n * const xktGeometry = xktModel.createGeometry({\n *      geometryId: \"boxGeometry\",\n *      primitiveType: box.primitiveType, // \"lines\"\n *      positions: box.positions,\n *      normals: box.normals,\n *      indices: box.indices\n * });\n *\n * const xktMesh = xktModel.createMesh({\n *      meshId: \"redBoxMesh\",\n *      geometryId: \"boxGeometry\",\n *      position: [-4, -6, -4],\n *      scale: [1, 3, 1],\n *      rotation: [0, 0, 0],\n *      color: [1, 0, 0],\n *      opacity: 1\n * });\n *\n * const xktEntity = xktModel.createEntity({\n *      entityId: \"redBox\",\n *      meshIds: [\"redBoxMesh\"]\n *  });\n *\n * xktModel.finalize();\n * ````\n *\n * @function buildBoxLinesGeometry\n * @param {*} [cfg] Configs\n * @param {Number[]} [cfg.center]  3D point indicating the center position.\n * @param {Number} [cfg.xSize=1.0]  Half-size on the X-axis.\n * @param {Number} [cfg.ySize=1.0]  Half-size on the Y-axis.\n * @param {Number} [cfg.zSize=1.0]  Half-size on the Z-axis.\n * @returns {Object} Geometry arrays for {@link XKTModel#createGeometry} or {@link XKTModel#createMesh}.\n */\nfunction buildBoxLinesGeometry(cfg = {}) {\n\n    let xSize = cfg.xSize || 1;\n    if (xSize < 0) {\n        console.error(\"negative xSize not allowed - will invert\");\n        xSize *= -1;\n    }\n\n    let ySize = cfg.ySize || 1;\n    if (ySize < 0) {\n        console.error(\"negative ySize not allowed - will invert\");\n        ySize *= -1;\n    }\n\n    let zSize = cfg.zSize || 1;\n    if (zSize < 0) {\n        console.error(\"negative zSize not allowed - will invert\");\n        zSize *= -1;\n    }\n\n    const center = cfg.center;\n    const centerX = center ? center[0] : 0;\n    const centerY = center ? center[1] : 0;\n    const centerZ = center ? center[2] : 0;\n\n    const xmin = -xSize + centerX;\n    const ymin = -ySize + centerY;\n    const zmin = -zSize + centerZ;\n    const xmax = xSize + centerX;\n    const ymax = ySize + centerY;\n    const zmax = zSize + centerZ;\n\n    return {\n        primitiveType: \"lines\",\n        positions: [\n            xmin, ymin, zmin,\n            xmin, ymin, zmax,\n            xmin, ymax, zmin,\n            xmin, ymax, zmax,\n            xmax, ymin, zmin,\n            xmax, ymin, zmax,\n            xmax, ymax, zmin,\n            xmax, ymax, zmax\n        ],\n        indices: [\n            0, 1,\n            1, 3,\n            3, 2,\n            2, 0,\n            4, 5,\n            5, 7,\n            7, 6,\n            6, 4,\n            0, 4,\n            1, 5,\n            2, 6,\n            3, 7\n        ]\n    }\n}\n\nexport {buildBoxLinesGeometry};\n","/**\n * @desc Creates cylinder-shaped geometry arrays.\n *\n * ## Usage\n *\n * In the example below we'll create an {@link XKTModel}, then create an {@link XKTMesh} with a cylinder-shaped {@link XKTGeometry}.\n *\n * [[Run this example](http://xeokit.github.io/xeokit-sdk/examples/#geometry_builders_buildCylinderGeometry)]\n *\n * ````javascript\n * const xktModel = new XKTModel();\n *\n * const cylinder = buildCylinderGeometry({\n *      center: [0,0,0],\n *      radiusTop: 2.0,\n *      radiusBottom: 2.0,\n *      height: 5.0,\n *      radialSegments: 20,\n *      heightSegments: 1,\n *      openEnded: false\n * });\n *\n * const xktGeometry = xktModel.createGeometry({\n *      geometryId: \"cylinderGeometry\",\n *      primitiveType: cylinder.primitiveType,\n *      positions: cylinder.positions,\n *      normals: cylinder.normals,\n *      indices: cylinder.indices\n * });\n *\n * const xktMesh = xktModel.createMesh({\n *      meshId: \"redCylinderMesh\",\n *      geometryId: \"cylinderGeometry\",\n *      position: [-4, -6, -4],\n *      scale: [1, 3, 1],\n *      rotation: [0, 0, 0],\n *      color: [1, 0, 0],\n *      opacity: 1\n * });\n *\n * const xktEntity = xktModel.createEntity({\n *      entityId: \"redCylinder\",\n *      meshIds: [\"redCylinderMesh\"]\n *  });\n *\n * xktModel.finalize();\n * ````\n *\n * @function buildCylinderGeometry\n * @param {*} [cfg] Configs\n * @param {Number[]} [cfg.center] 3D point indicating the center position.\n * @param {Number} [cfg.radiusTop=1]  Radius of top.\n * @param {Number} [cfg.radiusBottom=1]  Radius of bottom.\n * @param {Number} [cfg.height=1] Height.\n * @param {Number} [cfg.radialSegments=60]  Number of horizontal segments.\n * @param {Number} [cfg.heightSegments=1]  Number of vertical segments.\n * @param {Boolean} [cfg.openEnded=false]  Whether or not the cylinder has solid caps on the ends.\n * @returns {Object} Geometry arrays for {@link XKTModel#createGeometry} or {@link XKTModel#createMesh}.\n */\nfunction buildCylinderGeometry(cfg = {}) {\n\n    let radiusTop = cfg.radiusTop || 1;\n    if (radiusTop < 0) {\n        console.error(\"negative radiusTop not allowed - will invert\");\n        radiusTop *= -1;\n    }\n\n    let radiusBottom = cfg.radiusBottom || 1;\n    if (radiusBottom < 0) {\n        console.error(\"negative radiusBottom not allowed - will invert\");\n        radiusBottom *= -1;\n    }\n\n    let height = cfg.height || 1;\n    if (height < 0) {\n        console.error(\"negative height not allowed - will invert\");\n        height *= -1;\n    }\n\n    let radialSegments = cfg.radialSegments || 32;\n    if (radialSegments < 0) {\n        console.error(\"negative radialSegments not allowed - will invert\");\n        radialSegments *= -1;\n    }\n    if (radialSegments < 3) {\n        radialSegments = 3;\n    }\n\n    let heightSegments = cfg.heightSegments || 1;\n    if (heightSegments < 0) {\n        console.error(\"negative heightSegments not allowed - will invert\");\n        heightSegments *= -1;\n    }\n    if (heightSegments < 1) {\n        heightSegments = 1;\n    }\n\n    const openEnded = !!cfg.openEnded;\n\n    let center = cfg.center;\n    const centerX = center ? center[0] : 0;\n    const centerY = center ? center[1] : 0;\n    const centerZ = center ? center[2] : 0;\n\n    const heightHalf = height / 2;\n    const heightLength = height / heightSegments;\n    const radialAngle = (2.0 * Math.PI / radialSegments);\n    const radialLength = 1.0 / radialSegments;\n    //var nextRadius = this._radiusBottom;\n    const radiusChange = (radiusTop - radiusBottom) / heightSegments;\n\n    const positions = [];\n    const normals = [];\n    const uvs = [];\n    const indices = [];\n\n    let h;\n    let i;\n\n    let x;\n    let z;\n\n    let currentRadius;\n    let currentHeight;\n\n    let first;\n    let second;\n\n    let startIndex;\n    let tu;\n    let tv;\n\n    // create vertices\n    const normalY = (90.0 - (Math.atan(height / (radiusBottom - radiusTop))) * 180 / Math.PI) / 90.0;\n\n    for (h = 0; h <= heightSegments; h++) {\n        currentRadius = radiusTop - h * radiusChange;\n        currentHeight = heightHalf - h * heightLength;\n\n        for (i = 0; i <= radialSegments; i++) {\n            x = Math.sin(i * radialAngle);\n            z = Math.cos(i * radialAngle);\n\n            normals.push(currentRadius * x);\n            normals.push(normalY); //todo\n            normals.push(currentRadius * z);\n\n            uvs.push((i * radialLength));\n            uvs.push(h * 1 / heightSegments);\n\n            positions.push((currentRadius * x) + centerX);\n            positions.push((currentHeight) + centerY);\n            positions.push((currentRadius * z) + centerZ);\n        }\n    }\n\n    // create faces\n    for (h = 0; h < heightSegments; h++) {\n        for (i = 0; i <= radialSegments; i++) {\n\n            first = h * (radialSegments + 1) + i;\n            second = first + radialSegments;\n\n            indices.push(first);\n            indices.push(second);\n            indices.push(second + 1);\n\n            indices.push(first);\n            indices.push(second + 1);\n            indices.push(first + 1);\n        }\n    }\n\n    // create top cap\n    if (!openEnded && radiusTop > 0) {\n        startIndex = (positions.length / 3);\n\n        // top center\n        normals.push(0.0);\n        normals.push(1.0);\n        normals.push(0.0);\n\n        uvs.push(0.5);\n        uvs.push(0.5);\n\n        positions.push(0 + centerX);\n        positions.push(heightHalf + centerY);\n        positions.push(0 + centerZ);\n\n        // top triangle fan\n        for (i = 0; i <= radialSegments; i++) {\n            x = Math.sin(i * radialAngle);\n            z = Math.cos(i * radialAngle);\n            tu = (0.5 * Math.sin(i * radialAngle)) + 0.5;\n            tv = (0.5 * Math.cos(i * radialAngle)) + 0.5;\n\n            normals.push(radiusTop * x);\n            normals.push(1.0);\n            normals.push(radiusTop * z);\n\n            uvs.push(tu);\n            uvs.push(tv);\n\n            positions.push((radiusTop * x) + centerX);\n            positions.push((heightHalf) + centerY);\n            positions.push((radiusTop * z) + centerZ);\n        }\n\n        for (i = 0; i < radialSegments; i++) {\n            center = startIndex;\n            first = startIndex + 1 + i;\n\n            indices.push(first);\n            indices.push(first + 1);\n            indices.push(center);\n        }\n    }\n\n    // create bottom cap\n    if (!openEnded && radiusBottom > 0) {\n\n        startIndex = (positions.length / 3);\n\n        // top center\n        normals.push(0.0);\n        normals.push(-1.0);\n        normals.push(0.0);\n\n        uvs.push(0.5);\n        uvs.push(0.5);\n\n        positions.push(0 + centerX);\n        positions.push(0 - heightHalf + centerY);\n        positions.push(0 + centerZ);\n\n        // top triangle fan\n        for (i = 0; i <= radialSegments; i++) {\n\n            x = Math.sin(i * radialAngle);\n            z = Math.cos(i * radialAngle);\n\n            tu = (0.5 * Math.sin(i * radialAngle)) + 0.5;\n            tv = (0.5 * Math.cos(i * radialAngle)) + 0.5;\n\n            normals.push(radiusBottom * x);\n            normals.push(-1.0);\n            normals.push(radiusBottom * z);\n\n            uvs.push(tu);\n            uvs.push(tv);\n\n            positions.push((radiusBottom * x) + centerX);\n            positions.push((0 - heightHalf) + centerY);\n            positions.push((radiusBottom * z) + centerZ);\n        }\n\n        for (i = 0; i < radialSegments; i++) {\n\n            center = startIndex;\n            first = startIndex + 1 + i;\n\n            indices.push(center);\n            indices.push(first + 1);\n            indices.push(first);\n        }\n    }\n\n    return  {\n        primitiveType: \"triangles\",\n        positions: positions,\n        normals: normals,\n        uv: uvs,\n        uvs: uvs,\n        indices: indices\n    };\n}\n\n\nexport {buildCylinderGeometry};\n","/**\n * @desc Creates grid-shaped geometry arrays..\n *\n * ## Usage\n *\n * In the example below we'll create an {@link XKTModel}, then create an {@link XKTMesh} with a grid-shaped {@link XKTGeometry}.\n *\n * [[Run this example](http://xeokit.github.io/xeokit-sdk/examples/#geometry_builders_buildGridGeometry)]\n *\n * ````javascript\n * const xktModel = new XKTModel();\n *\n * const grid = buildGridGeometry({\n *      size: 1000,\n *      divisions: 500\n * });\n *\n * const xktGeometry = xktModel.createGeometry({\n *      geometryId: \"gridGeometry\",\n *      primitiveType: grid.primitiveType, // Will be \"lines\"\n *      positions: grid.positions,\n *      indices: grid.indices\n * });\n *\n * const xktMesh = xktModel.createMesh({\n *      meshId: \"redGridMesh\",\n *      geometryId: \"gridGeometry\",\n *      position: [-4, -6, -4],\n *      scale: [1, 3, 1],\n *      rotation: [0, 0, 0],\n *      color: [1, 0, 0],\n *      opacity: 1\n * });\n *\n * const xktEntity = xktModel.createEntity({\n *      entityId: \"redGrid\",\n *      meshIds: [\"redGridMesh\"]\n * });\n *\n * xktModel.finalize();\n * ````\n *\n * @function buildGridGeometry\n * @param {*} [cfg] Configs\n * @param {Number} [cfg.size=1] Dimension on the X and Z-axis.\n * @param {Number} [cfg.divisions=1] Number of divisions on X and Z axis..\n * @returns {Object} Geometry arrays for {@link XKTModel#createGeometry} or {@link XKTModel#createMesh}.\n */\nfunction buildGridGeometry(cfg = {}) {\n\n    let size = cfg.size || 1;\n    if (size < 0) {\n        console.error(\"negative size not allowed - will invert\");\n        size *= -1;\n    }\n\n    let divisions = cfg.divisions || 1;\n    if (divisions < 0) {\n        console.error(\"negative divisions not allowed - will invert\");\n        divisions *= -1;\n    }\n    if (divisions < 1) {\n        divisions = 1;\n    }\n\n    size = size || 10;\n    divisions = divisions || 10;\n\n    const step = size / divisions;\n    const halfSize = size / 2;\n\n    const positions = [];\n    const indices = [];\n    let l = 0;\n\n    for (let i = 0, j = 0, k = -halfSize; i <= divisions; i++, k += step) {\n\n        positions.push(-halfSize);\n        positions.push(0);\n        positions.push(k);\n\n        positions.push(halfSize);\n        positions.push(0);\n        positions.push(k);\n\n        positions.push(k);\n        positions.push(0);\n        positions.push(-halfSize);\n\n        positions.push(k);\n        positions.push(0);\n        positions.push(halfSize);\n\n        indices.push(l++);\n        indices.push(l++);\n        indices.push(l++);\n        indices.push(l++);\n    }\n\n    return {\n        primitiveType: \"lines\",\n        positions: positions,\n        indices: indices\n    };\n}\n\n\nexport {buildGridGeometry};\n","/**\n * @desc Creates plane-shaped geometry arrays.\n *\n * ## Usage\n *\n * In the example below we'll create an {@link XKTModel}, then create an {@link XKTMesh} with a plane-shaped {@link XKTGeometry}.\n *\n * [[Run this example](http://xeokit.github.io/xeokit-sdk/examples/#geometry_builders_buildPlaneGeometry)]\n *\n * ````javascript\n * const xktModel = new XKTModel();\n *\n * const plane = buildPlaneGeometry({\n *      center: [0,0,0],\n *      xSize: 2,\n *      zSize: 2,\n *      xSegments: 10,\n *      zSegments: 10\n * });\n *\n * const xktGeometry = xktModel.createGeometry({\n *      geometryId: \"planeGeometry\",\n *      primitiveType: plane.primitiveType, // Will be \"triangles\"\n *      positions: plane.positions,\n *      normals: plane.normals,\n *      indices: plane.indices\n * });\n *\n * const xktMesh = xktModel.createMesh({\n *      meshId: \"redPlaneMesh\",\n *      geometryId: \"planeGeometry\",\n *      position: [-4, -6, -4],\n *      scale: [1, 3, 1],\n *      rotation: [0, 0, 0],\n *      color: [1, 0, 0],\n *      opacity: 1\n * });\n *\n * const xktEntity = xktModel.createEntity({\n *      entityId: \"redPlane\",\n *      meshIds: [\"redPlaneMesh\"]\n *  });\n *\n * xktModel.finalize();\n * ````\n *\n * @function buildPlaneGeometry\n * @param {*} [cfg] Configs\n * @param {Number[]} [cfg.center]  3D point indicating the center position.\n * @param {Number} [cfg.xSize=1] Dimension on the X-axis.\n * @param {Number} [cfg.zSize=1] Dimension on the Z-axis.\n * @param {Number} [cfg.xSegments=1] Number of segments on the X-axis.\n * @param {Number} [cfg.zSegments=1] Number of segments on the Z-axis.\n * @returns {Object} Geometry arrays for {@link XKTModel#createGeometry} or {@link XKTModel#createMesh}.\n */\nfunction buildPlaneGeometry(cfg = {}) {\n\n    let xSize = cfg.xSize || 1;\n    if (xSize < 0) {\n        console.error(\"negative xSize not allowed - will invert\");\n        xSize *= -1;\n    }\n\n    let zSize = cfg.zSize || 1;\n    if (zSize < 0) {\n        console.error(\"negative zSize not allowed - will invert\");\n        zSize *= -1;\n    }\n\n    let xSegments = cfg.xSegments || 1;\n    if (xSegments < 0) {\n        console.error(\"negative xSegments not allowed - will invert\");\n        xSegments *= -1;\n    }\n    if (xSegments < 1) {\n        xSegments = 1;\n    }\n\n    let zSegments = cfg.xSegments || 1;\n    if (zSegments < 0) {\n        console.error(\"negative zSegments not allowed - will invert\");\n        zSegments *= -1;\n    }\n    if (zSegments < 1) {\n        zSegments = 1;\n    }\n\n    const center = cfg.center;\n    const centerX = center ? center[0] : 0;\n    const centerY = center ? center[1] : 0;\n    const centerZ = center ? center[2] : 0;\n\n    const halfWidth = xSize / 2;\n    const halfHeight = zSize / 2;\n\n    const planeX = Math.floor(xSegments) || 1;\n    const planeZ = Math.floor(zSegments) || 1;\n\n    const planeX1 = planeX + 1;\n    const planeZ1 = planeZ + 1;\n\n    const segmentWidth = xSize / planeX;\n    const segmentHeight = zSize / planeZ;\n\n    const positions = new Float32Array(planeX1 * planeZ1 * 3);\n    const normals = new Float32Array(planeX1 * planeZ1 * 3);\n    const uvs = new Float32Array(planeX1 * planeZ1 * 2);\n\n    let offset = 0;\n    let offset2 = 0;\n\n    let iz;\n    let ix;\n    let x;\n    let a;\n    let b;\n    let c;\n    let d;\n\n    for (iz = 0; iz < planeZ1; iz++) {\n\n        const z = iz * segmentHeight - halfHeight;\n\n        for (ix = 0; ix < planeX1; ix++) {\n\n            x = ix * segmentWidth - halfWidth;\n\n            positions[offset] = x + centerX;\n            positions[offset + 1] = centerY;\n            positions[offset + 2] = -z + centerZ;\n\n            normals[offset + 2] = -1;\n\n            uvs[offset2] = (ix) / planeX;\n            uvs[offset2 + 1] = ((planeZ - iz) / planeZ);\n\n            offset += 3;\n            offset2 += 2;\n        }\n    }\n\n    offset = 0;\n\n    const indices = new ((positions.length / 3) > 65535 ? Uint32Array : Uint16Array)(planeX * planeZ * 6);\n\n    for (iz = 0; iz < planeZ; iz++) {\n\n        for (ix = 0; ix < planeX; ix++) {\n\n            a = ix + planeX1 * iz;\n            b = ix + planeX1 * (iz + 1);\n            c = (ix + 1) + planeX1 * (iz + 1);\n            d = (ix + 1) + planeX1 * iz;\n\n            indices[offset] = d;\n            indices[offset + 1] = b;\n            indices[offset + 2] = a;\n\n            indices[offset + 3] = d;\n            indices[offset + 4] = c;\n            indices[offset + 5] = b;\n\n            offset += 6;\n        }\n    }\n\n    return {\n        primitiveType: \"triangles\",\n        positions: positions,\n        normals: normals,\n        uv: uvs,\n        uvs: uvs,\n        indices: indices\n    };\n}\n\nexport {buildPlaneGeometry};\n","/**\n * @desc Creates sphere-shaped geometry arrays.\n *\n * ## Usage\n *\n * In the example below we'll create an {@link XKTModel}, then create an {@link XKTMesh} with a sphere-shaped {@link XKTGeometry}.\n *\n * [[Run this example](http://xeokit.github.io/xeokit-sdk/examples/#geometry_builders_buildSphereGeometry)]\n *\n * ````javascript\n * const xktModel = new XKTModel();\n *\n * const sphere = buildSphereGeometry({\n *      center: [0,0,0],\n *      radius: 1.5,\n *      heightSegments: 60,\n *      widthSegments: 60\n * });\n *\n * const xktGeometry = xktModel.createGeometry({\n *      geometryId: \"sphereGeometry\",\n *      primitiveType: sphere.primitiveType, // Will be \"triangles\"\n *      positions: sphere.positions,\n *      normals: sphere.normals,\n *      indices: sphere.indices\n * });\n *\n * const xktMesh = xktModel.createMesh({\n *      meshId: \"redSphereMesh\",\n *      geometryId: \"sphereGeometry\",\n *      position: [-4, -6, -4],\n *      scale: [1, 3, 1],\n *      rotation: [0, 0, 0],\n *      color: [1, 0, 0],\n *      opacity: 1\n * });\n *\n *const xktEntity = xktModel.createEntity({\n *      entityId: \"redSphere\",\n *      meshIds: [\"redSphereMesh\"]\n *  });\n *\n * xktModel.finalize();\n * ````\n *\n * @function buildSphereGeometry\n * @param {*} [cfg] Configs\n * @param {Number[]} [cfg.center]  3D point indicating the center position.\n * @param {Number} [cfg.radius=1]  Radius.\n * @param {Number} [cfg.heightSegments=24] Number of latitudinal bands.\n * @param  {Number} [cfg.widthSegments=18] Number of longitudinal bands.\n * @returns {Object} Geometry arrays for {@link XKTModel#createGeometry} or {@link XKTModel#createMesh}.\n */\nfunction buildSphereGeometry(cfg = {}) {\n\n    const lod = cfg.lod || 1;\n\n    const centerX = cfg.center ? cfg.center[0] : 0;\n    const centerY = cfg.center ? cfg.center[1] : 0;\n    const centerZ = cfg.center ? cfg.center[2] : 0;\n\n    let radius = cfg.radius || 1;\n    if (radius < 0) {\n        console.error(\"negative radius not allowed - will invert\");\n        radius *= -1;\n    }\n\n    let heightSegments = cfg.heightSegments || 18;\n    if (heightSegments < 0) {\n        console.error(\"negative heightSegments not allowed - will invert\");\n        heightSegments *= -1;\n    }\n    heightSegments = Math.floor(lod * heightSegments);\n    if (heightSegments < 18) {\n        heightSegments = 18;\n    }\n\n    let widthSegments = cfg.widthSegments || 18;\n    if (widthSegments < 0) {\n        console.error(\"negative widthSegments not allowed - will invert\");\n        widthSegments *= -1;\n    }\n    widthSegments = Math.floor(lod * widthSegments);\n    if (widthSegments < 18) {\n        widthSegments = 18;\n    }\n\n    const positions = [];\n    const normals = [];\n    const uvs = [];\n    const indices = [];\n\n    let i;\n    let j;\n\n    let theta;\n    let sinTheta;\n    let cosTheta;\n\n    let phi;\n    let sinPhi;\n    let cosPhi;\n\n    let x;\n    let y;\n    let z;\n\n    let u;\n    let v;\n\n    let first;\n    let second;\n\n    for (i = 0; i <= heightSegments; i++) {\n\n        theta = i * Math.PI / heightSegments;\n        sinTheta = Math.sin(theta);\n        cosTheta = Math.cos(theta);\n\n        for (j = 0; j <= widthSegments; j++) {\n\n            phi = j * 2 * Math.PI / widthSegments;\n            sinPhi = Math.sin(phi);\n            cosPhi = Math.cos(phi);\n\n            x = cosPhi * sinTheta;\n            y = cosTheta;\n            z = sinPhi * sinTheta;\n            u = 1.0 - j / widthSegments;\n            v = i / heightSegments;\n\n            normals.push(x);\n            normals.push(y);\n            normals.push(z);\n\n            uvs.push(u);\n            uvs.push(v);\n\n            positions.push(centerX + radius * x);\n            positions.push(centerY + radius * y);\n            positions.push(centerZ + radius * z);\n        }\n    }\n\n    for (i = 0; i < heightSegments; i++) {\n        for (j = 0; j < widthSegments; j++) {\n\n            first = (i * (widthSegments + 1)) + j;\n            second = first + widthSegments + 1;\n\n            indices.push(first + 1);\n            indices.push(second + 1);\n            indices.push(second);\n            indices.push(first + 1);\n            indices.push(second);\n            indices.push(first);\n        }\n    }\n\n    return {\n        primitiveType: \"triangles\",\n        positions: positions,\n        normals: normals,\n        uv: uvs,\n        uvs: uvs,\n        indices: indices\n    };\n}\n\nexport {buildSphereGeometry};\n","import {math} from '../lib/math.js';\n\n/**\n * @desc Creates torus-shaped geometry arrays.\n *\n * ## Usage\n *\n * In the example below we'll create an {@link XKTModel}, then create an {@link XKTMesh} with a torus-shaped {@link XKTGeometry}.\n *\n * [[Run this example](http://xeokit.github.io/xeokit-sdk/examples/#geometry_builders_buildTorusGeometry)]\n *\n * ````javascript\n * const xktModel = new XKTModel();\n *\n * const torus = buildTorusGeometry({\n *      center: [0,0,0],\n *      radius: 1.0,\n *      tube: 0.5,\n *      radialSegments: 32,\n *      tubeSegments: 24,\n *      arc: Math.PI * 2.0\n * });\n *\n * const xktGeometry = xktModel.createGeometry({\n *      geometryId: \"torusGeometry\",\n *      primitiveType: torus.primitiveType, // Will be \"triangles\"\n *      positions: torus.positions,\n *      normals: torus.normals,\n *      indices: torus.indices\n * });\n *\n * const xktMesh = xktModel.createMesh({\n *      meshId: \"redTorusMesh\",\n *      geometryId: \"torusGeometry\",\n *      position: [-4, -6, -4],\n *      scale: [1, 3, 1],\n *      rotation: [0, 0, 0],\n *      color: [1, 0, 0],\n *      opacity: 1\n * });\n *\n * const xktEntity = xktModel.createEntity({\n *      entityId: \"redTorus\",\n *      meshIds: [\"redTorusMesh\"]\n * });\n *\n * xktModel.finalize();\n * ````\n *\n * @function buildTorusGeometry\n * @param {*} [cfg] Configs\n * @param {Number[]} [cfg.center] 3D point indicating the center position.\n * @param {Number} [cfg.radius=1] The overall radius.\n * @param {Number} [cfg.tube=0.3] The tube radius.\n * @param {Number} [cfg.radialSegments=32] The number of radial segments.\n * @param {Number} [cfg.tubeSegments=24] The number of tubular segments.\n * @param {Number} [cfg.arc=Math.PI*0.5] The length of the arc in radians, where Math.PI*2 is a closed torus.\n * @returns {Object} Geometry arrays for {@link XKTModel#createGeometry} or {@link XKTModel#createMesh}.\n */\nfunction buildTorusGeometry(cfg = {}) {\n\n    let radius = cfg.radius || 1;\n    if (radius < 0) {\n        console.error(\"negative radius not allowed - will invert\");\n        radius *= -1;\n    }\n    radius *= 0.5;\n\n    let tube = cfg.tube || 0.3;\n    if (tube < 0) {\n        console.error(\"negative tube not allowed - will invert\");\n        tube *= -1;\n    }\n\n    let radialSegments = cfg.radialSegments || 32;\n    if (radialSegments < 0) {\n        console.error(\"negative radialSegments not allowed - will invert\");\n        radialSegments *= -1;\n    }\n    if (radialSegments < 4) {\n        radialSegments = 4;\n    }\n\n    let tubeSegments = cfg.tubeSegments || 24;\n    if (tubeSegments < 0) {\n        console.error(\"negative tubeSegments not allowed - will invert\");\n        tubeSegments *= -1;\n    }\n    if (tubeSegments < 4) {\n        tubeSegments = 4;\n    }\n\n    let arc = cfg.arc || Math.PI * 2;\n    if (arc < 0) {\n        console.warn(\"negative arc not allowed - will invert\");\n        arc *= -1;\n    }\n    if (arc > 360) {\n        arc = 360;\n    }\n\n    const center = cfg.center;\n    let centerX = center ? center[0] : 0;\n    let centerY = center ? center[1] : 0;\n    const centerZ = center ? center[2] : 0;\n\n    const positions = [];\n    const normals = [];\n    const uvs = [];\n    const indices = [];\n\n    let u;\n    let v;\n    let x;\n    let y;\n    let z;\n    let vec;\n\n    let i;\n    let j;\n\n    for (j = 0; j <= tubeSegments; j++) {\n        for (i = 0; i <= radialSegments; i++) {\n\n            u = i / radialSegments * arc;\n            v = 0.785398 + (j / tubeSegments * Math.PI * 2);\n\n            centerX = radius * Math.cos(u);\n            centerY = radius * Math.sin(u);\n\n            x = (radius + tube * Math.cos(v)) * Math.cos(u);\n            y = (radius + tube * Math.cos(v)) * Math.sin(u);\n            z = tube * Math.sin(v);\n\n            positions.push(x + centerX);\n            positions.push(y + centerY);\n            positions.push(z + centerZ);\n\n            uvs.push(1 - (i / radialSegments));\n            uvs.push((j / tubeSegments));\n\n            vec = math.normalizeVec3(math.subVec3([x, y, z], [centerX, centerY, centerZ], []), []);\n\n            normals.push(vec[0]);\n            normals.push(vec[1]);\n            normals.push(vec[2]);\n        }\n    }\n\n    let a;\n    let b;\n    let c;\n    let d;\n\n    for (j = 1; j <= tubeSegments; j++) {\n        for (i = 1; i <= radialSegments; i++) {\n\n            a = (radialSegments + 1) * j + i - 1;\n            b = (radialSegments + 1) * (j - 1) + i - 1;\n            c = (radialSegments + 1) * (j - 1) + i;\n            d = (radialSegments + 1) * j + i;\n\n            indices.push(a);\n            indices.push(b);\n            indices.push(c);\n\n            indices.push(c);\n            indices.push(d);\n            indices.push(a);\n        }\n    }\n\n    return {\n        primitiveType: \"triangles\",\n        positions: positions,\n        normals: normals,\n        uv: uvs,\n        uvs: uvs,\n        indices: indices\n    };\n}\n\nexport {buildTorusGeometry};\n","const letters = {\n    ' ': {width: 16, points: []},\n    '!': {\n        width: 10, points: [\n            [5, 21],\n            [5, 7],\n            [-1, -1],\n            [5, 2],\n            [4, 1],\n            [5, 0],\n            [6, 1],\n            [5, 2]\n        ]\n    },\n    '\"': {\n        width: 16, points: [\n            [4, 21],\n            [4, 14],\n            [-1, -1],\n            [12, 21],\n            [12, 14]\n        ]\n    },\n    '#': {\n        width: 21, points: [\n            [11, 25],\n            [4, -7],\n            [-1, -1],\n            [17, 25],\n            [10, -7],\n            [-1, -1],\n            [4, 12],\n            [18, 12],\n            [-1, -1],\n            [3, 6],\n            [17, 6]\n        ]\n    },\n    '$': {\n        width: 20, points: [\n            [8, 25],\n            [8, -4],\n            [-1, -1],\n            [12, 25],\n            [12, -4],\n            [-1, -1],\n            [17, 18],\n            [15, 20],\n            [12, 21],\n            [8, 21],\n            [5, 20],\n            [3, 18],\n            [3, 16],\n            [4, 14],\n            [5, 13],\n            [7, 12],\n            [13, 10],\n            [15, 9],\n            [16, 8],\n            [17, 6],\n            [17, 3],\n            [15, 1],\n            [12, 0],\n            [8, 0],\n            [5, 1],\n            [3, 3]\n        ]\n    },\n    '%': {\n        width: 24, points: [\n            [21, 21],\n            [3, 0],\n            [-1, -1],\n            [8, 21],\n            [10, 19],\n            [10, 17],\n            [9, 15],\n            [7, 14],\n            [5, 14],\n            [3, 16],\n            [3, 18],\n            [4, 20],\n            [6, 21],\n            [8, 21],\n            [10, 20],\n            [13, 19],\n            [16, 19],\n            [19, 20],\n            [21, 21],\n            [-1, -1],\n            [17, 7],\n            [15, 6],\n            [14, 4],\n            [14, 2],\n            [16, 0],\n            [18, 0],\n            [20, 1],\n            [21, 3],\n            [21, 5],\n            [19, 7],\n            [17, 7]\n        ]\n    },\n    '&': {\n        width: 26, points: [\n            [23, 12],\n            [23, 13],\n            [22, 14],\n            [21, 14],\n            [20, 13],\n            [19, 11],\n            [17, 6],\n            [15, 3],\n            [13, 1],\n            [11, 0],\n            [7, 0],\n            [5, 1],\n            [4, 2],\n            [3, 4],\n            [3, 6],\n            [4, 8],\n            [5, 9],\n            [12, 13],\n            [13, 14],\n            [14, 16],\n            [14, 18],\n            [13, 20],\n            [11, 21],\n            [9, 20],\n            [8, 18],\n            [8, 16],\n            [9, 13],\n            [11, 10],\n            [16, 3],\n            [18, 1],\n            [20, 0],\n            [22, 0],\n            [23, 1],\n            [23, 2]\n        ]\n    },\n    '\\'': {\n        width: 10, points: [\n            [5, 19],\n            [4, 20],\n            [5, 21],\n            [6, 20],\n            [6, 18],\n            [5, 16],\n            [4, 15]\n        ]\n    },\n    '(': {\n        width: 14, points: [\n            [11, 25],\n            [9, 23],\n            [7, 20],\n            [5, 16],\n            [4, 11],\n            [4, 7],\n            [5, 2],\n            [7, -2],\n            [9, -5],\n            [11, -7]\n        ]\n    },\n    ')': {\n        width: 14, points: [\n            [3, 25],\n            [5, 23],\n            [7, 20],\n            [9, 16],\n            [10, 11],\n            [10, 7],\n            [9, 2],\n            [7, -2],\n            [5, -5],\n            [3, -7]\n        ]\n    },\n    '*': {\n        width: 16, points: [\n            [8, 21],\n            [8, 9],\n            [-1, -1],\n            [3, 18],\n            [13, 12],\n            [-1, -1],\n            [13, 18],\n            [3, 12]\n        ]\n    },\n    '+': {\n        width: 26, points: [\n            [13, 18],\n            [13, 0],\n            [-1, -1],\n            [4, 9],\n            [22, 9]\n        ]\n    },\n    ',': {\n        width: 10, points: [\n            [6, 1],\n            [5, 0],\n            [4, 1],\n            [5, 2],\n            [6, 1],\n            [6, -1],\n            [5, -3],\n            [4, -4]\n        ]\n    },\n    '-': {\n        width: 26, points: [\n            [4, 9],\n            [22, 9]\n        ]\n    },\n    '.': {\n        width: 10, points: [\n            [5, 2],\n            [4, 1],\n            [5, 0],\n            [6, 1],\n            [5, 2]\n        ]\n    },\n    '/': {\n        width: 22, points: [\n            [20, 25],\n            [2, -7]\n        ]\n    },\n    '0': {\n        width: 20, points: [\n            [9, 21],\n            [6, 20],\n            [4, 17],\n            [3, 12],\n            [3, 9],\n            [4, 4],\n            [6, 1],\n            [9, 0],\n            [11, 0],\n            [14, 1],\n            [16, 4],\n            [17, 9],\n            [17, 12],\n            [16, 17],\n            [14, 20],\n            [11, 21],\n            [9, 21]\n        ]\n    },\n    '1': {\n        width: 20, points: [\n            [6, 17],\n            [8, 18],\n            [11, 21],\n            [11, 0]\n        ]\n    },\n    '2': {\n        width: 20, points: [\n            [4, 16],\n            [4, 17],\n            [5, 19],\n            [6, 20],\n            [8, 21],\n            [12, 21],\n            [14, 20],\n            [15, 19],\n            [16, 17],\n            [16, 15],\n            [15, 13],\n            [13, 10],\n            [3, 0],\n            [17, 0]\n        ]\n    },\n    '3': {\n        width: 20, points: [\n            [5, 21],\n            [16, 21],\n            [10, 13],\n            [13, 13],\n            [15, 12],\n            [16, 11],\n            [17, 8],\n            [17, 6],\n            [16, 3],\n            [14, 1],\n            [11, 0],\n            [8, 0],\n            [5, 1],\n            [4, 2],\n            [3, 4]\n        ]\n    },\n    '4': {\n        width: 20, points: [\n            [13, 21],\n            [3, 7],\n            [18, 7],\n            [-1, -1],\n            [13, 21],\n            [13, 0]\n        ]\n    },\n    '5': {\n        width: 20, points: [\n            [15, 21],\n            [5, 21],\n            [4, 12],\n            [5, 13],\n            [8, 14],\n            [11, 14],\n            [14, 13],\n            [16, 11],\n            [17, 8],\n            [17, 6],\n            [16, 3],\n            [14, 1],\n            [11, 0],\n            [8, 0],\n            [5, 1],\n            [4, 2],\n            [3, 4]\n        ]\n    },\n    '6': {\n        width: 20, points: [\n            [16, 18],\n            [15, 20],\n            [12, 21],\n            [10, 21],\n            [7, 20],\n            [5, 17],\n            [4, 12],\n            [4, 7],\n            [5, 3],\n            [7, 1],\n            [10, 0],\n            [11, 0],\n            [14, 1],\n            [16, 3],\n            [17, 6],\n            [17, 7],\n            [16, 10],\n            [14, 12],\n            [11, 13],\n            [10, 13],\n            [7, 12],\n            [5, 10],\n            [4, 7]\n        ]\n    },\n    '7': {\n        width: 20, points: [\n            [17, 21],\n            [7, 0],\n            [-1, -1],\n            [3, 21],\n            [17, 21]\n        ]\n    },\n    '8': {\n        width: 20, points: [\n            [8, 21],\n            [5, 20],\n            [4, 18],\n            [4, 16],\n            [5, 14],\n            [7, 13],\n            [11, 12],\n            [14, 11],\n            [16, 9],\n            [17, 7],\n            [17, 4],\n            [16, 2],\n            [15, 1],\n            [12, 0],\n            [8, 0],\n            [5, 1],\n            [4, 2],\n            [3, 4],\n            [3, 7],\n            [4, 9],\n            [6, 11],\n            [9, 12],\n            [13, 13],\n            [15, 14],\n            [16, 16],\n            [16, 18],\n            [15, 20],\n            [12, 21],\n            [8, 21]\n        ]\n    },\n    '9': {\n        width: 20, points: [\n            [16, 14],\n            [15, 11],\n            [13, 9],\n            [10, 8],\n            [9, 8],\n            [6, 9],\n            [4, 11],\n            [3, 14],\n            [3, 15],\n            [4, 18],\n            [6, 20],\n            [9, 21],\n            [10, 21],\n            [13, 20],\n            [15, 18],\n            [16, 14],\n            [16, 9],\n            [15, 4],\n            [13, 1],\n            [10, 0],\n            [8, 0],\n            [5, 1],\n            [4, 3]\n        ]\n    },\n    ':': {\n        width: 10, points: [\n            [5, 14],\n            [4, 13],\n            [5, 12],\n            [6, 13],\n            [5, 14],\n            [-1, -1],\n            [5, 2],\n            [4, 1],\n            [5, 0],\n            [6, 1],\n            [5, 2]\n        ]\n    },\n    ';': {\n        width: 10, points: [\n            [5, 14],\n            [4, 13],\n            [5, 12],\n            [6, 13],\n            [5, 14],\n            [-1, -1],\n            [6, 1],\n            [5, 0],\n            [4, 1],\n            [5, 2],\n            [6, 1],\n            [6, -1],\n            [5, -3],\n            [4, -4]\n        ]\n    },\n    '<': {\n        width: 24, points: [\n            [20, 18],\n            [4, 9],\n            [20, 0]\n        ]\n    },\n    '=': {\n        width: 26, points: [\n            [4, 12],\n            [22, 12],\n            [-1, -1],\n            [4, 6],\n            [22, 6]\n        ]\n    },\n    '>': {\n        width: 24, points: [\n            [4, 18],\n            [20, 9],\n            [4, 0]\n        ]\n    },\n    '?': {\n        width: 18, points: [\n            [3, 16],\n            [3, 17],\n            [4, 19],\n            [5, 20],\n            [7, 21],\n            [11, 21],\n            [13, 20],\n            [14, 19],\n            [15, 17],\n            [15, 15],\n            [14, 13],\n            [13, 12],\n            [9, 10],\n            [9, 7],\n            [-1, -1],\n            [9, 2],\n            [8, 1],\n            [9, 0],\n            [10, 1],\n            [9, 2]\n        ]\n    },\n    '@': {\n        width: 27, points: [\n            [18, 13],\n            [17, 15],\n            [15, 16],\n            [12, 16],\n            [10, 15],\n            [9, 14],\n            [8, 11],\n            [8, 8],\n            [9, 6],\n            [11, 5],\n            [14, 5],\n            [16, 6],\n            [17, 8],\n            [-1, -1],\n            [12, 16],\n            [10, 14],\n            [9, 11],\n            [9, 8],\n            [10, 6],\n            [11, 5],\n            [-1, -1],\n            [18, 16],\n            [17, 8],\n            [17, 6],\n            [19, 5],\n            [21, 5],\n            [23, 7],\n            [24, 10],\n            [24, 12],\n            [23, 15],\n            [22, 17],\n            [20, 19],\n            [18, 20],\n            [15, 21],\n            [12, 21],\n            [9, 20],\n            [7, 19],\n            [5, 17],\n            [4, 15],\n            [3, 12],\n            [3, 9],\n            [4, 6],\n            [5, 4],\n            [7, 2],\n            [9, 1],\n            [12, 0],\n            [15, 0],\n            [18, 1],\n            [20, 2],\n            [21, 3],\n            [-1, -1],\n            [19, 16],\n            [18, 8],\n            [18, 6],\n            [19, 5]\n        ]\n    },\n    'A': {\n        width: 18, points: [\n            [9, 21],\n            [1, 0],\n            [-1, -1],\n            [9, 21],\n            [17, 0],\n            [-1, -1],\n            [4, 7],\n            [14, 7]\n        ]\n    },\n    'B': {\n        width: 21, points: [\n            [4, 21],\n            [4, 0],\n            [-1, -1],\n            [4, 21],\n            [13, 21],\n            [16, 20],\n            [17, 19],\n            [18, 17],\n            [18, 15],\n            [17, 13],\n            [16, 12],\n            [13, 11],\n            [-1, -1],\n            [4, 11],\n            [13, 11],\n            [16, 10],\n            [17, 9],\n            [18, 7],\n            [18, 4],\n            [17, 2],\n            [16, 1],\n            [13, 0],\n            [4, 0]\n        ]\n    },\n    'C': {\n        width: 21, points: [\n            [18, 16],\n            [17, 18],\n            [15, 20],\n            [13, 21],\n            [9, 21],\n            [7, 20],\n            [5, 18],\n            [4, 16],\n            [3, 13],\n            [3, 8],\n            [4, 5],\n            [5, 3],\n            [7, 1],\n            [9, 0],\n            [13, 0],\n            [15, 1],\n            [17, 3],\n            [18, 5]\n        ]\n    },\n    'D': {\n        width: 21, points: [\n            [4, 21],\n            [4, 0],\n            [-1, -1],\n            [4, 21],\n            [11, 21],\n            [14, 20],\n            [16, 18],\n            [17, 16],\n            [18, 13],\n            [18, 8],\n            [17, 5],\n            [16, 3],\n            [14, 1],\n            [11, 0],\n            [4, 0]\n        ]\n    },\n    'E': {\n        width: 19, points: [\n            [4, 21],\n            [4, 0],\n            [-1, -1],\n            [4, 21],\n            [17, 21],\n            [-1, -1],\n            [4, 11],\n            [12, 11],\n            [-1, -1],\n            [4, 0],\n            [17, 0]\n        ]\n    },\n    'F': {\n        width: 18, points: [\n            [4, 21],\n            [4, 0],\n            [-1, -1],\n            [4, 21],\n            [17, 21],\n            [-1, -1],\n            [4, 11],\n            [12, 11]\n        ]\n    },\n    'G': {\n        width: 21, points: [\n            [18, 16],\n            [17, 18],\n            [15, 20],\n            [13, 21],\n            [9, 21],\n            [7, 20],\n            [5, 18],\n            [4, 16],\n            [3, 13],\n            [3, 8],\n            [4, 5],\n            [5, 3],\n            [7, 1],\n            [9, 0],\n            [13, 0],\n            [15, 1],\n            [17, 3],\n            [18, 5],\n            [18, 8],\n            [-1, -1],\n            [13, 8],\n            [18, 8]\n        ]\n    },\n    'H': {\n        width: 22, points: [\n            [4, 21],\n            [4, 0],\n            [-1, -1],\n            [18, 21],\n            [18, 0],\n            [-1, -1],\n            [4, 11],\n            [18, 11]\n        ]\n    },\n    'I': {\n        width: 8, points: [\n            [4, 21],\n            [4, 0]\n        ]\n    },\n    'J': {\n        width: 16, points: [\n            [12, 21],\n            [12, 5],\n            [11, 2],\n            [10, 1],\n            [8, 0],\n            [6, 0],\n            [4, 1],\n            [3, 2],\n            [2, 5],\n            [2, 7]\n        ]\n    },\n    'K': {\n        width: 21, points: [\n            [4, 21],\n            [4, 0],\n            [-1, -1],\n            [18, 21],\n            [4, 7],\n            [-1, -1],\n            [9, 12],\n            [18, 0]\n        ]\n    },\n    'L': {\n        width: 17, points: [\n            [4, 21],\n            [4, 0],\n            [-1, -1],\n            [4, 0],\n            [16, 0]\n        ]\n    },\n    'M': {\n        width: 24, points: [\n            [4, 21],\n            [4, 0],\n            [-1, -1],\n            [4, 21],\n            [12, 0],\n            [-1, -1],\n            [20, 21],\n            [12, 0],\n            [-1, -1],\n            [20, 21],\n            [20, 0]\n        ]\n    },\n    'N': {\n        width: 22, points: [\n            [4, 21],\n            [4, 0],\n            [-1, -1],\n            [4, 21],\n            [18, 0],\n            [-1, -1],\n            [18, 21],\n            [18, 0]\n        ]\n    },\n    'O': {\n        width: 22, points: [\n            [9, 21],\n            [7, 20],\n            [5, 18],\n            [4, 16],\n            [3, 13],\n            [3, 8],\n            [4, 5],\n            [5, 3],\n            [7, 1],\n            [9, 0],\n            [13, 0],\n            [15, 1],\n            [17, 3],\n            [18, 5],\n            [19, 8],\n            [19, 13],\n            [18, 16],\n            [17, 18],\n            [15, 20],\n            [13, 21],\n            [9, 21]\n        ]\n    },\n    'P': {\n        width: 21, points: [\n            [4, 21],\n            [4, 0],\n            [-1, -1],\n            [4, 21],\n            [13, 21],\n            [16, 20],\n            [17, 19],\n            [18, 17],\n            [18, 14],\n            [17, 12],\n            [16, 11],\n            [13, 10],\n            [4, 10]\n        ]\n    },\n    'Q': {\n        width: 22, points: [\n            [9, 21],\n            [7, 20],\n            [5, 18],\n            [4, 16],\n            [3, 13],\n            [3, 8],\n            [4, 5],\n            [5, 3],\n            [7, 1],\n            [9, 0],\n            [13, 0],\n            [15, 1],\n            [17, 3],\n            [18, 5],\n            [19, 8],\n            [19, 13],\n            [18, 16],\n            [17, 18],\n            [15, 20],\n            [13, 21],\n            [9, 21],\n            [-1, -1],\n            [12, 4],\n            [18, -2]\n        ]\n    },\n    'R': {\n        width: 21, points: [\n            [4, 21],\n            [4, 0],\n            [-1, -1],\n            [4, 21],\n            [13, 21],\n            [16, 20],\n            [17, 19],\n            [18, 17],\n            [18, 15],\n            [17, 13],\n            [16, 12],\n            [13, 11],\n            [4, 11],\n            [-1, -1],\n            [11, 11],\n            [18, 0]\n        ]\n    },\n    'S': {\n        width: 20, points: [\n            [17, 18],\n            [15, 20],\n            [12, 21],\n            [8, 21],\n            [5, 20],\n            [3, 18],\n            [3, 16],\n            [4, 14],\n            [5, 13],\n            [7, 12],\n            [13, 10],\n            [15, 9],\n            [16, 8],\n            [17, 6],\n            [17, 3],\n            [15, 1],\n            [12, 0],\n            [8, 0],\n            [5, 1],\n            [3, 3]\n        ]\n    },\n    'T': {\n        width: 16, points: [\n            [8, 21],\n            [8, 0],\n            [-1, -1],\n            [1, 21],\n            [15, 21]\n        ]\n    },\n    'U': {\n        width: 22, points: [\n            [4, 21],\n            [4, 6],\n            [5, 3],\n            [7, 1],\n            [10, 0],\n            [12, 0],\n            [15, 1],\n            [17, 3],\n            [18, 6],\n            [18, 21]\n        ]\n    },\n    'V': {\n        width: 18, points: [\n            [1, 21],\n            [9, 0],\n            [-1, -1],\n            [17, 21],\n            [9, 0]\n        ]\n    },\n    'W': {\n        width: 24, points: [\n            [2, 21],\n            [7, 0],\n            [-1, -1],\n            [12, 21],\n            [7, 0],\n            [-1, -1],\n            [12, 21],\n            [17, 0],\n            [-1, -1],\n            [22, 21],\n            [17, 0]\n        ]\n    },\n    'X': {\n        width: 20, points: [\n            [3, 21],\n            [17, 0],\n            [-1, -1],\n            [17, 21],\n            [3, 0]\n        ]\n    },\n    'Y': {\n        width: 18, points: [\n            [1, 21],\n            [9, 11],\n            [9, 0],\n            [-1, -1],\n            [17, 21],\n            [9, 11]\n        ]\n    },\n    'Z': {\n        width: 20, points: [\n            [17, 21],\n            [3, 0],\n            [-1, -1],\n            [3, 21],\n            [17, 21],\n            [-1, -1],\n            [3, 0],\n            [17, 0]\n        ]\n    },\n    '[': {\n        width: 14, points: [\n            [4, 25],\n            [4, -7],\n            [-1, -1],\n            [5, 25],\n            [5, -7],\n            [-1, -1],\n            [4, 25],\n            [11, 25],\n            [-1, -1],\n            [4, -7],\n            [11, -7]\n        ]\n    },\n    '\\\\': {\n        width: 14, points: [\n            [0, 21],\n            [14, -3]\n        ]\n    },\n    ']': {\n        width: 14, points: [\n            [9, 25],\n            [9, -7],\n            [-1, -1],\n            [10, 25],\n            [10, -7],\n            [-1, -1],\n            [3, 25],\n            [10, 25],\n            [-1, -1],\n            [3, -7],\n            [10, -7]\n        ]\n    },\n    '^': {\n        width: 16, points: [\n            [6, 15],\n            [8, 18],\n            [10, 15],\n            [-1, -1],\n            [3, 12],\n            [8, 17],\n            [13, 12],\n            [-1, -1],\n            [8, 17],\n            [8, 0]\n        ]\n    },\n    '_': {\n        width: 16, points: [\n            [0, -2],\n            [16, -2]\n        ]\n    },\n    '`': {\n        width: 10, points: [\n            [6, 21],\n            [5, 20],\n            [4, 18],\n            [4, 16],\n            [5, 15],\n            [6, 16],\n            [5, 17]\n        ]\n    },\n    'a': {\n        width: 19, points: [\n            [15, 14],\n            [15, 0],\n            [-1, -1],\n            [15, 11],\n            [13, 13],\n            [11, 14],\n            [8, 14],\n            [6, 13],\n            [4, 11],\n            [3, 8],\n            [3, 6],\n            [4, 3],\n            [6, 1],\n            [8, 0],\n            [11, 0],\n            [13, 1],\n            [15, 3]\n        ]\n    },\n    'b': {\n        width: 19, points: [\n            [4, 21],\n            [4, 0],\n            [-1, -1],\n            [4, 11],\n            [6, 13],\n            [8, 14],\n            [11, 14],\n            [13, 13],\n            [15, 11],\n            [16, 8],\n            [16, 6],\n            [15, 3],\n            [13, 1],\n            [11, 0],\n            [8, 0],\n            [6, 1],\n            [4, 3]\n        ]\n    },\n    'c': {\n        width: 18, points: [\n            [15, 11],\n            [13, 13],\n            [11, 14],\n            [8, 14],\n            [6, 13],\n            [4, 11],\n            [3, 8],\n            [3, 6],\n            [4, 3],\n            [6, 1],\n            [8, 0],\n            [11, 0],\n            [13, 1],\n            [15, 3]\n        ]\n    },\n    'd': {\n        width: 19, points: [\n            [15, 21],\n            [15, 0],\n            [-1, -1],\n            [15, 11],\n            [13, 13],\n            [11, 14],\n            [8, 14],\n            [6, 13],\n            [4, 11],\n            [3, 8],\n            [3, 6],\n            [4, 3],\n            [6, 1],\n            [8, 0],\n            [11, 0],\n            [13, 1],\n            [15, 3]\n        ]\n    },\n    'e': {\n        width: 18, points: [\n            [3, 8],\n            [15, 8],\n            [15, 10],\n            [14, 12],\n            [13, 13],\n            [11, 14],\n            [8, 14],\n            [6, 13],\n            [4, 11],\n            [3, 8],\n            [3, 6],\n            [4, 3],\n            [6, 1],\n            [8, 0],\n            [11, 0],\n            [13, 1],\n            [15, 3]\n        ]\n    },\n    'f': {\n        width: 12, points: [\n            [10, 21],\n            [8, 21],\n            [6, 20],\n            [5, 17],\n            [5, 0],\n            [-1, -1],\n            [2, 14],\n            [9, 14]\n        ]\n    },\n    'g': {\n        width: 19, points: [\n            [15, 14],\n            [15, -2],\n            [14, -5],\n            [13, -6],\n            [11, -7],\n            [8, -7],\n            [6, -6],\n            [-1, -1],\n            [15, 11],\n            [13, 13],\n            [11, 14],\n            [8, 14],\n            [6, 13],\n            [4, 11],\n            [3, 8],\n            [3, 6],\n            [4, 3],\n            [6, 1],\n            [8, 0],\n            [11, 0],\n            [13, 1],\n            [15, 3]\n        ]\n    },\n    'h': {\n        width: 19, points: [\n            [4, 21],\n            [4, 0],\n            [-1, -1],\n            [4, 10],\n            [7, 13],\n            [9, 14],\n            [12, 14],\n            [14, 13],\n            [15, 10],\n            [15, 0]\n        ]\n    },\n    'i': {\n        width: 8, points: [\n            [3, 21],\n            [4, 20],\n            [5, 21],\n            [4, 22],\n            [3, 21],\n            [-1, -1],\n            [4, 14],\n            [4, 0]\n        ]\n    },\n    'j': {\n        width: 10, points: [\n            [5, 21],\n            [6, 20],\n            [7, 21],\n            [6, 22],\n            [5, 21],\n            [-1, -1],\n            [6, 14],\n            [6, -3],\n            [5, -6],\n            [3, -7],\n            [1, -7]\n        ]\n    },\n    'k': {\n        width: 17, points: [\n            [4, 21],\n            [4, 0],\n            [-1, -1],\n            [14, 14],\n            [4, 4],\n            [-1, -1],\n            [8, 8],\n            [15, 0]\n        ]\n    },\n    'l': {\n        width: 8, points: [\n            [4, 21],\n            [4, 0]\n        ]\n    },\n    'm': {\n        width: 30, points: [\n            [4, 14],\n            [4, 0],\n            [-1, -1],\n            [4, 10],\n            [7, 13],\n            [9, 14],\n            [12, 14],\n            [14, 13],\n            [15, 10],\n            [15, 0],\n            [-1, -1],\n            [15, 10],\n            [18, 13],\n            [20, 14],\n            [23, 14],\n            [25, 13],\n            [26, 10],\n            [26, 0]\n        ]\n    },\n    'n': {\n        width: 19, points: [\n            [4, 14],\n            [4, 0],\n            [-1, -1],\n            [4, 10],\n            [7, 13],\n            [9, 14],\n            [12, 14],\n            [14, 13],\n            [15, 10],\n            [15, 0]\n        ]\n    },\n    'o': {\n        width: 19, points: [\n            [8, 14],\n            [6, 13],\n            [4, 11],\n            [3, 8],\n            [3, 6],\n            [4, 3],\n            [6, 1],\n            [8, 0],\n            [11, 0],\n            [13, 1],\n            [15, 3],\n            [16, 6],\n            [16, 8],\n            [15, 11],\n            [13, 13],\n            [11, 14],\n            [8, 14]\n        ]\n    },\n    'p': {\n        width: 19, points: [\n            [4, 14],\n            [4, -7],\n            [-1, -1],\n            [4, 11],\n            [6, 13],\n            [8, 14],\n            [11, 14],\n            [13, 13],\n            [15, 11],\n            [16, 8],\n            [16, 6],\n            [15, 3],\n            [13, 1],\n            [11, 0],\n            [8, 0],\n            [6, 1],\n            [4, 3]\n        ]\n    },\n    'q': {\n        width: 19, points: [\n            [15, 14],\n            [15, -7],\n            [-1, -1],\n            [15, 11],\n            [13, 13],\n            [11, 14],\n            [8, 14],\n            [6, 13],\n            [4, 11],\n            [3, 8],\n            [3, 6],\n            [4, 3],\n            [6, 1],\n            [8, 0],\n            [11, 0],\n            [13, 1],\n            [15, 3]\n        ]\n    },\n    'r': {\n        width: 13, points: [\n            [4, 14],\n            [4, 0],\n            [-1, -1],\n            [4, 8],\n            [5, 11],\n            [7, 13],\n            [9, 14],\n            [12, 14]\n        ]\n    },\n    's': {\n        width: 17, points: [\n            [14, 11],\n            [13, 13],\n            [10, 14],\n            [7, 14],\n            [4, 13],\n            [3, 11],\n            [4, 9],\n            [6, 8],\n            [11, 7],\n            [13, 6],\n            [14, 4],\n            [14, 3],\n            [13, 1],\n            [10, 0],\n            [7, 0],\n            [4, 1],\n            [3, 3]\n        ]\n    },\n    't': {\n        width: 12, points: [\n            [5, 21],\n            [5, 4],\n            [6, 1],\n            [8, 0],\n            [10, 0],\n            [-1, -1],\n            [2, 14],\n            [9, 14]\n        ]\n    },\n    'u': {\n        width: 19, points: [\n            [4, 14],\n            [4, 4],\n            [5, 1],\n            [7, 0],\n            [10, 0],\n            [12, 1],\n            [15, 4],\n            [-1, -1],\n            [15, 14],\n            [15, 0]\n        ]\n    },\n    'v': {\n        width: 16, points: [\n            [2, 14],\n            [8, 0],\n            [-1, -1],\n            [14, 14],\n            [8, 0]\n        ]\n    },\n    'w': {\n        width: 22, points: [\n            [3, 14],\n            [7, 0],\n            [-1, -1],\n            [11, 14],\n            [7, 0],\n            [-1, -1],\n            [11, 14],\n            [15, 0],\n            [-1, -1],\n            [19, 14],\n            [15, 0]\n        ]\n    },\n    'x': {\n        width: 17, points: [\n            [3, 14],\n            [14, 0],\n            [-1, -1],\n            [14, 14],\n            [3, 0]\n        ]\n    },\n    'y': {\n        width: 16, points: [\n            [2, 14],\n            [8, 0],\n            [-1, -1],\n            [14, 14],\n            [8, 0],\n            [6, -4],\n            [4, -6],\n            [2, -7],\n            [1, -7]\n        ]\n    },\n    'z': {\n        width: 17, points: [\n            [14, 14],\n            [3, 0],\n            [-1, -1],\n            [3, 14],\n            [14, 14],\n            [-1, -1],\n            [3, 0],\n            [14, 0]\n        ]\n    },\n    '{': {\n        width: 14, points: [\n            [9, 25],\n            [7, 24],\n            [6, 23],\n            [5, 21],\n            [5, 19],\n            [6, 17],\n            [7, 16],\n            [8, 14],\n            [8, 12],\n            [6, 10],\n            [-1, -1],\n            [7, 24],\n            [6, 22],\n            [6, 20],\n            [7, 18],\n            [8, 17],\n            [9, 15],\n            [9, 13],\n            [8, 11],\n            [4, 9],\n            [8, 7],\n            [9, 5],\n            [9, 3],\n            [8, 1],\n            [7, 0],\n            [6, -2],\n            [6, -4],\n            [7, -6],\n            [-1, -1],\n            [6, 8],\n            [8, 6],\n            [8, 4],\n            [7, 2],\n            [6, 1],\n            [5, -1],\n            [5, -3],\n            [6, -5],\n            [7, -6],\n            [9, -7]\n        ]\n    },\n    '|': {\n        width: 8, points: [\n            [4, 25],\n            [4, -7]\n        ]\n    },\n    '}': {\n        width: 14, points: [\n            [5, 25],\n            [7, 24],\n            [8, 23],\n            [9, 21],\n            [9, 19],\n            [8, 17],\n            [7, 16],\n            [6, 14],\n            [6, 12],\n            [8, 10],\n            [-1, -1],\n            [7, 24],\n            [8, 22],\n            [8, 20],\n            [7, 18],\n            [6, 17],\n            [5, 15],\n            [5, 13],\n            [6, 11],\n            [10, 9],\n            [6, 7],\n            [5, 5],\n            [5, 3],\n            [6, 1],\n            [7, 0],\n            [8, -2],\n            [8, -4],\n            [7, -6],\n            [-1, -1],\n            [8, 8],\n            [6, 6],\n            [6, 4],\n            [7, 2],\n            [8, 1],\n            [9, -1],\n            [9, -3],\n            [8, -5],\n            [7, -6],\n            [5, -7]\n        ]\n    },\n    '~': {\n        width: 24, points: [\n            [3, 6],\n            [3, 8],\n            [4, 11],\n            [6, 12],\n            [8, 12],\n            [10, 11],\n            [14, 8],\n            [16, 7],\n            [18, 7],\n            [20, 8],\n            [21, 10],\n            [-1, -1],\n            [3, 8],\n            [4, 10],\n            [6, 11],\n            [8, 11],\n            [10, 10],\n            [14, 7],\n            [16, 6],\n            [18, 6],\n            [20, 7],\n            [21, 10],\n            [21, 12]\n        ]\n    }\n};\n\n/**\n * @desc Creates wireframe text-shaped geometry arrays.\n *\n * ## Usage\n *\n * In the example below we'll create an {@link XKTModel}, then create an {@link XKTMesh} with a text-shaped {@link XKTGeometry}.\n *\n * [[Run this example](http://xeokit.github.io/xeokit-sdk/examples/#geometry_builders_buildVectorTextGeometry)]\n *\n * ````javascript\n * const xktModel = new XKTModel();\n *\n * const text = buildVectorTextGeometry({\n *      origin: [0,0,0],\n *      text: \"On the other side of the screen, it all looked so easy\"\n * });\n *\n * const xktGeometry = xktModel.createGeometry({\n *      geometryId: \"textGeometry\",\n *      primitiveType: text.primitiveType, // Will be \"lines\"\n *      positions: text.positions,\n *      indices: text.indices\n * });\n *\n * const xktMesh = xktModel.createMesh({\n *      meshId: \"redTextMesh\",\n *      geometryId: \"textGeometry\",\n *      position: [-4, -6, -4],\n *      scale: [1, 3, 1],\n *      rotation: [0, 0, 0],\n *      color: [1, 0, 0],\n *      opacity: 1\n * });\n *\n * const xktEntity = xktModel.createEntity({\n *      entityId: \"redText\",\n *      meshIds: [\"redTextMesh\"]\n *  });\n *\n * xktModel.finalize();\n * ````\n *\n * @function buildVectorTextGeometry\n * @param {*} [cfg] Configs\n * @param {Number[]} [cfg.center]  3D point indicating the center position.\n * @param {Number[]} [cfg.origin] 3D point indicating the top left corner.\n * @param {Number} [cfg.size=1] Size of each character.\n * @param {String} [cfg.text=\"\"] The text.\n * @returns {Object} Geometry arrays for {@link XKTModel#createGeometry} or {@link XKTModel#createMesh}.\n */\nfunction buildVectorTextGeometry(cfg = {}) {\n\n    var origin = cfg.origin || [0, 0, 0];\n    var xOrigin = origin[0];\n    var yOrigin = origin[1];\n    var zOrigin = origin[2];\n    var size = cfg.size || 1;\n\n    var positions = [];\n    var indices = [];\n    var text = (\"\" + cfg.text).trim();\n    var lines = (text || \"\").split(\"\\n\");\n    var countVerts = 0;\n    var y = 0;\n    var x;\n    var str;\n    var len;\n    var c;\n    var mag = 1.0 / 25.0;\n    var penUp;\n    var p1;\n    var p2;\n    var needLine;\n    var pointsLen;\n    var a;\n\n    for (var iLine = 0; iLine < lines.length; iLine++) {\n\n        x = 0;\n        str = lines[iLine];\n        len = str.length;\n\n        for (var i = 0; i < len; i++) {\n\n            c = letters[str.charAt(i)];\n\n            if (c === '\\n') {\n                //alert(\"newline\");\n            }\n\n            if (!c) {\n                continue;\n            }\n\n            penUp = 1;\n            p1 = -1;\n            p2 = -1;\n            needLine = false;\n\n            pointsLen = c.points.length;\n\n            for (var j = 0; j < pointsLen; j++) {\n                a = c.points[j];\n\n                if (a[0] === -1 && a[1] === -1) {\n                    penUp = 1;\n                    needLine = false;\n                    continue;\n                }\n\n                positions.push((x + (a[0] * size) * mag) + xOrigin);\n                positions.push((y + (a[1] * size) * mag) + yOrigin);\n                positions.push(0 + zOrigin);\n\n                if (p1 === -1) {\n                    p1 = countVerts;\n                } else if (p2 === -1) {\n                    p2 = countVerts;\n                } else {\n                    p1 = p2;\n                    p2 = countVerts;\n                }\n                countVerts++;\n\n                if (penUp) {\n                    penUp = false;\n\n                } else {\n                    indices.push(p1);\n                    indices.push(p2);\n                }\n\n                needLine = true;\n            }\n            x += c.width * mag * size;\n\n        }\n        y -= 35 * mag * size;\n    }\n\n    return {\n        primitiveType: \"lines\",\n        positions: positions,\n        indices: indices\n    };\n}\n\n\nexport {buildVectorTextGeometry}\n","/**\n * @private\n * @param buf\n * @returns {ArrayBuffer}\n */\nexport function toArrayBuffer(buf) {\n    const ab = new ArrayBuffer(buf.length);\n    const view = new Uint8Array(ab);\n    for (let i = 0; i < buf.length; ++i) {\n        view[i] = buf[i];\n    }\n    return ab;\n}","import {XKT_INFO} from \"./XKT_INFO.js\";\nimport {XKTModel} from \"./XKTModel/XKTModel.js\";\nimport {parseMetaModelIntoXKTModel} from \"./parsers/parseMetaModelIntoXKTModel.js\";\nimport {parseCityJSONIntoXKTModel} from \"./parsers/parseCityJSONIntoXKTModel.js\";\nimport {parseGLTFIntoXKTModel} from \"./parsers/parseGLTFIntoXKTModel.js\";\nimport {parseIFCIntoXKTModel} from \"./parsers/parseIFCIntoXKTModel.js\";\nimport {parseLASIntoXKTModel} from \"./parsers/parseLASIntoXKTModel.js\";\nimport {parsePCDIntoXKTModel} from \"./parsers/parsePCDIntoXKTModel.js\";\nimport {parsePLYIntoXKTModel} from \"./parsers/parsePLYIntoXKTModel.js\";\nimport {parseSTLIntoXKTModel} from \"./parsers/parseSTLIntoXKTModel.js\";\nimport {writeXKTModelToArrayBuffer} from \"./XKTModel/writeXKTModelToArrayBuffer.js\";\n\nimport {toArrayBuffer} from \"./XKTModel/lib/toArraybuffer\";\nimport {parseGLTFJSONIntoXKTModel} from \"./parsers/parseGLTFJSONIntoXKTModel\";\n\nconst fs = require('fs');\n\n/**\n * Converts model files into xeokit's native XKT format.\n *\n * Supported source formats are: IFC, CityJSON, glTF, LAZ and LAS.\n *\n * **Only bundled in xeokit-convert.cjs.js.**\n *\n * ## Usage\n *\n * ````javascript\n * const convert2xkt = require(\"@xeokit/xeokit-convert/dist/convert2xkt.cjs.js\");\n * const fs = require('fs');\n *\n * convert2xkt({\n *      sourceData: fs.readFileSync(\"rme_advanced_sample_project.ifc\"),\n *      outputXKT: (xtkArrayBuffer) => {\n *          fs.writeFileSync(\"rme_advanced_sample_project.ifc.xkt\", xtkArrayBuffer);\n *      }\n *  }).then(() => {\n *      console.log(\"Converted.\");\n *  }, (errMsg) => {\n *      console.error(\"Conversion failed: \" + errMsg)\n *  });\n ````\n * @param {Object} params Conversion parameters.\n * @param {Object} params.WebIFC The WebIFC library. We pass this in as an external dependency, in order to give the\n * caller the choice of whether to use the Browser or NodeJS version.\n * @param {String} [params.source] Path to source file. Alternative to ````sourceData````.\n * @param {ArrayBuffer|JSON} [params.sourceData] Source file data. Alternative to ````source````.\n * @param {String} [params.sourceFormat] Format of source file/data. Always needed with ````sourceData````, but not normally needed with ````source````, because convert2xkt will determine the format automatically from the file extension of ````source````.\n * @param {ArrayBuffer} [params.metaModelData] Source file data. Overrides metadata from ````metaModelSource````, ````sourceData```` and ````source````.\n * @param {String} [params.metaModelSource] Path to source metaModel file. Overrides metadata from ````sourceData```` and ````source````. Overridden by ````metaModelData````.\n * @param {String} [params.output] Path to destination XKT file. Directories on this path are automatically created if not existing.\n * @param {Function} [params.outputXKTModel] Callback to collect the ````XKTModel```` that is internally build by this method.\n * @param {Function} [params.outputXKT] Callback to collect XKT file data.\n * @param {String[]} [params.includeTypes] Option to only convert objects of these types.\n * @param {String[]} [params.excludeTypes] Option to never convert objects of these types.\n * @param {Object} [stats] Collects conversion statistics. Statistics are attached to this object if provided.\n * @param {Function} [params.outputStats] Callback to collect statistics.\n * @param {Boolean} [params.rotateX=false] Whether to rotate the model 90 degrees about the X axis to make the Y axis \"up\", if necessary. Applies to CityJSON and LAS/LAZ models.\n * @param {Boolean} [params.reuseGeometries=true] When true, will enable geometry reuse within the XKT. When false,\n * will automatically \"expand\" all reused geometries into duplicate copies. This has the drawback of increasing the XKT\n * file size (~10-30% for typical models), but can make the model more responsive in the xeokit Viewer, especially if the model\n * has excessive geometry reuse. An example of excessive geometry reuse would be when a model (eg. glTF) has 4000 geometries that are\n * shared amongst 2000 objects, ie. a large number of geometries with a low amount of reuse, which can present a\n * pathological performance case for xeokit's underlying graphics APIs (WebGL, WebGPU etc).\n * @param {Boolean} [params.includeTextures=true] Whether to convert textures. Only works for ````glTF```` models.\n * @param {Boolean} [params.includeNormals=true] Whether to convert normals. When false, the parser will ignore\n * geometry normals, and the modelwill rely on the xeokit ````Viewer```` to automatically generate them. This has\n * the limitation that the normals will be face-aligned, and therefore the ````Viewer```` will only be able to render\n * a flat-shaded non-PBR representation of the model.\n * @param {Number} [params.minTileSize=200] Minimum RTC coordinate tile size. Set this to a value between 100 and 10000,\n * depending on how far from the coordinate origin the model's vertex positions are; specify larger tile sizes when close\n * to the origin, and smaller sizes when distant.  This compensates for decreasing precision as floats get bigger.\n * @param {Function} [params.log] Logging callback.\n * @return {Promise<number>}\n */\nfunction convert2xkt({\n                         WebIFC,\n                         source,\n                         sourceData,\n                         sourceFormat,\n                         metaModelSource,\n                         metaModelData,\n                         output,\n                         outputXKTModel,\n                         outputXKT,\n                         includeTypes,\n                         excludeTypes,\n                         reuseGeometries = true,\n                         minTileSize = 200,\n                         stats = {},\n                         outputStats,\n                         rotateX = false,\n                         includeTextures = true,\n                         includeNormals = true,\n                         log = function (msg) {\n                         }\n                     }) {\n\n    stats.sourceFormat = \"\";\n    stats.schemaVersion = \"\";\n    stats.title = \"\";\n    stats.author = \"\";\n    stats.created = \"\";\n    stats.numMetaObjects = 0;\n    stats.numPropertySets = 0;\n    stats.numTriangles = 0;\n    stats.numVertices = 0;\n    stats.numNormals = 0;\n    stats.numUVs = 0;\n    stats.numTextures = 0;\n    stats.numTextureSets = 0;\n    stats.numObjects = 0;\n    stats.numGeometries = 0;\n    stats.sourceSize = 0;\n    stats.xktSize = 0;\n    stats.texturesSize = 0;\n    stats.xktVersion = \"\";\n    stats.compressionRatio = 0;\n    stats.conversionTime = 0;\n    stats.aabb = null;\n    stats.minTileSize = minTileSize || 200;\n\n    return new Promise(function (resolve, reject) {\n        const _log = log;\n        log = (msg) => {\n            _log(`[convert2xkt] ${msg}`)\n        }\n\n        if (!source && !sourceData) {\n            reject(\"Argument expected: source or sourceData\");\n            return;\n        }\n\n        if (!sourceFormat && sourceData) {\n            reject(\"Argument expected: sourceFormat is required with sourceData\");\n            return;\n        }\n\n        if (!output && !outputXKTModel && !outputXKT) {\n            reject(\"Argument expected: output, outputXKTModel or outputXKT\");\n            return;\n        }\n\n        if (source) {\n            log('Reading input file: ' + source);\n        }\n\n        const startTime = new Date();\n\n        const ext = sourceFormat || source.split('.').pop();\n\n        if (!sourceData) {\n            try {\n                sourceData = fs.readFileSync(source);\n            } catch (err) {\n                reject(err);\n                return;\n            }\n        }\n\n        const sourceFileSizeBytes = sourceData.byteLength;\n\n        log(\"Input file size: \" + (sourceFileSizeBytes / 1000).toFixed(2) + \" kB\");\n\n        if (!metaModelData && metaModelSource) {\n            log('Reading input metadata file: ' + metaModelSource);\n            try {\n                metaModelData = fs.readFileSync(metaModelSource);\n            } catch (err) {\n                reject(err);\n                return;\n            }\n        }\n\n        if (reuseGeometries === false) {\n            log(\"Geometry reuse is disabled\");\n        }\n\n        const xktModel = new XKTModel({\n            minTileSize\n        });\n\n        const parseMetaModelJSON = function (metaModelData) {\n            try {\n                return JSON.parse(metaModelData);\n            } catch (e) {\n                log(`Error parsing metadata JSON: ${e}`);\n            }\n        }\n\n        switch (ext) {\n            case \"json\":\n                convert(parseCityJSONIntoXKTModel, {\n                    data: JSON.parse(sourceData),\n                    xktModel,\n                    stats,\n                    rotateX,\n                    log\n                });\n                break;\n\n            case \"glb\":\n                sourceData = toArrayBuffer(sourceData);\n                convert(parseGLTFIntoXKTModel, {\n                    data: sourceData,\n                    reuseGeometries,\n                    includeTextures,\n                    includeNormals,\n                    metaModelData: metaModelData ? parseMetaModelJSON(metaModelData) : null,\n                    xktModel,\n                    stats,\n                    log\n                });\n                break;\n\n            case \"gltf\":\n                const gltfJSON = JSON.parse(sourceData);\n                const gltfBasePath = source ? getBasePath(source) : \"\";\n                convert(parseGLTFJSONIntoXKTModel, {\n                    baseUri: gltfBasePath,\n                    data: gltfJSON,\n                    reuseGeometries,\n                    includeTextures,\n                    includeNormals,\n                    metaModelData: metaModelData ? parseMetaModelJSON(metaModelData) : null,\n                    xktModel,\n                    getAttachment: async (name) => {\n                        const filePath = gltfBasePath + name;\n                        log(`Reading attachment file: ${filePath}`);\n                        const buffer = fs.readFileSync(filePath);\n                        const arrayBuf = toArrayBuffer(buffer);\n                        return arrayBuf;\n                    },\n                    stats,\n                    log\n                });\n                break;\n\n            case \"ifc\":\n                convert(parseIFCIntoXKTModel, {\n                    WebIFC,\n                    data: sourceData,\n                    xktModel,\n                    wasmPath: \"./\",\n                    includeTypes,\n                    excludeTypes,\n                    stats,\n                    log\n                });\n                break;\n\n            case \"laz\":\n                convert(parseLASIntoXKTModel, {\n                    data: sourceData,\n                    xktModel,\n                    stats,\n                    rotateX,\n                    log\n                });\n                break;\n\n            case \"las\":\n                convert(parseLASIntoXKTModel, {\n                    data: sourceData,\n                    xktModel,\n                    stats,\n                    log\n                });\n                break;\n\n            case \"pcd\":\n                convert(parsePCDIntoXKTModel, {\n                    data: sourceData,\n                    xktModel,\n                    stats,\n                    log\n                });\n                break;\n\n            case \"ply\":\n                convert(parsePLYIntoXKTModel, {\n                    data: sourceData,\n                    xktModel,\n                    stats,\n                    log\n                });\n                break;\n\n            case \"stl\":\n                convert(parseSTLIntoXKTModel, {\n                    data: sourceData,\n                    xktModel,\n                    stats,\n                    log\n                });\n                break;\n\n            default:\n                reject(`Error: unsupported source format: \"${ext}\".`);\n                return;\n        }\n\n        function convert(parser, converterParams) {\n\n            parser(converterParams).then(() => {\n\n                if (!metaModelData) {\n                    xktModel.createDefaultMetaObjects();\n                }\n\n                log(\"Input file parsed OK. Building XKT document...\");\n\n                xktModel.finalize().then(() => {\n\n                    log(\"XKT document built OK. Writing to XKT file...\");\n\n                    const xktArrayBuffer = writeXKTModelToArrayBuffer(xktModel, metaModelData, stats);\n\n                    const xktContent = Buffer.from(xktArrayBuffer);\n\n                    const targetFileSizeBytes = xktArrayBuffer.byteLength;\n\n                    stats.sourceSize = (sourceFileSizeBytes / 1000).toFixed(2);\n                    stats.xktSize = (targetFileSizeBytes / 1000).toFixed(2);\n                    stats.xktVersion = XKT_INFO.xktVersion;\n                    stats.compressionRatio = (sourceFileSizeBytes / targetFileSizeBytes).toFixed(2);\n                    stats.conversionTime = ((new Date() - startTime) / 1000.0).toFixed(2);\n                    stats.aabb = xktModel.aabb;\n                    log(`Converted to: XKT v${stats.xktVersion}`);\n                    if (includeTypes) {\n                        log(\"Include types: \" + (includeTypes ? includeTypes : \"(include all)\"));\n                    }\n                    if (excludeTypes) {\n                        log(\"Exclude types: \" + (excludeTypes ? excludeTypes : \"(exclude none)\"));\n                    }\n                    log(\"XKT size: \" + stats.xktSize + \" kB\");\n                    log(\"XKT textures size: \" + (stats.texturesSize / 1000).toFixed(2) + \"kB\");\n                    log(\"Compression ratio: \" + stats.compressionRatio);\n                    log(\"Conversion time: \" + stats.conversionTime + \" s\");\n                    log(\"Converted metaobjects: \" + stats.numMetaObjects);\n                    log(\"Converted property sets: \" + stats.numPropertySets);\n                    log(\"Converted drawable objects: \" + stats.numObjects);\n                    log(\"Converted geometries: \" + stats.numGeometries);\n                    log(\"Converted textures: \" + stats.numTextures);\n                    log(\"Converted textureSets: \" + stats.numTextureSets);\n                    log(\"Converted triangles: \" + stats.numTriangles);\n                    log(\"Converted vertices: \" + stats.numVertices);\n                    log(\"Converted UVs: \" + stats.numUVs);\n                    log(\"Converted normals: \" + stats.numNormals);\n                    log(\"minTileSize: \" + stats.minTileSize);\n\n                    if (output) {\n                        const outputDir = getBasePath(output).trim();\n                        if (outputDir !== \"\" && !fs.existsSync(outputDir)) {\n                            fs.mkdirSync(outputDir, {recursive: true});\n                        }\n                        log('Writing XKT file: ' + output);\n                        fs.writeFileSync(output, xktContent);\n                    }\n\n                    if (outputXKTModel) {\n                        outputXKTModel(xktModel);\n                    }\n\n                    if (outputXKT) {\n                        outputXKT(xktContent);\n                    }\n\n                    if (outputStats) {\n                        outputStats(stats);\n                    }\n\n                    resolve();\n                });\n            }, (err) => {\n                reject(err);\n            });\n        }\n    });\n}\n\nfunction getBasePath(src) {\n    const i = src.lastIndexOf(\"/\");\n    return (i !== 0) ? src.substring(0, i + 1) : \"\";\n}\n\nexport {convert2xkt};","import '@loaders.gl/polyfills';\nimport {installFilePolyfills} from '@loaders.gl/polyfills';\n\ninstallFilePolyfills();\n\nexport * from \"./src/index.js\";\nexport {convert2xkt} from \"./src/convert2xkt.js\"; // convert2xkt is only bundled for Node.js\n"],"names":["root","factory","exports","module","define","amd","global","require","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","d","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","r","Symbol","toStringTag","value","p","mat","mat2","mat3","xyz","tempVec3","vec","translate","scale","XKT_INFO","xktVersion","RepeatWrapping","ClampToEdgeWrapping","MirroredRepeatWrapping","NearestFilter","NearestMipMapNearestFilter","NearestMipmapNearestFilter","NearestMipmapLinearFilter","NearestMipMapLinearFilter","LinearFilter","LinearMipmapNearestFilter","LinearMipMapNearestFilter","LinearMipmapLinearFilter","LinearMipMapLinearFilter","GIFMediaType","JPEGMediaType","PNGMediaType","FloatArrayType","Float64Array","tempMat1","tempMat2","tempVec4","math","MIN_DOUBLE","Number","MAX_SAFE_INTEGER","MAX_DOUBLE","DEGTORAD","RADTODEG","vec2","values","vec3","vec4","mat3ToMat4","mat4","mat4ToMat3","createUUID","lut","i","toString","d0","Math","random","d1","d2","d3","clamp","min","max","fmod","a","b","console","error","negateVec4","v","dest","addVec4","u","addVec4Scalar","s","addVec3","addVec3Scalar","subVec4","subVec3","subVec2","subVec4Scalar","subScalarVec4","mulVec4","mulVec4Scalar","mulVec3Scalar","mulVec2Scalar","divVec3","divVec4","divScalarVec3","divVec3Scalar","divVec4Scalar","divScalarVec4","dotVec4","cross3Vec4","u0","u1","u2","v0","v1","v2","cross3Vec3","x","y","z","x2","y2","z2","sqLenVec4","lenVec4","sqrt","dotVec3","dotVec2","sqLenVec3","sqLenVec2","lenVec3","distVec3","w","lenVec2","distVec2","rcpVec3","normalizeVec4","f","normalizeVec3","normalizeVec2","angleVec3","theta","acos","vec3FromMat4Scale","m","vecToArray","trunc","round","len","Array","slice","length","xyzArrayToObject","arr","xyzObjectToArray","arry","dupMat4","mat4To3","m4s","setMat4ToZeroes","setMat4ToOnes","diagonalMat4v","diagonalMat4c","diagonalMat4s","identityMat4","identityMat3","isIdentityMat4","negateMat4","addMat4","addMat4Scalar","addScalarMat4","subMat4","subMat4Scalar","subScalarMat4","mulMat4","a00","a01","a02","a03","a10","a11","a12","a13","a20","a21","a22","a23","a30","a31","a32","a33","b00","b01","b02","b03","b10","b11","b12","b13","b20","b21","b22","b23","b30","b31","b32","b33","mulMat3","mulMat4Scalar","mulMat4v4","v3","transposeMat4","m4","m14","m8","m13","m12","m9","transposeMat3","determinantMat4","inverseMat4","b04","b05","b06","b07","b08","b09","invDet","traceMat4","translationMat4v","translationMat3v","translationMat4c","translationMat4s","translateMat4v","translateMat4c","OLDtranslateMat4c","m15","m3","m7","m11","rotationMat4v","anglerad","axis","xy","yz","zx","xs","ys","zs","ax","sin","c","cos","q","rotationMat4c","scalingMat4v","scalingMat3v","scalingMat4c","scaleMat4c","scaleMat4v","scalingMat4s","rotationTranslationMat4","xx","xz","yy","zz","wx","wy","wz","mat4ToEuler","order","m21","m22","m23","m31","m32","m33","asin","abs","atan2","composeMat4","position","quaternion","quaternionToRotationMat4","decomposeMat4","matrix","sx","sy","sz","set","invSX","invSY","invSZ","mat4ToQuaternion","this","lookAtMat4v","pos","target","up","z0","z1","x0","x1","y0","y1","posx","posy","posz","upx","upy","upz","targetx","targety","targetz","lookAtMat4c","orthoMat4c","left","right","bottom","top","near","far","rl","tb","fn","frustumMat4v","fmin","fmax","fmin4","fmax4","t","tempMat20","tempMat21","tempMat22","frustumMat4","perspectiveMat4","fovyrad","aspectratio","znear","zfar","pmin","pmax","tan","transformPoint3","transformPoint4","transformPoints3","points","points2","p0","p1","p2","pi","result","m0","m1","m2","m5","m6","m10","transformPositions3","transformPositions4","transformVec3","transformVec4","rotateVec3X","rotateVec3Y","rotateVec3Z","projectVec4","unprojectVec3","viewMat","projMat","lerpVec3","t1","t2","flatten","leni","j","lenj","item","push","identityQuaternion","eulerToQuaternion","euler","c1","c2","c3","s1","s2","s3","trace","vec3PairToQuaternion","norm_u_norm_v","real_part","normalizeQuaternion","angleAxisToQuaternion","angleAxis","halfAngle","fsin","quaternionToEuler","mulQuaternions","p3","q0","q1","q2","q3","vec3ApplyQuaternion","qx","qy","qz","qw","ix","iy","iz","iw","quaternionToMat4","tx","ty","tz","twx","twy","twz","txx","txy","txz","tyy","tyz","tzz","conjugateQuaternion","inverseQuaternion","quaternionToAngleAxis","angle","AABB3","AABB2","OBB3","OBB2","Sphere3","transformOBB3","containsAABB3","aabb1","aabb2","getAABB3Diag","aabb","getAABB3DiagPoint","diagVec","xneg","xpos","yneg","ypos","zneg","zpos","getAABB3Center","getAABB2Center","collapseAABB3","AABB3ToOBB3","obb","positions3ToAABB3","positions","positionsDecodeMatrix","xmin","ymin","zmin","xmax","ymax","zmax","decompressPosition","OBB3ToAABB3","points3ToAABB3","points3ToSphere3","sphere","numPoints","dist","radius","positions3ToSphere3","tempVec3a","tempVec3b","lenPositions","numPositions","OBB3ToSphere3","point","lenPoints","getSphere3Center","expandAABB3","expandAABB3Point3","triangleNormal","normal","p1x","p1y","p1z","p2x","p2y","p2z","p3x","p3y","p3z","mag","octEncodeVec3","array","xfunc","yfunc","tempx","tempy","Int8Array","octDecodeVec2","oct","dot","uniquePositions","indicesLookup","indicesReverseLookup","weldedIndices","faces","numFaces","compa","compb","compc","cb","ab","cross","inverseNormal","geometryCompression","quantizePositions","quantizedPositions","maxInt","xMultiplier","yMultiplier","zMultiplier","verify","num","floor","compressPosition","multiplier","Float32Array","createPositionsDecodeMatrix","xwid","ywid","zwid","transformAndOctEncodeNormals","modelNormalMatrix","normals","lenNormals","compressedNormals","lenCompressedNormals","best","currentCos","bestCos","localNormal","worldNormal","octEncodeNormals","buildEdgeIndices","Uint16Array","indices","edgeThreshold","vx","vy","vz","positionsMap","precision","pow","lenUniquePositions","weldVertices","numIndices","ia","ib","ic","face","buildFaces","edge1","edge2","index1","index2","edge","normal1","normal2","edgeIndices","thresholdDot","edges","largeIndex","faceIndex","face1","face2","dot2","Uint32Array","isTriangleMeshSolid","vertexIndexMapping","compareIndexPositions","posA","posB","newIndices","sort","uniqueVertexIndex","a2","b2","temp","compareEdges","e1","e2","sameEdgeCount","XKTMesh","cfg","meshId","meshIndex","geometry","color","metallic","roughness","opacity","textureSet","entity","XKTGeometry","geometryId","primitiveType","geometryIndex","numInstances","positionsQuantized","normalsOctEncoded","colorsCompressed","uvs","uvsCompressed","solid","XKTEntity","entityId","meshes","entityIndex","hasReusedGeometries","XKTTile","entities","KDNode","XKTMetaObject","metaObjectId","propertySetIds","metaObjectType","metaObjectName","parentMetaObjectId","XKTPropertySet","propertySetId","propertySetType","propertySetName","properties","XKTTexture","textureId","textureIndex","imageData","channel","width","height","src","compressed","mediaType","minFilter","magFilter","wrapS","wrapT","wrapR","XKTTextureSet","textureSetId","textureSetIndex","materialType","materialIndex","colorTexture","metallicRoughnessTexture","normalsTexture","emissiveTexture","occlusionTexture","tempVec4a","tempVec4b","tempMat4","tempMat4b","kdTreeDimLength","TEXTURE_ENCODING_OPTIONS","useSRGB","qualityLevel","encodeUASTC","mipmaps","XKTModel","modelId","projectId","revisionId","author","createdAt","creatingApplication","schema","minTileSize","propertySets","propertySetsList","metaObjects","metaObjectsList","reusedGeometriesDecodeMatrix","geometries","geometriesList","textures","texturesList","textureSets","textureSetsList","meshesList","entitiesList","tilesList","finalized","params","propertySet","metaObject","_rootMetaObject","fileExt","split","pop","texture","colorTextureId","metallicRoughnessTextureId","normalsTextureId","emissiveTextureId","occlusionTextureId","triangles","lines","colors","xktGeometryCfg","uv","Uint8Array","mergedPositions","mergedIndices","mergeVertices","rotation","mesh","meshIds","meshIdIdx","meshIdLen","warn","createMetaObject","log","_removeUnusedTextures","_compressTextures","_bakeSingleUseGeometryPositions","_bakeAndOctEncodeNormals","_createEntityAABBs","rootKDNode","_createKDTree","_createTilesFromKDTree","_createReusedGeometriesDecodeMatrix","_flagSolidGeometries","countTextures","Promise","resolve","encodingOptions","load","ImageLoader","image","type","then","encode","KTX2BasisWriter","encodedData","encodedImageData","err","entityAABB","_insertEntityIntoKDTree","kdNode","nodeAABB","dim","aabbLeft","aabbRight","_createTilesFromKDNode","_createTileFromEntities","tileAABB","tileCenter","tileCenterNeg","rtcAABB","reused","k","lenk","tile","reusedGeometriesAABB","countReusedGeometries","numGeometries","maxNumPositions","maxNumIndices","XKT_VERSION","writeXKTModelToArrayBuffer","xktModel","metaModelData","stats","data","getModelData","deflatedData","deflateData","texturesSize","textureData","byteLength","arrayBuffer","createArrayBuffer","numPropertySets","numMetaObjects","numTextures","numTextureSets","numMeshes","numEntities","numTiles","lenColors","lenUVs","lenIndices","lenEdgeIndices","lenMatrices","lenTextures","xktTexture","numCompressedTextures","metadata","eachTextureDataPortion","eachTextureAttributes","eachTextureSetTextures","Int32Array","matrices","eachGeometryPrimitiveType","eachGeometryPositionsPortion","eachGeometryNormalsPortion","eachGeometryColorsPortion","eachGeometryUVsPortion","eachGeometryIndicesPortion","eachGeometryEdgeIndicesPortion","eachMeshGeometriesPortion","eachMeshMatricesPortion","eachMeshTextureSet","eachMeshMaterialAttributes","eachEntityId","eachEntityMeshesPortion","eachTileAABB","eachTileEntitiesPortion","countPositions","countNormals","countColors","countUVs","countIndices","countEdgeIndices","id","propertySetsIndex","propertySetJSON","name","metaObjectsIndex","metaObjectJSON","parent","external","portionIdx","textureAttrIdx","eachTextureSetTexturesIndex","countEntityMeshesPortion","eachMeshMaterialAttributesIndex","matricesIndex","tileIndex","tileEntities","numTileEntities","entityMeshes","numEntityMeshes","tileAABBIndex","pako","buffer","strings","JSON","stringify","replace","chr","charCodeAt","substr","elements","indexData","dataLen","elementsize","indexBuf","dataArray","offset","element","toArrayBuffer","earcut","holeIndices","minX","minY","maxX","maxY","invSize","hasHoles","outerLen","outerNode","linkedList","next","prev","list","queue","steiner","getLeftmost","compareX","eliminateHole","filterPoints","eliminateHoles","earcutLinked","start","end","clockwise","last","signedArea","insertNode","equals","removeNode","again","area","ear","pass","zOrder","prevZ","nextZ","e","tail","numMerges","pSize","qSize","inSize","sortLinked","indexCurve","stop","isEarHashed","isEar","cureLocalIntersections","splitEarcut","pointInTriangle","minTX","minTY","maxTX","maxTY","minZ","maxZ","n","intersects","locallyInside","isValidDiagonal","splitPolygon","hole","hx","hy","mx","my","tanMin","Infinity","sectorContainsSector","findHoleBridge","leftmost","ay","bx","by","cx","cy","px","py","intersectsPolygon","inside","middleInside","o1","sign","o2","o3","o4","onSegment","Node","an","bp","sum","deviation","polygonArea","trianglesArea","vertices","holes","dimensions","holeIndex","tempVec2a","tempVec3c","parseCityJSONIntoXKTModel","reject","transform","transformedVertices","transformVertices","sourceFormat","schemaVersion","version","title","created","numTriangles","numVertices","numObjects","rootMetaObjectId","modelMetaObjectId","ctx","msg","nextId","cityObjects","CityObjects","objectId","parseCityObject","parseCityJSON","cityObject","parents","objectMaterial","surfaceMaterials","appearance","materials","geometryMaterial","material","themeIds","keys","theme","surfaceMaterial","parseGeometrySurfacesWithOwnMaterials","parseGeometrySurfacesWithSharedMaterial","createEntity","parseSurfacesWithOwnMaterials","boundaries","shells","solids","surfaces","surface","diffuseColor","transparency","sharedIndices","geometryCfg","newFace","extractLocalIndices","pList","getNormalOfPositions","pv","to2D","unshift","tr","createGeometry","createMesh","parseSurfacesWithSharedMaterial","primitiveCfg","boundary","newBoundary","index","includes","vertexIndex","indexOf","nexti","_p","_n","re","x3","tmp2","y3","utils","String","parseGLTFIntoXKTModel","baseUri","includeTextures","includeNormals","getAttachment","numNormals","numUVs","parse","GLTFLoader","gltfData","metaModelCorrections","getMetaModelCorrections","Error","geometryCreated","parseTexture","parseTextures","_textureSetId","parseTextureSet","_attributes","parseMaterialAttributes","parseMaterials","scene","scenes","nodes","countMeshUsage","parseNode","parseScene","parseDefaultScene","errMsg","eachRootStats","eachChildRoot","metaObjectsMap","metaObjectParent","rootMetaObject","numChildren","countChildren","source","sampler","createTexture","flipY","_textureId","textureSetCfg","normalTexture","normalTextureId","metallicPBR","pbrMetallicRoughness","baseColorTexture","extensions","specularPBR","specularTexture","specularColorTexture","createTextureSet","materialAttributes","diffuseFactor","common","technique","blinn","phong","lambert","diffuse","transparent","baseColorFactor","metallicFactor","roughnessFactor","node","instances","children","childNode","deferredMeshIds","depth","localMatrix","translation","numPrimitives","primitives","primitive","_xktGeometryId","xktGeometryId","mode","attributes","POSITION","NORMAL","COLOR_0","TEXCOORD_0","xktMeshId","meshCfg","nodeName","xktEntityId","rootMetaObjectStats","atob2","atob","Buffer","from","WEBGL_COMPONENT_TYPES","Int16Array","WEBGL_TYPE_SIZES","parseGLTFJSONIntoXKTModel","reuseGeometries","gltf","createXKTGeometryIds","nextMeshId","buffers","all","map","bufferInfo","_arrayBuffer","_buffer","uri","dataUriRegexResult","match","isBase64","decodeURIComponent","ArrayBuffer","view","parseArrayBuffer","parseBuffer","parseBuffers","bufferViewsInfo","bufferViews","parseBufferView","parseBufferViews","freeBuffers","materialsInfo","materialInfo","parseMaterial","_materialData","defaultSceneInfo","sceneInfo","glTFNode","bufferViewInfo","_typedArray","byteOffset","gltfMeshId","meshInfo","numPrimitivesInMesh","primitiveInfo","geometryHash","createPrimitiveGeometryHash","geometryArrays","parsePrimitiveGeometry","childNodeIdx","childGLTFNode","join","accessors","indicesIndex","accessorInfo","parseAccessorTypedArray","positionsIndex","normalsIndex","colorsIndex","bufferView","itemSize","TypedArray","componentType","itemBytes","BYTES_PER_ELEMENT","byteStride","count","parseIFCIntoXKTModel","WebIFC","autoNormals","includeTypes","excludeTypes","wasmPath","ifcAPI","IfcAPI","SetWasmPath","Init","modelID","OpenModel","ifcProjectId","GetLineIDsWithType","IFCPROJECT","GetLine","ifcProject","parseSpatialChildren","parseMetadata","flatMeshes","LoadAllGeometry","size","createObject","IFCSPACE","ifcSpaceId","flatMesh","GetFlatMesh","parseGeometry","IFCRELDEFINESBYPROPERTIES","relID","rel","relatingPropertyDefinition","RelatingPropertyDefinition","GlobalId","relatedObjects","RelatedObjects","props","HasProperties","Name","nominalValue","NominalValue","property","valueType","Description","description","createPropertySet","parsePropertySets","ifcElement","__proto__","constructor","parseRelatedItemsOfType","expressID","IFCRELAGGREGATES","IFCRELCONTAINEDINSPATIALSTRUCTURE","relation","related","relatedItems","isArray","forEach","element2","flatMeshExpressID","placedGeometries","placedGeometry","geometryExpressID","GetGeometry","vertexData","GetVertexArray","GetVertexData","GetVertexDataSize","GetIndexArray","GetIndexData","GetIndexDataSize","flatTransformation","parseLASIntoXKTModel","rotateX","colorDepth","skip","LASLoader","las","parsedData","loaderData","pointsFormatId","positionsValue","intensity","readPositions","readIntensities","readColorsAndIntensities","attributesPosition","attributesColor","attributesIntensity","colorSize","intensities","colorsCompressedSize","parseMetaModelIntoXKTModel","includeTypesMap","excludeTypesMap","newObject","countMetaObjects","parsePCDIntoXKTModel","littleEndian","textData","TextDecoder","decode","il","fromCharCode","escape","decodeText","header","result1","search","result2","exec","headerLen","str","fields","viewpoint","parseFloat","parseInt","l","sizeSum","rowSize","parseHeader","line","rgb","g","sizes","compressedSize","decompressedSize","decompressed","inData","outLength","ctrl","ref","inLength","outData","inPtr","outPtr","decompressLZF","dataview","DataView","getFloat32","getUint8","row","parsePLYIntoXKTModel","PLYLoader","hasColors","colorsValue","parseSTLIntoXKTModel","splitMeshes","smoothNormals","smoothNormalsAngleThreshold","binData","ensureBinary","isBinary","parseBinary","parseASCII","ensureString","reader","getUint32","defaultR","defaultG","defaultB","lastR","lastG","lastB","newMesh","normalX","normalY","normalZ","packedColor","getUint16","vertexstart","addMesh","normalx","normaly","normalz","verticesPerFace","normalsPerFace","text","faceRegex","faceCounter","floatRegex","vertexRegex","RegExp","normalRegex","nextGeometryId","ni","acc","posi","vertexMap","vertexNormals","vertexNormalAccum","precisionPoints","numVerts","ii","jj","faceToVertexNormals","buildBoxGeometry","xSize","ySize","zSize","center","centerX","centerY","centerZ","buildBoxLinesGeometry","buildCylinderGeometry","radiusTop","radiusBottom","radialSegments","heightSegments","h","currentRadius","currentHeight","first","second","startIndex","tu","tv","openEnded","heightHalf","heightLength","radialAngle","PI","radialLength","radiusChange","atan","buildGridGeometry","divisions","step","halfSize","buildPlaneGeometry","xSegments","zSegments","halfWidth","halfHeight","planeX","planeZ","planeX1","planeZ1","segmentWidth","segmentHeight","offset2","buildSphereGeometry","lod","widthSegments","sinTheta","cosTheta","phi","sinPhi","buildTorusGeometry","tube","tubeSegments","arc","letters","buildVectorTextGeometry","penUp","pointsLen","origin","xOrigin","yOrigin","zOrigin","trim","countVerts","iLine","charAt","buf","fs","convert2xkt","sourceData","metaModelSource","output","outputXKTModel","outputXKT","outputStats","sourceSize","xktSize","compressionRatio","conversionTime","_log","startTime","Date","ext","readFileSync","sourceFileSizeBytes","toFixed","parseMetaModelJSON","convert","gltfJSON","gltfBasePath","getBasePath","filePath","arrayBuf","parser","converterParams","createDefaultMetaObjects","finalize","xktArrayBuffer","xktContent","targetFileSizeBytes","outputDir","existsSync","mkdirSync","recursive","writeFileSync","lastIndexOf","substring","installFilePolyfills"],"sourceRoot":""}